This is the X10 C++ code generation backend.

The code works best if x10.lib and x10.common share the parent directory
with x10.backend.


Prerequisites
=============

- Install x10.lib using the instructions in the README.  On AIX, you can immediately build the library.
  Do not use the X10BACKEND_COMPAT tag.  The code has been updated to work with the latest x10.lib (once compilation errors are fixed there).

- Build the base X10 compiler so that x10.common contains the jars and scripts.


Building
========

- Run "ant" in x10.backend.

- Run "make clean" in x10.backend/x10lang, followed by "make".  Note that this step will also build a stub library to run the code on systems without LAPI.

- Build x10.lib.  The stub library and header generated in the previous step will allow it to build even on Cygwin/Linux.


Running
=======

x10c++ currently invokes g++ by default.  Note that this default WILL NOT work on any platform at the moment.
To compile the code on Cygwin/Linux, please add '-post "g++ # # -llapi"' to the x10c++ command line.
To compile the code on AIX, please add '-post "mpCC_r -q64 -O3 -qinline -qarch=pwr5 -qtune=pwr5 -qhot -qrtti=all -DNDEBUG"' to the x10c++ command line (replace "mpCC_r" by "xlC_r" in standalone mode).
The above commands will generate a.exe/a.out (depending on the platform) in the output directory.
Use the '-d "outdir"' to change the default output directory to "outdir".  The default output directory is ".".

The generated code can also be compiled manually using the system default compiler.
To do this, give the "-c" option to x10c++, and then invoke "make -f $X10ROOT/x10.backend/examples/Makefile appname".
To run the generated code, invoke "appname" with the right arguments (I used "-o -m 9").


Detailed instructions for building a debug version of RandomAccess_Dist on AIX
==============================================================================
To build a sequential debug version of the library on AIX, run the following in x10.backend/x10lang:
	make CXX='xlC_r' CXXFLAGS='-g' clean all

To build a sequential debug version of RandomAccess_Dist on AIX, run the following in x10.backend/examples:
	../bin/x10c++ -post 'xlC_r -g -q64 -qarch=pwr5 -qrtti=all' -d out RandomAccess_Dist.x10

The above will produce a debuggable 'a.out' in x10.backend/examples/out

If you want to rebuild the generated C++ sources (e.g., after manually changing them), invoke in x10.backend/examples:
	make CXX='xlC_r' CXXFLAGS='-g' out/RandomAccess_Dist

The above will produce a debuggable 'RandomAccess_Dist' in x10.backend/examples/out


Detailed instructions for building a parallel version of RandomAccess_Dist on AIX
=================================================================================
To build the parallel version, issue
	make clean all
in x10.backend/x10lang, followed by
	../bin/x10c++ -d out -c RandomAccess_Dist.x10
	make out/RandomAccess_Dist
in x10.backend/examples.  To run, first set the following in your environment:
	export MP_MSG_API=mpi,lapi
	export MP_EUILIB=ip
and then issue
	poe out/RandomAccess_Dist $ARGS -procs $NPROCS -hostfile ../../x10.lib/hostfiles/host_rlsecomp1.list
where $ARGS is empty for the current version, and $NPROCS is a number from 1 to 8


Instructions for building and running from Eclipse
==================================================
Check out all of the prerequisites into the workspace.

Select the file to build in Package Explorer, and invoke the "x10c++" configuration from the Run menu.
This will produce the C++ output file and attempt to compile it using "g++".

