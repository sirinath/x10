Test conditions changed to tend to include rather than exclude GC:
remove explicit calls to GC, start with small JVM size, re-execute
until reaching steady state, then take average over 10 executions.

1. Place checking is very expensive: 60x-200x performance penalty
   relative to X10 code without place checking. (See x10-opt-java vs
   x10-dbg-java.)

2. Basic X10 method calls are 10x worse than Java. (SeqMethodCall1)

3. X10 Rails are about 7x more expensive than Java arrays. (SeqRail1)

4. Simple recursive code calling util.Random also is 4-5x more
   expensive than equivalent Java. (SeqUTSBin1)

5. Dead simple array-like X10 code is 26x worse than the
   hand-translation into Java. Likely due to
   boxing/unboxing. (SeqPseudoArray1)

6. Actual X10 Arrays are about 13x slower than equivalent Java code.

7. Using "for ((i,j):Point in r)" loops is an additional 2x more
   expensive than traditional C/Java loops. Likely due to unnecessary
   allocation of Point. (SeqMatMultAdd1b)

8. Performance of parallel UTS benchmark using X10 async/AtomicInteger
   on a dual-core x86 is about 50x worse than the equivalent
   sequential X10 code. (ParUTSBin1 vs SeqUTSBin1).

Benchmarks run on snakehead (x86 Thinkpad Windows IBM Java 6):

--- SeqMethodCall1
java                 160 Mop/s
x10-opt-java         15.6 Mop/s =java/10.3
x10-dbg-java         199 kop/s =java/803.8 =x10-opt-java/78.3

--- SeqRail1
java                 272 Mop/s
x10-opt-java         39.1 Mop/s =java/6.9
x10-dbg-java         165 kop/s =java/1652.7 =x10-opt-java/237.9

--- SeqUTSBin1
java                 4.41 Mop/s
x10-opt-java         2.88 Mop/s =java/1.5

--- ParUTSBin1
(sequential)         8.82 Mop/s
x10-opt-java         169 kop/s =(sequential)/52.1

--- SeqPseudoArray1
java                 148 Mop/s
x10-opt-java         5.67 Mop/s =java/26.1

--- SeqMatMultAdd1a
java                 38.9 Mop/s
x10-opt-java         2.97 Mop/s =java/13.1
x10-dbg-java         51.4 kop/s =java/757.4 =x10-opt-java/57.9

--- SeqMatMultAdd1b
java                 38.9 Mop/s
x10-opt-java         1.61 Mop/s =java/24.2


