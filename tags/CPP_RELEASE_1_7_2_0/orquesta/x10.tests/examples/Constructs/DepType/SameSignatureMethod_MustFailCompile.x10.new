/*
 *
 * (C) Copyright IBM Corporation 2006
 *
 *  This file is part of X10 Test.
 *
 */
/** Tests that two methods in a class cannot have the same signature.
 *@author pvarma
 *
 */

import harness.x10Test;;

public class SameSignatureMethod_MustFailCompile extends x10Test { 

	class Test(public val i: int, public val j: int, ) /*
 *
 * (C) Copyright IBM Corporation 2006
 *
 *  This file is part of X10 Test.
 *
 */
/** Tests that two methods in a class cannot have the same signature.
 *@author pvarma
 *
 */

import harness.x10Test;

public class SameSignatureMethod_MustFailCompile extends x10Test { 

	class Test(int i, int j) {
		// the two tester methods with same signature are disallowed
		 public def tester(val k: int{k == 0}): boolean = {return true;}
		 public def tester(val l: int{l == 0}): int = {return l;}
		def this(val i: int, val j: int): Test = {
			this.i=i;
			this.j=j;
		}/*
 *
 * (C) Copyright IBM Corporation 2006
 *
 *  This file is part of X10 Test.
 *
 */
/** Tests that two methods in a class cannot have the same signature.
 *@author pvarma
 *
 */

import harness.x10Test;

public class SameSignatureMethod_MustFailCompile extends x10Test { 

	class Test(int iint*
 *
 * (C) Copyright IBM Corporation 2006
 *
 *  This file is part of X10 Test.
 *
 */
/** Tests that two methods in a class cannot have the same signature.
 *@author pvarma
 *
 */

import harness.x10Test;

public class SameSignatureMethod_MustFailCompile extends x10Test { 

	class Test(int i/*
 *
 * (C) Copyright IBM Corporation 2006
 *
 *  This file is part of X10 Test.
 *
 */
/** Tests that two methods in a class cannot have the same signature.
 *@author pvarma
 *
 */

import harness.x10Test;

public class SameSignatureMethod_MustFailCompile extends x10Test { 

	class Test(int i, int jint*
 *
 * (C) Copyright IBM Corporation 2006
 *
 *  This file is part of X10 Test.
 *
 */
/** Tests that two methods in a class cannot have the same signature.
 *@author pvarma
 *
 */

import harness.x10Test;

public class SameSignatureMethod_MustFailCompile extends x10Test { 

	class Test(int i, int j) {
		// the two tester methods with same signature are disallowed
		 public boolean tester (final int(: k == 0) k) {return true;}
		 public int tester (final int(: l == 0) l) {return l;}
		Test (final int i, final int j ) {
			this.i=i;
			this.j=j;
		}
	}
		
	public def run(): boolean = {
	   return true;
	}  
	
    public static def main(var args: Rail[String]): void = {
        new SameSignatureMethod_MustFailCompile().execute();
    }
   

		
}
