<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=PowerPoint.Slide>
<meta name=Generator content="Microsoft PowerPoint 10">
<link id=Main-File rel=Main-File href="../web-tutorial-1.htm">
<link rel=Preview href=preview.wmf>
<script>
<!--
if( window.name != "PPTOtl" )
  parent.location.href = "../web-tutorial-1.htm";
//-->
</script>
<meta name=Robots content=NoIndex>
</head>

<body bgcolor=white alink=black link=black vlink=black text=black>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0001.htm');">Slide 1</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0002.htm');">X10 Team</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>X10 Core Team</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Rajkishore Barik</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Vincent Cave</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Chris Donawa</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Allan Kielstra</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Sriram Krishnamoorthy</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Nathaniel Nystrom</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Igor Peshansky</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Christoph von Praun</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Vijay Saraswat</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Vivek Sarkar</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Tong Wen</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0003.htm');">Recent publications</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>&quot;X10: An Object-Oriented Approach
  to Non-Uniform Cluster Computing&quot;, P. Charles, C. Donawa, K. Ebcioglu,
  C. Grothoff, A. Kielstra, C. von Praun, V. Saraswat, V. Sarkar.<span
  style='mso-spacerun:yes'>  </span>OOPSLA conference, October 2005.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>&quot;Concurrent Clustered
  Programming&quot;,<span style='mso-spacerun:yes'>  </span>V. Saraswat, R.
  Jagadeesan.<span style='mso-spacerun:yes'>  </span>CONCUR conference, August
  2005.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>“Experiences with an SMP Implementation
  for X10 based on the Java Concurrency Utilities Rajkishore Barik, Vincent
  Cave, Christopher Donawa, Allan Kielstra,Igor Peshansky, Vivek Sarkar.
  Workshop on Programming Models for Ubiquitous Parallelism (PMUP), September
  2006.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>&quot;An Experiment in Measuring the
  Productivity of Three Parallel Programming Languages”, K. Ebcioglu, V.
  Sarkar, T. El-Ghazawi, J. Urbanic. P-PHEC workshop, February 2006.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>&quot;X10: an Experimental Language for
  High Productivity Programming of Scalable Systems&quot;, K. Ebcioglu, V.
  Sarkar, V. Saraswat. P-PHEC workshop, February 2005.</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0004.htm');">Tutorial outline</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>1) X10 in a nutshell</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>2) Sequential X10</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Type system</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Standard library</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>3) Concurrency in X10</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Activities</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Atomic blocks</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Clocks, clocked variables</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>4) X10 arrays</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Points</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Regions</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>5) Distributed X10</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Places</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Distributions</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Distributed arrays</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>6) Further examples</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0005.htm');">X10 in a Nutshell</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0006.htm');">X10 Programming Model</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0007.htm');">X10 v0.41 Cheat sheet</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0008.htm');">X10 v0.41 Cheat sheet:
Array support</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0009.htm');">Comparison with Java</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>X10 language builds on the Java
  language</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>Shared underlying philosophy: shared syntactic and semantic tradition,
  simple, small, easy to use, efficient to implement, machine independent</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>X10 does not have:</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Dynamic class loading</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Java’s concurrency features</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>thread library, volatile, synchronized,
  wait, notify</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>X10 restricts:</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Class variables and static
  initialization</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>X10 adds to Java:</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>value types, nullable</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Array language</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Multi-dimensional arrays, aggregate
  operations</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>New concurrency features</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>activities (async, future), atomic
  blocks, clocks</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Distribution</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>places</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>distributed arrays</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0010.htm');">X10 prototype
implementation</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0011.htm');">Examples of X10 compiler
error messages</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>1) x10c TutError1.x10</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>TutError1.x10:8: Could not find field
  or local variable &quot;evenSum&quot;.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>            </span>for (int i = 2 ; i &lt;= n ; i +=
  2 ) evenSum += i;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>                                               
  </span>^----^</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>2) x10c TutError2.x10</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>x10c: TutError2.x10:4:27:4:27:
  unexpected token(s) ignored</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>3) x10c TutError3.x10</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>x10c:
  C:\vivek\eclipse\workspace\x10\examples\Tutorial\TutError3.java:49:</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>local variable n is accessed from within inner class; needs to be
  declared</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>final</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0012.htm');">Tutorial outline</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>1) X10 in a nutshell</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>2) Sequential X10</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Type system</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Standard library</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>3) Concurrency in X10</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Activities</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Atomic blocks</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Clocks, clocked variables</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>4) X10 arrays</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Points</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Regions</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>5) Distributed X10</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Places</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Distributions</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Distributed arrays</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>6) Further examples</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0013.htm');">Sequential X10</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Overview</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>value types</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>nullable types</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Safety properties</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0014.htm');">Sequential X10</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0015.htm');">Value types : immutable
instances</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>value class</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Can only extend value class or
  x10.lang.Object.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>All fields are implicitly final</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Can only be extended by value classes.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>May contain fields with reference type.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>May be implemented by reference or
  copy.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Values are equal (==) if their fields
  are equal, recursively.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0016.htm');">Memory safety</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>No “ill mem ref”</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>No object can have a reference to an
  object who’s memory has been freed.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>X10 uses garbage collection.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Every value read from a location has
  been previously written into the location.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>No uninitialized variables.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>An object may only access memory within
  its representation, and other objects it has a reference to.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>X10 supports no pointer arithmetic.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Array access is bounds-checked
  dynamically (if necessary).</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0017.htm');">Pointer safety</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>X10 supports the nullable type
  constructor.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>For any datatype T, the datatype nullable&lt;T&gt;
  contains all the value of T and null.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>If a method is invoked or a field is
  accessed on the value null, a NullPointerException (NPE) is thrown.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Runtime invariant<br>
    No operation on a value of type T, which is not of the form nullable S, can
  throw an NPE.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0018.htm');">x10.lang standard library</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Java package with “built in” classes
  that provide support for selected X10 constructs</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Standard types</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>boolean, byte, char, double, float,
  int, long, short, String</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>x10.lang.Object -- root class for all
  instances of X10 objects</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>x10.lang.clock --- clock instances
  &amp; clock operations</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>x10.lang.dist --- distribution
  instances &amp; distribution operations</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>x10.lang.place --- place instances
  &amp; place operations</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>x10.lang.point --- point instances
  &amp; point operations</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>x10.lang.region --- region instances
  &amp; region operations</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>All X10 programs implicitly import the
  x10.lang.* package, so the x10.lang prefix can be omitted when referring to
  members of x10.lang.* classes</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>e.g., place.MAX_PLACES,
  dist.factory.block([0:100,0:100]), …</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Similarly, all X10 programs also
  implicitly import the java.lang.* package</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>e.g., X10 programs can use Math.min()
  and Math.max() from java.lang</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0019.htm');">Tutorial outline</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>1) X10 in a nutshell</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>2) Sequential X10</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Type system</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Standard library</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>3) Concurrency in X10</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Activities</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Atomic blocks</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Clocks, clocked variables</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>4) X10 arrays</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Points</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Regions</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>5) Distributed X10</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Places</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Distributions</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Distributed arrays</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>6) Further examples</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0020.htm');">Concurrency in X10</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>async, finish</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>future, force</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>foreach</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Global vs. local termination</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Exception handling</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Behavioral annotations</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>atomic</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Memory model</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>clocks</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0021.htm');">async</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>async (P)<span
  style='mso-spacerun:yes'>  </span>S</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Creates a new child activity at place P,
  that executes statement S</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Returns immediately</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>S may reference final variables in
  enclosing blocks</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Activities cannot be named</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Activity cannot be aborted or cancelled</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0022.htm');">finish</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>finish S</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Execute S, but wait until all
  (transitively) spawned asyncs have terminated.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Rooted exception model</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Trap all exceptions thrown by spawned
  activities.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Throw an (aggregate) exception if any
  spawned async terminates abruptly.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>implicit finish at main activity</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>finish is useful for expressing</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>“synchronous” operations on</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>(local or) remote data.</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0023.htm');">Termination</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Local termination:</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>Statement s terminates locally when activity has completed all its
  computation with respect to s.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Global termination:<br>
    Local termination + activities that have been spawned by s terminated
  globally (recursive definition)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'> </span>main function is root activity</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'> </span>program terminates iff root activity
  terminates.<br>
    <span style='mso-spacerun:yes'> </span>(implicit finish at root activity)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'> </span>‘daemon threads’ (child outlives root
  activity) not<br>
    <span style='mso-spacerun:yes'>  </span>allowed in X10</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0024.htm');">Termination (example)</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>public void main (String[] args) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>...</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>finish {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>async {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>		for () {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>async {...</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>finish async {...</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>...</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>	} // finish</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>}</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0025.htm');">Rooted computation X10</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0026.htm');">Rooted exception model</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0027.htm');">Example: rooted exception
model (async)</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0028.htm');">Behavioral annotations</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>nonblocking</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>On any input store, a nonblocking method can continue execution or
  terminate. (dual:<span style='mso-spacerun:yes'>  </span>blocking, default: nonblocking)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>recursively nonblocking</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>Nonblocking, and every spawned activity is recursively nonblocking.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>local <span
  style='mso-spacerun:yes'> </span><br>
    A local method guarantees that its execution will only access variables
  that are local to the place of the current activity. <br>
    (dual: remote, default: local)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>sequential<br>
    Method does not create concurrent activities.<br>
    In other words, method does not use async, foreach, ateach. <br>
    (dual: parallel, default: parallel)</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0029.htm');">Static semantics</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Behavioral annotations are checked with
  a conservative intra-procedural data-flow analysis.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Inheritance rule: Annotations must be
  preserved or strengthened by overriding methods.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Multiple behavioral annotations must be
  mutually consistent.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0030.htm');">foreach</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>foreach (point p: R) S</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Creates |R| async statements in
  parallel at current place.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Termination of all (recursively
  created) activities can be ensured with finish.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>finish foreach is a convenient way to
  achieve master-slave fork/join parallelism (OpenMP programming model)</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0031.htm');">atomic</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Atomic blocks are conceptually executed
  in a single step while other activities are suspended: isolation and atomicity.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>An atomic block ...</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>must be nonblocking</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>must not create concurrent activities (sequential)</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>must not access remote data (local)</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0032.htm');">Static semantics of
atomic blocks</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>An atomic block must...be local,
  sequential, nonblocking:</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>...not include blocking operations</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>no await, no when, no calls to blocking
  methods</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>... not include access to data at
  remote places</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>no ateach, no future, only calls to local
  methods</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>... not spawn other activities</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>no async, no foreach, only calls to sequential
  methods</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0033.htm');">Using X10 method
annotations</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>A method declaration, foo(), can be
  annotated with:</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>nonblocking </font><font
  face=Wingdings size=2>è</font><font face=Arial size=2> no static occurrence
  in foo() </font><font face=Arial size=2>of when, force(), next(); any method
  that foo() invokes must also be annotated as nonblocking</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>local </font><font face=Wingdings
  size=2>è</font><font face=Arial size=2> all data accessed in foo() is
  statically guaranteed to be </font><font face=Arial size=2>place-local; any
  method that foo() invokes must also be annotated as local</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>To check if an activity (async,
  foreach, ateach, future) is local nonblocking</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Check local body of activity to ensure
  that it satisfies the conditions</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Check that all methods called in
  activity are also annotated (and checked) as local nonblocking</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>NOTE: this also works in the presence
  of recursion</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0034.htm');">Exceptions in atomic
blocks</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Atomicity guarantee only for successful
  execution.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Exceptions should be caught inside
  atomic block</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Explicit undo in the catch handler</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>(Uncaught) exceptions propagate across
  the atomic block boundary; atomic terminates on normal or abrupt termination
  of its block.</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0035.htm');">Data races with async /
foreach</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0036.htm');">Memory Model</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0037.htm');">Concurrency Control:
Clocks</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>clock</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Clocks safety</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Clocked variables</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0038.htm');">Clocks: Motivation</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Activity coordination using finish and force()
  is accomplished by checking for activity termination</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>However, there are many cases in which
  a producer-consumer relationship exists among the activities, and a
  “barrier”-like coordination is needed without waiting for activity
  termination</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>The activities involved may be in the
  same place or in different places</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0039.htm');">Clocks (1/2)</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>clock c = clock.factory.clock();</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Allocate a clock, register current
  activity with it. Phase 0 of c starts.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>async(…) clocked (c1,c2,…) S</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>ateach(…) clocked (c1,c2,…) S</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>foreach(…) clocked (c1,c2,…) S</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Create async activities registered on
  clocks c1, c2, …</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>c.resume();</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Nonblocking operation that signals
  completion of work<span style='mso-spacerun:yes'>  </span>by current activity
  for this phase of clock c</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>next;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Barrier --- suspend until all clocks
  that the current activity is registered with can advance. c.resume() is first
  performed for each such clock, if needed.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Next can be viewed like a “finish” of
  all computations under way in the current phase of the clock</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0040.htm');">Clocks (2/2)</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>c.drop();</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Unregister with c. A terminating
  activity will implicitly drop all clocks that it is registered on.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>c.registered()</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Return true iff current activity is
  registered on clock c</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>c.dropped() returns the opposite of c.registered()</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>ClockUseException</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Thrown if an activity attempts to
  transmit or operate on a clock that it is not registered on</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Or if an activity attempts to transmit
  a clock in the scope of a finish</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0041.htm');">Semantics</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Static semantics</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>An activity may operate only on those
  clocks it is registered with.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>In finish S,S may not contain any
  (top-level) clocked asyncs.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Dynamic semantics</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>A clock c can advance only when all its
  registered activities have executed c.resume().</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>An activity may not pass-on clocks on
  which it is not live to sub-activities.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>An activity is deregistered from a
  clock when it terminates</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0042.htm');">Behavioral annotations
for clocks</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>clocked (c0,..., ck).</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>A method m that spawns an async
  clocked(c0,...,ck) must declare {c0,...,ck} (or a superset) in its
  annotation: clocked (c0,..., ck).</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>{c0,...,ck} are fields of type clock
  declared in the calss that declares m.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0043.htm');">Example (TutClock1.x10)</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>finish async {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>final clock c = clock.factory.clock();</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>foreach (point[i]: [1:N]) clocked (c) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>    
  </span>while ( true ) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>      
  </span>int old_A_i = A[i];</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>      
  </span>int new_A_i = Math.min(A[i],B[i]);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>      
  </span>if ( i &gt; 1 )</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>          </span>new_A_i = Math.min(new_A_i,B[i-1]);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>      
  </span>if ( i &lt; N )</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>          </span>new_A_i = Math.min(new_A_i,B[i+1]);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>      
  </span>A[i] = new_A_i;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>      
  </span>next;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>      
  </span>int old_B_i = B[i];</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>      
  </span>int new_B_i = Math.min(B[i],A[i]);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>      
  </span>if ( i &gt; 1 )</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>          </span>new_B_i = Math.min(new_B_i,A[i-1]);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>      
  </span>if ( i &lt; N )</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>          </span>new_B_i = Math.min(new_B_i,A[i+1]);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>	<span style='mso-spacerun:yes'>   
  </span>B[i] = new_B_i;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>      
  </span>next;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>      
  </span>if ( old_A_i == new_A_i &amp;&amp; old_B_i == new_B_i )</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>          </span>break;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>    
  </span>} // while</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>} // foreach</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>} // finish async</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0044.htm');">Clock safety</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>An activity may be registered on one or
  more clocks</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Clock c can advance only when all
  activities registered with the clock have executed c.resume() and all posted
  activities have terminated globally.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>Runtime invariant: Clock operations are guaranteed to be
  deadlock-free.</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0045.htm');">Deadlock freedom</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Where is this useful?</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Whenever synchronization pattern of a
  program is independent of the data read by the program</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>True for a large majority of HPC codes.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>(Usually not true of reactive
  programs.)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Central theorem of X10:</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Arbitrary programs with async, atomic,
  finish (and clocks) are deadlock-free.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Key intuition:</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>atomic is deadlock-free.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>finish has a tree-like structure.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>clocks are made to satisfy conditions
  which ensure tree-like structure.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Hence no cycles in wait-for graph.</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0046.htm');">Clock example: SPECjbb</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>finish async {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>final clock c = new clock();</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>final Company company = createCompany(...);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>for (int w : [0:wh_num]) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>    
  </span>async clocked(c) { // a warehouse</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>int mode;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>atomic { mode = company.mode; };</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>initialize;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>next; // 1.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>while (mode != STOP) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>          </span>select a transaction;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>          </span>think;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>          </span>process the transaction;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>          </span>if (mode == RECORDING)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>            </span>record data;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>          </span>if (mode == RAMP_DOWN)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>            </span>next; // 2.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>          </span>atomic { mode = company.mode; };</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>} // while</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>    
  </span>} // a warehouse</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>} // for</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'> </span>// ------ continued next column --&gt;</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0047.htm');">Futures</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0048.htm');">future</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>future (P)<span
  style='mso-spacerun:yes'>  </span>S</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Creates a new child activity at place P,
  that executes statement S;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Returns immediately.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>S may reference final variables in
  enclosing blocks.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>future vs. async</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Return result from asynchronous
  computation</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Tolerate latency of remote access.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0049.htm');">future example</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>public class TutFuture1 {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>static int fib (final int n) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>if ( n &lt;= 0 ) return 0;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>if ( n == 1 ) return 1;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>future&lt;int&gt; x = future { fib(n-1) };</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>future&lt;int&gt; y = future { fib(n-2) };</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>return x.force() + y.force();</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>public static void main(String[] args) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>System.out.println(&quot;fib(10) = &quot; + fib(10));</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Divide and conquer: recursive calls
  execute concurrently.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0050.htm');">Example: rooted exception
model (future)</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0051.htm');">Futures can deadlock</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>nullable future&lt;int&gt; f1=null;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>nullable future&lt;int&gt; f2=null;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>void main(String[] args) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>f1 = future(here){a1()};</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>f2 = future(here){a2()};</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>f1.force();</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>int a1() {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>nullable future&lt;int&gt; tmp=null;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>do {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>tmp=f2;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>} while (tmp == null);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>return tmp.force();</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>int a2() {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>nullable future&lt;int&gt; tmp=null;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>do {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>tmp=f1;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>} while (tmp == null);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>return tmp.force();</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0052.htm');">Concurrency Control:
<br>
Conditional atomic blocks, when, await</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0053.htm');">when</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>when (E) S</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Activity suspends until a state in
  which the guard E is true.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>In that state, S is executed atomically
  and in isolation.</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Guard E</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>boolean expression</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>must be nonblocking</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>must not create concurrent activities (sequential)</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>must not access remote data (local)</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>must not have side-effects (const)</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>await (E)</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>syntactic shortcut for when (E) ;</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0054.htm');">Static semantics of guard
for when / await</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>boolean field</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>boolean expression with field access or
  constant values</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0055.htm');">Semaphores</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0056.htm');">Atomic blocks:
Simplifying barrier synchronization</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Original Java code</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>// Main thread (see spec.jbb.Company):
  …</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>// Wait for all threads to start.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>synchronized
  (company.initThreadsStateChange) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>while (initThreadsCount != threadCount) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>try {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>initThreadsStateChange.wait();</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>	} catch (InterruptedException e) {…}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>} ...</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>// Tell everybody it’s time for
  warmups.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>mode = RAMP_UP;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>synchronized (initThreadsCountMonitor)
  {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>	initThreadsCountMonitor.notifyAll();</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>} ....</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>// Worker thread</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>// (see spec.jbb.TransactionManager): …</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>synchronized
  (company.initThreadsCountMonitor) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>synchronized (company.initThreadsStateChange) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>company.initThreadsCount++;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>	<span style='mso-spacerun:yes'> 
  </span>company.initThreadsStateChange.notify();</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>try {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>	<span style='mso-spacerun:yes'> 
  </span>company.initThreadsCountMonitor.wait();</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>	} catch (InterruptedException e) {…}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>} ...</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>X10 atomic sections</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>// Main thread: …</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>// Wait for all threads to start.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>when(company.initThreadsCount==<br>
    <span style='mso-spacerun:yes'>          </span>threadCount) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>	mode = RAMP_UP;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>	initThreadsCountReached = true;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>} …</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>// Worker thread: …</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>atomic {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>	company.initThreadsCount++;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>await ( initThreadsCountReached );
  //barrier synch.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>…</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0057.htm');">Tutorial outline</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>1) X10 in a nutshell</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>2) Sequential X10</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Type system</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Standard library</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>3) Concurrency in X10</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Activities</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Atomic blocks</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Clocks, clocked variables</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>4) X10 arrays</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Points</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Regions</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>5) Distributed X10</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Places</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Distributions</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Distributed arrays</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>6) Further examples</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0058.htm');">X10 Array Language</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>point, region, distribution</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Syntax extensions</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Initialization</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Multi-dimensional arrays</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Aggregate operations</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0059.htm');">point</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>A point is an element of an
  n-dimensional Cartesian</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>space (n&gt;=1) with integer-valued
  coordinates e.g., [5], [1, 2], …</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>Dimensions are numbered from 0 to n-1</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>n is also referred to as the rank of
  the point</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>A point variable can hold values of
  different ranks e.g.,</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>point p; p = [1]; … p = [2,3]; …</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Operations</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>p1.rank</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>returns rank of point p1</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>p1.get(i)</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>returns element (i mod p1.rank) if i
  &lt; 0 or<span style='mso-spacerun:yes'>  </span>i &gt;= p1.rank</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>p1.lt(p2), p1.le(p2), p1.gt(p2),
  p1.ge(p2)</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>returns true iff p1 is lexicographically
  &lt;, &lt;=, &gt;, or &gt;= p2</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>only defined when p1.rank and p1.rank
  are equal</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0060.htm');">Syntax extensions for
points</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Implicit syntax for points:</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2><span style='mso-spacerun:yes'>    
  </span>point p = [1,2]<span style='mso-spacerun:yes'>  </span></font><font
  face=Wingdings size=2>à</font><font face="Courier New" size=2><span
  style='mso-spacerun:yes'>  </span>point p = point.factory(1,2)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Exploded variable declarations for
  points:</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2><span style='mso-spacerun:yes'>    
  </span>point p [i,j]<span style='mso-spacerun:yes'>    </span>// final int
  i,j</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Typical uses :</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>for (point p [i, j] : r) { ... }</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>for (point [i, j] : r) { ... }</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>int sum (point [i,j], point [k, l])
  <br>
    <span style='mso-spacerun:yes'>                      </span>{ return [i+k,
  j+l]; }</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>int [] iarr = new int [2] (point [i,j])
  { return i; }</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0061.htm');">Example: point
(TutPoint1)</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>public class TutPoint {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>public static void main(String[] args) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>point p1 = [1,2,3,4,5];</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>point p2 = [1,2];</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>point p3 = [2,1];</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>System.out.println(&quot;p1 = &quot; + p1 +</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>               </span>&quot; ; p1.rank = &quot; +
  p1.rank +</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>               </span>&quot; ; p1.get(2) = &quot; +
  p1.get(2));</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>System.out.println(&quot;p2 = &quot; + p2 +</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>               </span>&quot; ; p3 = &quot; + p3 +
  &quot; ; p2.lt(p3) = &quot; +</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>               </span>p2.lt(p3));</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0062.htm');">Rectangular regions</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>A rectangular region is the set of
  points contained in a rectangular subspace</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>A region variable can hold values of
  different ranks e.g.,</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>region R; R = [0:10]; … R = [-100:100,
  -100:100]; … R = [0:-1]; …</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Operations</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>R.rank ::= # dimensions in region;</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>R.size() ::= # points in region</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>R.contains(P) ::= predicate if region R
  contains point P</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>R.contains(S) ::= predicate if region R
  contains region S</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>R.equal(S) ::= true if region R equals
  region S</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>R.rank(i) ::= projection of region R on
  dimension i (a one-dimensional region)</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>R.rank(i).low() ::= lower bound of i<sup>th</sup>
  dimension of region R</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>R.rank(i).high() ::= upper bound of i<sup>th</sup>
  dimension of region R</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>R.ordinal(P) ::= ordinal value of point
  P in region R</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>R.coord(N) ::= point in region R with
  ordinal value = N</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>R1 &amp;&amp; R2 ::= region
  intersection (will be rectangular if R1 and R2 are rectangular)</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>R1 || R2 ::= union of regions R1 and R2
  (may not be rectangular)</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>R1 – R2 ::= region difference (may not
  be rectangular)</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0063.htm');">Example: region
(TutRegion1)</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>public class TutRegion {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>public static void main(String[] args) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>region R1 = [1:10, -100:100];</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>System.out.println(&quot;R1 = &quot; + R1 + &quot; ; R1.rank = &quot;
  + R1.rank + &quot; ; R1.size() = &quot; + R1.size() + &quot; ;
  R1.ordinal([10,100]) = &quot; + R1.ordinal([10,100]));</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>region R2 = [1:10,90:100];</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>System.out.println(&quot;R2 = &quot; + R2 + &quot; ; R1.contains(R2) =
  &quot; + R1.contains(R2) + &quot; ; R2.rank(1).low() = &quot; +
  R2.rank(1).low() + &quot; ; R2.coord(0) = &quot; + R2.coord(0));</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>}</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0064.htm');">Syntax extensions for
regions</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Region constructors</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>int hi, lo;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>region r = hi;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>    
  </span></font><font face=Wingdings size=2>à</font><font face="Courier New"
  size=2> </font><font face=Arial size=2>region r = region.factory.region(0,
  hi)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>region r = [low:hi]</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>    
  </span></font><font face=Wingdings size=2>à</font><font face="Courier New"
  size=2> region r = region.factory.region(lo, hi)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>region r1, r2;<span
  style='mso-spacerun:yes'>  </span>// 1-dim regions</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>region r = [r1, r2]</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>    
  </span></font><font face=Wingdings size=2>à</font><font face="Courier New"
  size=2> region r = region.factory.region(r1, r2); <br>
    <span style='mso-spacerun:yes'>      </span>// 2-dim region</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0065.htm');">X10 arrays</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Java arrays are one-dimensional and
  local</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>e.g., array args in main(String[] args)</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Multi-dimensional arrays are
  represented as “arrays of arrays” in Java</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>X10 has true multi-dimensional arrays
  (as Fortran) that can be distributed (as in UPC, Co-Array Fortran, ZPL,
  Chapel, etc.)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Array declaration</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>T [.] A declares an X10 array with
  element type T</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>An array variable can refer to arrays
  with different rank</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Array allocation</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>new T [ R ] creates a local rectangular
  X10 array with rectangular region R as the index domain and T as the element
  (range) type</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>e.g., int[.] A = new int[ [0:N+1,
  0:N+1] ];</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Array initialization</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>elaborate on a slide that follows...</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0066.htm');">Array declaration syntax:
[] vs [.]</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>General arrays: &lt;Type&gt;[.]</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>one or multidimensional arrays</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>can be distributed</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>arbitrary region</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Special case (“rail”): &lt;Type&gt;[]</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>1 dimensional</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>0-based, rectangular array</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>not distributed</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>can be used in place of general arrays</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>supports compile-time optimization</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Array of arrays (“jagged array”):
  &lt;Type&gt;[.][.]</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0067.htm');">Simple array operations</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>A.rank<span style='mso-spacerun:yes'>  
  </span><span style='mso-spacerun:yes'> </span>::= # dimensions in array</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>A.region ::= index region (domain) of
  array</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>A.distribution ::= distribution of
  array A</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>A[P] ::= element at point P, where P
  belongs to A.region</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>A | R ::= restriction of array onto
  region R</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Useful for extracting subarrays</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0068.htm');">Aggregate array
operations</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>A.sum(), A.max() ::= sum/max of
  elements in array</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>A1 &lt;op&gt; A2</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>returns result of applying a pointwise
  op on array elements, when A1.region = A2. region</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>&lt;op&gt; can include +, -, *,<span
  style='mso-spacerun:yes'>  </span>and /</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>A1 || A2 ::= disjoint union of arrays
  A1 and A2 <br>
    (A1.region and A2.region must be disjoint)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>A1.overlay(A2)</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>returns an array with region, A1.region
  || A2.region, with element value A2[P] for all points P in A2.region and
  A1[P] otherwise.</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Future work: framework for array
  operators</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0069.htm');">Example: arrays
(TutArray1)</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>public class TutArray1 {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>public static void main(String[] args) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>int[.] A = new int[ [1:10,1:10] ]</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>                   </span>(point [i,j]) { return
  i+j;} ;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>System.out.println(&quot;A.rank = &quot; + A.rank +</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>                           </span>&quot; ; A.region
  = &quot; + A.region);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>int[.] B = A | [1:5,1:5];</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>System.out.println(&quot;B.max() = &quot; + B.max());</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0070.htm');">Initialization of mutable
arrays</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Mutable array with nullable references
  to mutable’ objects:</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>	 RefType nullable [] farr = new
  RefType[N];<span style='mso-spacerun:yes'>  </span>// init with null value</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Mutable array with references to
  mutable objects:</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>	RefType [] farr = new RefType [N];<span
  style='mso-spacerun:yes'>  </span>// compile-time error, init required</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>dist d = dist.factory.block(N);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>	RefType [.] farr = new RefType [d]
  (point[i]) { return RefType(here, i); }</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>	Execution of initializer is implicitly
  parallel / distributed<br>
    (pointwise operation):</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>That hold ‘reference to value objects’
  (value object can be inlined)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>	int [] iarr = new int[N] ;<span
  style='mso-spacerun:yes'>  </span>// init with default value, 0</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>	int [] iarr = new int[] {1, 2, 3,
  4};<span style='mso-spacerun:yes'>  </span>// Java style</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>	int [] iarr = new int[N] (point[i])</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>                     </span>{return i}; // explicit
  init</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0071.htm');">Initialization of value
arrays</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Initialization of value arrays requires
  an initializer.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Value array of reference to mutable
  objects:</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>	RefType value [] farr = new value RefType
  [N];<span style='mso-spacerun:yes'>  </span><br>
    <span style='mso-spacerun:yes'>                  </span>// compile-time
  error, init required</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>RefType value [] farr = new value RefType [N] (point[i]) <br>
    <span style='mso-spacerun:yes'>                               </span>{
  return new Foo(); }</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Value array of ‘reference to value
  objects’ (value object can be inlined)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>int value [] iarr = new value int[] {1, 2, 3, 4};<span
  style='mso-spacerun:yes'>  </span><br>
    <span style='mso-spacerun:yes'>                                </span>//
  Java style init</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>int value [] iarr = new value int[N] (point[i])</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>                                    </span>{ return
  i };</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>                                    </span>//
  explicit init</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0072.htm');">Tutorial outline</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>1) X10 in a nutshell</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>2) Sequential X10</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Type system</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Standard library</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>3) Concurrency in X10</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Activities</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Atomic blocks</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Clocks, clocked variables</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>4) X10 arrays</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Points</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Regions</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>5) Distributed X10</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Places</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Distributions</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Distributed arrays</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>6) Further examples</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0073.htm');">Distributed X10</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Places</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Locality rule</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Distributions</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>async, futures</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>ateach</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Distributed arrays</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0074.htm');">Places in X10</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>place.MAX_PLACES = total number of
  places (runtime constant)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>place.places = value array of all
  places in an X10</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>place.factory.place(i) =<span
  style='mso-spacerun:yes'>  </span>place corresponding to index i</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>here = place in which current activity
  is executing</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>&lt;place-expr&gt;.toString() returns a
  string of the form “place(id=99)”</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>&lt;place-expr&gt;.id returns the id of
  the place</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0075.htm');">Locality rule</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Any access to a mutable (shared heap)
  datum must be</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>performed by an activity located at the
  place as the</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>datum.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Wingdings size=2>à</font><font face=Arial size=2>
  direct access via a remote heap reference is not permitted.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Wingdings size=2>à</font><font face=Arial size=2>Inter-place
  data accesses can only be performed by creating remote activities (with
  weaker ordering guarantees than intra-place data accesses)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Wingdings size=2>à</font><font face=Arial size=2>BadPlaceException</font><font
  face=Arial size=2> is thrown if the locality rule is violated.</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0076.htm');">async and future with
explicit place specifier</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>async (P) S</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Creates new activity to execute
  statement S at place P</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>async S is equivalent to async (here) S</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>future (P) { E }</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Create new activity to evaluate
  expression E at place P</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>future { E }<span
  style='mso-spacerun:yes'>  </span>is equivalent to future (here) { E }</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Note that here in a child activity for
  an async/future computation will refer to the place P at which the child
  activity is executing, not the place where the parent activity is executing</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Specify the destination place for
  async/future activities so as to obey the Locality rule e.g.,</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>async (O.location) O.x = 1;</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>future&lt;int&gt; F = future
  (A.distribution[i]) { A[i] } ;</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0077.htm');">Implicit syntax</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Use conventional syntax for operations
  on values of remote type:</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> </span>x.f
  = e //write x.f of type T</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>    
  </span></font><font face=Wingdings size=2>è</font><font face=Arial size=2> </font><font
  face=Arial size=2>final T v = e;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>          </span>finish async(x.loc) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>             </span>x.f=v;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>          </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>… = …x.f …//read x.f of type T</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>    
  </span></font><font face=Wingdings size=2>è</font><font face=Arial size=2> </font><font
  face=Arial size=2>future&lt;T&gt;(x.loc){x.f}.force()</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Similarly for array reads and writes.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Invoke a method synchronously on values
  of remote type</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>e.m(e1,…,en);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span></font><font face=Wingdings size=2>è</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face="Courier New" size=2><span
  style='mso-spacerun:yes'>     </span>final T<span style='mso-spacerun:yes'> 
  </span>v<span style='mso-spacerun:yes'>  </span>= e;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>    
  </span>final T1 v1 = e1;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>    
  </span>…</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>    
  </span>final Tn vn = en;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>finish async (v.loc) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>v.m(v1,…,vn);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Similarly for methods returning values.</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0078.htm');">Inter-place communication
using async and future</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Question: how to assign A[i] = B[j],
  when A[i] and B[j]</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>may be in different places?</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Answer #1: Use nested async:</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>finish async ( B.distribution[j] ) {</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>final int bb = B[j];</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>async ( A.distribution[i] ) A[i] = bb;</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Answer #2: Use future-force and an
  async:</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>final int b = future
  (B.distribution[j]) <br>
    <span style='mso-spacerun:yes'>      </span>{ B[j] }.force();</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>finish async ( A.distribution[i] ) A[i]
  = b;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0079.htm');">ateach (distributed
parallel iteration)</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>ateach (point p:D) S</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Creates |D| async statements in
  parallel at place specified by distribution.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Termination of all (recursively
  created) activities with finish.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>ateach is a convenient construct for
  writing parallel matrix code that is independent of the underlying
  distribution, e.g.,</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>SPMD computation:</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0080.htm');">Example: ateach
(TutAteach1)</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>public class TutAteach1 {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>public static void main(String args[]) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>finish ateach (point p: dist.factory.unique()) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>            </span>System.out.println(&quot;Hello
  from &quot; + here.id);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>} // main()</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>}</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0081.htm');">Distributions in X10</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>A distribution maps every point in a
  region to a place.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Creating distributions (x10.lang.dist):</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>dist D1 = dist.factory.constant(R,
  here); // local distribution – maps region R to here</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>dist D2 = dist.factory.block(R); //
  blocked distribution</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>dist D3 = dist.factory.cyclic(R); //
  cyclic distribution</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>dist D4 = dist.factory.unique(); //
  identity map on [0:MAX_PLACES-1]</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0082.htm');">Using distributions</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>D[P] = place to which point P is mapped
  by distribution D</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>if<span style='mso-spacerun:yes'> 
  </span>point p is in D.region</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>otherwise ArrayOutOfBoundException</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Allocate a distributed array e.g., T[.]
  A = new T[ D ];</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Allocates an array with index set =
  D.region, such that element A[P] is located at place D[P] for each point P in
  D.region</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>NOTE: “new T[R]” for region R is
  equivalent to “new T[R-&gt;here]”</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Iterating over a distribution –
  generalization of foreach to ateach</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0083.htm');">Operations on
distributions</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>D.region ::= source region of
  distribution</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>D.rank ::= rank of D.region</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>D | R ::= region restriction for
  distribution D and region R (returns a restricted distribution)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>D | P ::= place restriction for
  distribution D and place P (returns region mapped by D to place P)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>D1 || D2 ::= union of distributions D1
  and D2 (assumes that D1.region and D2.region are disjoint)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>D1.overlay(D2) ::= asymmetric union of
  D2 over D1</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>D.contains(p) ::= true iff D.region
  contains point p</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>D1 – D2 ::= distribution difference: D1
  | (D1.region – D2.region)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0084.htm');">Syntax extensions for
distributions</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Constant distributions</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>region r = [0:N];</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'> </span>dist d = r-&gt;here <br>
    <span style='mso-spacerun:yes'>   </span></font><font face=Wingdings
  size=2>à</font><font face="Courier New" size=2> dist d =
  dist.factory.constant(r, here);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>dist d = 1000-&gt;here</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>          </span></font><font face=Wingdings size=2>à</font><font
  face=Arial size=2><span style='mso-spacerun:yes'>  </span></font><font
  face=Arial size=2>dist d = dist.factory.constant([0,1000], here);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Distributions are implicitly converted
  to regions</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>for (point [i,j]: d) {...}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span></font><font face=Wingdings size=2>à</font><font face="Courier New"
  size=2> </font><font face=Arial size=2>for (point [i,j]: d.region) {...}</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0085.htm');">Multidimensional arrays</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>double[.] darr = new double[[0:N, 0:M]-&gt;here];</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>for (point [i,j]: darr.region)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>darr[i,j] = ..;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>initial values in darr are 0.0</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Iteration schema</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>‘lexicographical order’ (standard, fix)</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>[0,0], [0,1], [0,2], ...</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Storage layout</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>row major (fix)</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>spatial access locality with standard
  iteration schema</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0086.htm');">Distributed
multidimensional arrays</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>dist cyclic = dist.factory.cyclic([0:4,
  0:6])</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>dist blockcyclic = dist.factory.blockCyclic([0:4,
  0:6], 6)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>double[.] darr = new double[XXX];</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0087.htm');">Example: RandomAccess
(1/2)</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0088.htm');">Example: RandomAccess
(2/2)</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>(1)<span style='mso-spacerun:yes'> 
  </span>Allocate and initialize table as a block-distributed array.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>(2)<span style='mso-spacerun:yes'> 
  </span>Allocate and initialize RanStarts with one random number seed for each
  place.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>(3)<span style='mso-spacerun:yes'> 
  </span>Allocate a small immutable table that can be copied to all places.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>(4)<span style='mso-spacerun:yes'> 
  </span>Everywhere in parallel, repeatedly generate random table indices and
  atomically read/modify/write table element.</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0089.htm');">JGF Monte Carlo benchmark
-- Sequential</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0090.htm');">JGF Monte Carlo benchmark
-- Parallel</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0091.htm');">JGF Monte Carlo benchmark
-- Distributed</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0092.htm');">Tutorial outline</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>1) X10 in a nutshell</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>2) Sequential X10</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Type system</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Standard library</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>3) Concurrency in X10</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Activities</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Atomic blocks</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Clocks, clocked variables</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>4) X10 arrays</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Points</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Regions</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>5) Distributed X10</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Places</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Distributions</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Distributed arrays</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>6) Further examples</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0093.htm');">Cellular Automata
Simulation: Game of Life</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Acknowledgment:</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>“Barriers”, Chapter 5.5.4, Java
  Concurrency in</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Practice, Brian Goetz et al</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0094.htm');">Game of Life – Java
version (1 of 2)</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>java.util.concurrent version (Listing
  5.15, p102, JCiP)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>public class CellularAutomata {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>private final Board mainBoard;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>private final CyclicBarrier barrier;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>private final Worker[] workers;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>public CellularAutomata(Board board) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>this.mainBoard = board;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>int count = Runtime.getRuntime().availableProcessors();</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>this.barrier = new CyclicBarrier(count,</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>                         </span>new Runnable() { //
  barrier action</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>                           </span>public void run(){mainBoard.commitNewValues();}});</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>this.workers = new Worker[count];</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>for (int i = 0; i &lt; count; i++)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>workers[i] = new Worker(mainBoard.getSubBoard(count, i));</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>} // constructor</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>public void start() {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>for (int i = 0; i &lt; workers.length; i++) new
  Thread(workers[i]).start();</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>mainBoard.waitForConvergence();</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>} // start()</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>} // CellularAutomata</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0095.htm');">Game of Life – Java
version (2 of 2)</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>private class Worker implements Runnable {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>private final Board board;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>public Worker(Board board) { this.board = board; }</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>public void run() {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>while (!board.hasConverged()) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>for (int x = 0; x &lt; board.getMaxX(); x++)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>          </span>for (int y = 0; y &lt;
  board.getMaxY(); y++)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>            </span>board.setNewValue(x, y,
  computeValue(x, y));</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>try { barrier.await(); }</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>catch (InterruptedException ex) { return; }</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>catch (BrokenBarrierException ex) { return; }</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>} // while</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>} // run()</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>private int computeValue(int x, int y) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>// Compute the new value that goes in (x,y)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>. . .</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>} // Worker</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0096.htm');">Game of Life – X10
version</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>public class CellularAutomata {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>private final Cell[.] mainBoard1, mainBoard2;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>public CellularAutomata(Cell[.] board) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>mainBoard1 = board; mainBoard2 = null;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>} // constructor</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>public void start() {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>finish async {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>final clock barrier = clock.factory.clock();</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>ateach ( point[i] : dist.unique() ) clocked(barrier) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>boolean red = true;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>while ( !subBoardHasConverged(mainBoard1,mainBoard2,red) ) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>          </span>for ( point[x,y] : mainBoard1 |
  here )</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>            </span>if ( red ) mainBoard2[x,y] =
  computeValue(mainBoard1, x, y);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>            </span>else mainBoard1[x,y] =
  computeValue(mainBoard2, x, y);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>          </span>next;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>          </span>red = ! red;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>} // while</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>} // foreach</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>if (! red) mainBoard1 = mainBoard2; // answer is now in mainBoard1</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>} // finish async</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>// All boards have now converged</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>} // start()</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>} // CellularAutomata</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0097.htm');">Game of Life – X10
version</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>public class CellularAutomata {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>private final Cell[.] mainBoard1, mainBoard2;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>public CellularAutomata(Cell[.] board) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>mainBoard1 = board; mainBoard2 = null;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>} // constructor</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>public void start() {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>finish async {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>final clock barrier = clock.factory.clock();</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>ateach ( point[i] : dist.unique() ) clocked(barrier) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>boolean red = true;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>while ( !subBoardHasConverged(mainBoard1,mainBoard2,red) ) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>          </span>for ( point[x,y] : mainBoard1 |
  here )</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>            </span>if ( red ) mainBoard2[x,y] =
  computeValue(mainBoard1, x, y);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>            </span>else mainBoard1[x,y] =
  computeValue(mainBoard2, x, y);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>          </span>next;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>          </span>red = ! red;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>} // while</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>} // foreach</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>if (! red) mainBoard1 = mainBoard2; // answer is now in mainBoard1</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>} // finish async</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>// All boards have now converged</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>} // start()</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>} // CellularAutomata</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0098.htm');">Memoization</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0099.htm');">Memoization in Java</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0100.htm');">Memoization</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0101.htm');">Memoization (with
proposed generics)</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0102.htm');">Event Handling and
Concurrency:<br>
GUI Applications as an Exemplar</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Acknowledgment:</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>“GUI Applications”, Chapter 9, Java
  Concurrency in Practice, Brian Goetz et al</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0103.htm');">Scenario: Thread Hopping
in a GUI Application (Java)</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'> 
  </span>java.util.concurrent version (Listing 9.5, p196, JCiP)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'> </span>private void longRunningTaskWithFeedback() {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>button.addActionListener(new ActionListener() {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>    
  </span>public void actionPerformed(ActionEvent e) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>      
  </span>button.setEnabled(false); label.setText(&quot;busy&quot;); // 1) Dim
  button</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>      
  </span>exec.execute( // 2) Submit long-running task for execution</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>        
  </span>new Runnable() {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>           </span>public void run() {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>             </span>try {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>               </span>/* Do big computation */</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>             </span>} finally {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>		<span style='mso-spacerun:yes'>      
  </span>// 3) Submit task to run in GUI even thread executor</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>              
  </span>GuiExecutor.instance().execute(new Runnable() {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>                 </span>public void run() {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>                   </span>button.setEnabled(true);
  label.setText(&quot;idle&quot;);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>                 </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>               </span>});</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>             </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>           </span>} // run()</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>        
  </span>});</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>      
  </span>} // run()</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>    
  </span>});</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>}</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0104.htm');">Scenario: Thread Hopping
in a GUI Application (X10)</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'> </span>private void longRunningTaskWithFeedback() {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>button.setEnabled(false); label.setText(&quot;busy&quot;); // 1) Dim
  button</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>async (ExecPlace) {// 2) Create long-running task at ExecPlace</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>/* Do big computation */</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>// 3) When done, create task at GuiExecutorPlace</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>async (GuiExecutorPlace) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>button.setEnabled(true);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>label.setText(&quot;idle&quot;);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'> </span>}</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0105.htm');">Single-threaded vs.
Multi-threaded GUI frameworks</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Java approach -- Single-threaded GUI
  framework</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>GUI objects are kept consistent by
  thread confinement</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>Pro: Programmer does not have to worry
  about deadlock in GUI thread</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>Cons:</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>Cannot exploit parallelism to speed up
  GUI framework</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>Reasoning about data accesses across
  task boundaries can still be tricky due to nondeterminism of task scheduling</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>X10 approach – Single-place
  Multi-threaded GUI framework a</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>All GUI tasks are scheduled at
  GuiExecutorPlace -- GUI objects are accessed only by activities in
  GuiExecutorPlace</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>Pro: Can easily exploit parallelism
  within GuiExecutorPlace</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>Con: atomic blocks necessary to ensure
  mutual exclusion among tasks (but making atomicity explicit should also make
  the code more maintainable?)</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>See next slide on how to address
  overhead of atomic blocks in a Single-place Multi-threaded GUI framework</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0106.htm');">Performance Implications
(Discussion)</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Use of atomic blocks can introduce
  additional overhead in X10 implementation, compared to single-threaded Java
  version</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>For multi-core architectures, this
  additional overhead should be more than compensated for by performance
  improvements due to concurrency …</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>… but if there is a real need for
  improving the performance of GuiExecutorPlace for execution on a single
  thread …</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>Restrict GuiExecutorPlace to be a local
  nonblocking place</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>only local nonblocking activities are
  permitted to run at such a place</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>nonblocking </font><font
  face=Wingdings size=2>è</font><font face=Arial size=2> no static occurrence </font><font
  face=Arial size=2>of when, force(), next() permitted (but finish is
  permitted)</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>local </font><font face=Wingdings
  size=2>è</font><font face=Arial size=2> all data accessed is statically
  guaranteed to be </font><font face=Arial size=2>place-local</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>X10 runtime can use a single active
  worker thread for GuiExecutorPlace and guarantee absence of interleaving
  among tasks at GuiExecutorPlace</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>	</font><font face=Wingdings size=2>è</font><font
  face=Arial size=2> atomic-enter and atomic-exit can then be replaced by
  no-ops</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0107.htm');">Distributed Containers</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>DistributedHashMap</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Adaptation of ConcurrentHashMap</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>by Doug Lea for X10.</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0108.htm');">DistributedHashMap</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Keys</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>immutable objects (instances of value
  classes)</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>hashing of entries according to keys
  across places</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Values</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>references to mutable objects</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Design goals</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Distribution of Key-Value pairs</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Thread-safety</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Operations are linearizable</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Internal concurrency for optimization</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0109.htm');">DistributedHashMap -
design</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0110.htm');">DistributedHashMap - data
structures</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0111.htm');">DistributedHashMap -
operations</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Selected operations</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>boolean containsValue(final value key)</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>must not suffer from aba problem</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>optimization: internal concurrency
  across places</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>reader concurrency</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>nullable&lt;Object&gt; put(final value
  key,</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2><span
  style='mso-spacerun:yes'>                       </span>final Object value)</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>concurrent across places, sequential in
  each place</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>nullable&lt;Object&gt; get(final value
  key)</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>concurrent intra and inter-place read
  access</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>others that we do not discuss here</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0112.htm');">DistributedHashMap – aba
problem</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Linearizability requires that ABA
  problem cannot occur:</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>ABA problem: thread 2 must not observe
  r == false;<br>
    (could happen if k1, k2 target different segments and operations in both
  thread occur concurrently)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Problem can occur whenever Hashtable is
  traversed<br>
    (operations isEmpty, size, containsValue)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'> </span>Prevention of ABA complicates implementation
  significantly</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'> </span>Modification counters</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0113.htm');">DistributedHashMap – get</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>nullable&lt;Object&gt; get(final Object
  key) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>final int hash = hash(key); // throws NullPointerException if key null</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>final Segment segmentfor = segmentFor(hash);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>return segmentfor.get(key, hash);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>nullable&lt;Object&gt; get(final Object
  key, final int hash) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>atomic if (count==0) return</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>int hashIndex = indexFor(hash, index);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>nullable&lt;Entry&gt; first = table[hashIndex];</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>nullable&lt;Entry&gt; e = first;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>for (e = first; e !=null; e =e.next)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>if (e.hash == hash &amp;&amp; e.key == key) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>           </span>Object value = e.value;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>           </span>if (value !=null) return value;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>           </span>break;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>// Recheck under synch if key apparently not there or interference</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>Segment seg = segments[hash &amp; SEGMENT_MASK];</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>sem.p();</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>try{</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>Entry newFirst = table[index];</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>if (e != null || first != newFirst) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>for (e = newFirst; e != null; e = e.next) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>          </span>if (e.hash == hash &amp;&amp;
  eq(key, e.key))</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>            </span>return e.value;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>return null;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>   
  </span>} finally { sem.v();}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0114.htm');">DistributedHashMap – put</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>nullable&lt;Object&gt; put(final Object
  key, final Object value) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>int hash = hash(key);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>Segment segmentfor = segmentFor(hash);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>return segmentfor.put(key, hash, value);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>nullable&lt;Object&gt; put(final Object
  key, final int hash, final Object value) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>nullable&lt;Object&gt; oldval = null;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>sem.p();</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>try {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>    
  </span>nullable&lt;Entry&gt; first = table[indexFor(hash,index)];</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>    
  </span>nullable&lt;Entry&gt; e = first;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>    
  </span>while (e != null) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>if (e.hash == hash &amp;&amp; key == e.key)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>           </span>break;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>e = e.next;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>    
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>    
  </span>if (e != null) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>oldval = e.value;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>atomic { e.value = value; }</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>    
  </span>} else {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>modCount ++;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>table[index] = new Entry(key, hash, value, first);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>       
  </span>atomic { count ++; }</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>    
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>} finally { sem.v(); }</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>return oldval;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>}</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0115.htm');">DistributedHashMap –
containsValue (1/2)</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>boolean containsValue(final Object
  value) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>final int[.] mc = new int[segments.distribution];</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>final boolean[.] vals = new boolean[segments.distribution];</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>// try without locking</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>finish ateach (point p:segments) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>atomic {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>          </span>mc[p] = segments[p].modCount;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>          </span>vals[p] =
  segments[p].containsValue(value);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>if (vals.or())</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>return true;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>finish ateach (point p:segments) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>mc[p] -= segments[p].modCount;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>if (mc.sum() == 0)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>return false;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>// resort to locking all segments ....</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>for (point p:segments)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>      
  </span>finish async (segments.distribution[p]) { segments[p].sem.p(); }</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>finish ateach (point p:segments) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>vals[p] = segments[p].containsValue(value);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>segments[p].sem.v();</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>return vals.or();</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0116.htm');">DistributedHashMap –
containsValue (1/2)</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>boolean containsValue(final Object
  value) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>final int[.] mc = new int[segments.distribution];</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>final boolean[.] vals = new boolean[segments.distribution];</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>// try without locking</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>finish ateach (point p:segments) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>atomic {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>          </span>mc[p] = segments[p].modCount;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>          </span>vals[p] =
  segments[p].containsValue(value);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>if (vals.or())</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>return true;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>finish ateach (point p:segments) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>mc[p] -= segments[p].modCount;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>if (mc.sum() == 0)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>return false;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>// resort to locking all segments ....</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>for (point p:segments)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>      
  </span>finish async (segments.distribution[p]) { segments[p].sem.p(); }</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>finish ateach (point p:segments) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>vals[p] = segments[p].containsValue(value);</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>segments[p].sem.v();</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>return vals.or();</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0117.htm');">DistributedHashMap –
containsValue (2/2)</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>boolean containsValue(final Object
  value) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>atomic if (count == 0) return;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>for (point [p]: table) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>nullable&lt;Entry&gt; e = table[p];</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>while (e != null) {</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>        
  </span>if (e.value.equals(value))</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span
  style='mso-spacerun:yes'>            </span>return true;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>        
  </span>e = e.next;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>     
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>}</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style='mso-spacerun:yes'>  
  </span>return false;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>}</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0118.htm');">Examples of Array Kernels</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Jacobi</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Edminston</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>NAS CG</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0119.htm');">Jacobi 1d</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0120.htm');">Edmiston</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0121.htm');">Edmiston -
Parallelization</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0122.htm');">Edmiston</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0123.htm');">Slide 123</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0124.htm');">Slide 124</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0125.htm');">Slide 125</a></b></font></p>

</body>

</html>
