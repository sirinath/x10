/*
 *
 * (C) Copyright IBM Corporation 2006
 *
 *  This file is part of X10 Test.
 *
 */
import harness.x10Test;;

/**
 * Array bounds test - 1D.
 *
 * randomly generate 1D arrays and indices
 *
 * This version also generates random dists for the
 * arrays
 *
 * see if the array index out of bounds exception occurs
 * in the right  conditions
 */
public class DistBounds1D extends x10Test {

	public def run(): boolean = {
		final val COUNT: int = 200;
		final val L: int = 10;
		final val K: int = 3;
		for (var n: int = 0; n < COUNT; n++) {
			var i: int = ranInt(-L-K, L+K);
			var lb1: int = ranInt(-L, L);
			var ub1: int = ranInt(lb1-1, L); // include empty reg.
			var d: int = ranInt(0, dist2.N_DIST_TYPES-1);
			var withinBounds: boolean = arrayAccess(lb1, ub1, i, d);
			chk(iff(withinBounds,
						i >= lb1 && i <= ub1));
		}
		return true;
	}

	/**
	 * create a[lb1..ub1] then access a[i], return true iff
	 * no array bounds exception occurred
	 */
	private static def arrayAccess(var lb1: int, var ub1: int, val i: int, var distType: int): boolean = {

		//pr(lb1+" "+ub1+" "+i+" "+distType);

		final val a: Array[int] = new Array[int](dist2.getDist(distType, [lb1..ub1]));

		var withinBounds: boolean = true;
		try {
			chk(a.dist(i).id<x10.lang.place.MAX_PLACES &&
					a.dist(i).id >= 0);
			finish async(a.dist(i)) {
				a(i) = (int) 0xabcdef07L;
				chk(a(i) == (int) 0xabcdef07L);
			}
		} catch (var e: ArrayIndexOutOfBoundsException) {
			withinBounds = false;
		}

		//pr(lb1+" "+ub1+" "+i+" "+distType+" "+withinBounds);

		return withinBounds;
	}

	// utility methods after this point

	/**
	 * print a string
	 */
	private static def pr(var s: String): void = {
		System.out.println(s);
	}

	/**
	 * true iff (x if and only if y)
	 */
	private static def iff(var x: boolean, var y: boolean): boolean = {
		return x == y;
	}

	public static def main(var args: Rail[String]): void = {
		new DistBounds1D().execute();
	}

	/**
	 * utility for creating a dist from a
	 * a dist type int value
	 */
	static class dist2 {
		// Java has poor support for enum
		public const BLOCK: int = 0;
		public const CYCLIC: int = 1;
		public const CONSTANT: int = 2;
		public const RANDOM: int = 3;
		public const ARBITRARY: int = 4;
		public const N_DIST_TYPES: int = 5;

		/**
		 * Return a dist with region r, of type disttype
		 */
		public static def getDist(var distType: int, var r: region): dist = {
			switch(distType) {
				case BLOCK:case BLOCK: return distmakeBlock(r);
				case CYCLIC:case CYCLIC: return dist.factory.cyclic(r);
				case CONSTANT:case CONSTANT: return r->here;
				case RANDOM:case RANDOM: return dist.factory.random(r);
				case ARBITRARY:case ARBITRARY: return dist.factory.arbitrary(r);
				default:default: throw new Error("TODO");
			}
		}
	}
}
