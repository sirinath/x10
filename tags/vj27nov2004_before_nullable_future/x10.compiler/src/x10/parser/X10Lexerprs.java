

package x10.parser;

import com.ibm.lpg.*;
import java.io.*;

class X10Lexerprs implements ParseTable, X10Lexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,2,1,2,
            2,3,2,3,1,2,1,1,1,2,
            1,2,3,4,1,2,1,2,2,3,
            2,3,2,2,2,3,2,3,3,5,
            3,2,2,0,1,2,1,2,2,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,2,3,4,1,2,3,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,3,
            2,2,3,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,2,2,1,1,1,
            1,1,3,2,2,2,2,2,2,2,
            2,2,1,3,2
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {0,
            19,19,20,20,20,20,20,20,20,20,
            20,28,28,21,32,29,34,34,33,33,
            33,22,22,23,35,35,24,24,37,37,
            5,5,38,38,40,40,25,25,25,25,
            25,25,25,41,41,41,14,14,14,26,
            42,42,42,42,43,43,27,44,44,8,
            8,8,8,8,2,2,2,2,2,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,1,1,1,1,1,1,1,1,1,
            1,10,10,10,10,10,10,10,10,7,
            7,7,7,7,7,7,7,7,7,7,
            7,6,6,46,46,46,46,47,47,47,
            9,9,9,9,13,13,15,15,39,39,
            30,30,30,30,30,30,30,30,30,30,
            30,30,30,30,30,30,30,30,30,30,
            30,30,30,30,30,31,31,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,48,48,48,48,48,48,48,
            48,48,48,48,48,48,48,48,48,48,
            48,48,48,48,48,48,48,48,48,48,
            48,48,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,18,18,18,49,49,
            49,49,49,49,49,49,49,49,49,49,
            49,49,49,49,49,49,49,49,49,49,
            49,49,49,49,49,49,16,16,16,16,
            52,52,45,45,45,45,45,45,45,45,
            12,12,12,12,12,12,12,36,36,36,
            36,36,36,36,11,11,11,11,11,11,
            11,11,20,50,31,305,31,19,545,545,
            464,1048,31,17,890,1081,449,945,203,59,
            59,59,59,18,375,1,3,4,5,6,
            7,8,9,10,11,546,546,548,480,376,
            1036,31,547,547,1164,525,490,709,768,379,
            406,441,441,441,441,363,1,53,53,53,
            53,441,441,59,53,1163,59,1034,441,1059,
            31,1182,53,53,527,600,540,540,540,540,
            503,26,26,26,26,441,540,468,1085,32,
            995,26,26,102,51,51,51,51,26,454,
            521,51,1183,928,32,960,1161,803,558,51,
            51,540,43,35,558,347,30,514,401,697,
            21,20,20,20,540,828,560,771,36,1151,
            941,496,559,36,36,853,506,354,38,40,
            34,506,506,491,401,878,509,488,903,157,
            302,509,509,1157,157,157,1096,31,1096,31,
            978,533,42,535,1107,32,1118,32,1013,1184,
            529,353,1129,32,1140,32,991,1175,160,784,
            815,1185,303,380,400,401,612,710,993,1187,
            1189,1190,417,1191,1192,1193,1194,731,1200,1207,
            563,563
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,97,98,99,
            100,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,47,48,
            49,50,51,52,53,54,55,56,57,58,
            59,60,61,62,63,64,65,66,67,68,
            69,70,71,72,73,74,75,76,77,78,
            79,80,81,82,83,84,85,86,87,88,
            89,90,91,92,93,94,95,96,97,98,
            99,100,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,97,
            98,0,0,101,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,0,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,0,
            0,97,98,99,100,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,21,22,23,24,
            25,26,27,28,29,30,31,32,33,34,
            35,36,37,38,39,40,41,42,43,44,
            45,46,47,48,49,50,51,52,53,54,
            55,56,57,58,59,60,61,62,63,64,
            65,66,67,68,69,70,71,72,73,74,
            75,76,77,78,79,80,81,82,83,84,
            85,86,87,88,89,90,91,92,93,94,
            95,96,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,0,
            1,2,3,4,5,6,7,8,9,10,
            11,0,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,73,74,75,76,77,78,79,80,
            81,82,83,84,85,86,87,88,89,90,
            91,92,93,94,95,96,0,1,2,3,
            4,5,6,7,8,9,10,11,0,0,
            14,15,16,17,18,19,20,21,22,23,
            24,13,26,27,28,29,30,31,32,33,
            0,0,0,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,0,0,73,
            0,1,2,3,4,5,6,7,8,9,
            10,11,74,0,14,15,16,17,18,19,
            20,21,22,23,24,12,26,0,0,32,
            33,31,0,1,2,3,4,5,6,7,
            8,9,10,11,0,0,14,15,16,17,
            18,19,20,21,22,23,24,0,1,2,
            3,4,5,6,7,8,9,10,11,25,
            0,14,15,16,17,18,19,20,21,22,
            23,24,0,1,2,3,4,5,6,7,
            8,9,10,11,0,0,14,15,16,17,
            18,19,20,21,22,23,24,0,1,2,
            3,4,5,6,7,8,9,10,11,0,
            0,14,15,16,17,18,19,20,21,22,
            23,24,0,1,2,3,4,5,6,7,
            8,9,10,11,0,0,14,15,16,17,
            18,19,20,21,22,23,24,0,1,2,
            3,4,5,6,7,8,9,10,11,0,
            0,14,15,16,0,18,19,0,0,0,
            0,11,25,26,14,15,16,13,31,0,
            1,2,3,4,5,6,7,8,0,0,
            11,12,0,0,0,0,17,0,1,2,
            3,4,5,6,7,8,27,28,29,30,
            0,102,0,34,0,1,2,3,4,5,
            6,7,8,13,12,11,12,0,0,0,
            0,17,0,1,2,3,4,5,6,7,
            8,27,28,29,30,0,36,0,34,0,
            0,0,0,0,75,0,1,2,3,4,
            5,6,7,8,9,10,13,0,1,2,
            3,4,5,6,7,8,9,10,0,1,
            2,3,4,5,6,7,8,9,10,75,
            35,36,25,0,0,0,0,0,0,0,
            0,0,0,25,0,1,2,3,4,5,
            6,7,8,9,10,0,1,2,3,4,
            5,6,7,8,9,10,0,1,2,3,
            4,5,6,7,8,9,10,0,1,2,
            3,4,5,6,7,8,9,10,0,1,
            2,3,4,5,6,7,8,9,10,0,
            1,2,3,4,5,6,7,8,9,10,
            0,71,0,0,0,0,0,0,0,0,
            0,11,0,0,14,15,16,11,18,19,
            14,15,16,13,0,13,13,97,98,99,
            100,0,0,0,0,0,0,13,0,0,
            0,0,0,0,13,13,13,13,12,0,
            12,12,12,12,12,12,0,0,0,35,
            0,12,0,0,0,0,0,0,12,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,72,0,0,77,78,76,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            563,616,616,616,616,616,616,616,616,616,
            616,616,616,616,616,616,616,616,616,616,
            616,616,616,616,616,616,616,616,616,616,
            616,616,616,616,616,616,616,616,616,616,
            616,616,616,616,616,616,616,616,616,616,
            616,616,616,616,616,616,616,616,616,616,
            616,616,616,616,616,616,616,616,616,616,
            616,616,616,616,616,616,616,615,618,616,
            616,616,616,616,616,616,616,616,616,616,
            616,616,616,616,616,616,616,616,616,616,
            616,563,614,614,614,614,614,614,614,614,
            614,614,614,614,614,614,614,614,614,614,
            614,614,614,614,614,614,614,614,614,614,
            614,614,614,614,614,614,614,614,614,614,
            614,614,614,614,614,614,614,614,614,614,
            614,614,614,614,614,614,614,614,614,614,
            614,614,614,614,614,614,614,614,614,614,
            614,614,614,614,614,614,614,614,613,619,
            614,614,614,614,614,614,614,614,614,614,
            614,614,614,614,614,614,614,614,614,614,
            614,614,57,622,622,622,622,622,622,622,
            622,622,622,622,622,622,622,622,622,622,
            622,622,622,622,622,622,622,622,622,622,
            622,622,622,622,622,622,622,622,622,622,
            622,622,622,622,622,622,622,622,622,622,
            622,622,622,622,622,622,622,622,622,622,
            622,622,622,622,622,622,622,622,622,622,
            622,622,622,622,622,622,622,622,622,622,
            622,622,622,622,622,622,622,622,622,622,
            622,622,622,622,622,622,622,622,622,622,
            622,54,17,622,2,409,544,544,544,544,
            544,544,544,544,544,545,436,463,545,545,
            545,545,545,545,545,545,545,545,545,372,
            545,545,545,545,545,545,545,545,411,538,
            537,545,545,545,545,545,545,545,545,545,
            545,545,545,545,545,545,545,545,545,545,
            545,545,545,545,545,545,545,545,545,545,
            545,545,545,545,545,543,426,545,408,31,
            405,467,530,428,378,758,746,432,742,743,
            755,756,753,754,757,741,750,738,739,19,
            10,543,543,543,543,563,441,441,441,441,
            441,441,441,441,441,441,441,441,441,441,
            441,441,441,441,441,441,441,441,441,441,
            441,441,441,441,441,441,441,441,441,586,
            441,441,441,441,441,441,441,441,441,441,
            441,441,441,441,441,441,441,441,441,441,
            441,441,441,441,441,441,441,441,441,441,
            441,441,441,441,441,441,441,441,441,441,
            466,441,441,441,441,441,441,441,441,441,
            441,441,441,441,441,441,441,441,441,441,
            441,441,563,589,589,589,589,589,589,589,
            589,589,589,589,589,589,589,589,589,589,
            589,589,589,589,589,589,589,589,589,589,
            589,589,589,589,589,589,585,589,589,589,
            589,589,589,589,589,589,589,589,589,589,
            589,589,589,589,589,589,589,589,589,589,
            589,589,589,589,589,589,589,589,589,589,
            589,589,589,589,589,589,589,466,589,589,
            589,589,589,589,589,589,589,589,589,589,
            589,589,589,589,589,589,589,589,589,563,
            540,540,540,540,540,540,540,540,540,540,
            540,6,540,540,540,540,540,540,540,540,
            540,540,540,540,540,540,540,540,540,540,
            540,540,540,540,540,540,540,540,540,540,
            540,540,540,540,540,540,540,540,540,540,
            540,540,540,540,540,540,540,540,540,540,
            540,540,540,540,540,540,540,540,540,540,
            540,540,540,540,451,540,540,540,540,540,
            540,540,540,540,540,540,540,540,540,540,
            540,540,540,540,540,540,15,584,584,584,
            584,584,584,584,584,584,584,583,185,3,
            583,583,583,583,583,583,583,583,583,583,
            583,769,583,583,583,583,583,583,583,583,
            35,563,563,583,583,583,583,583,583,583,
            583,583,583,583,583,583,583,583,583,583,
            583,583,583,583,583,583,583,583,583,583,
            583,583,583,583,583,583,583,31,563,583,
            33,599,599,599,599,599,599,599,599,599,
            599,599,775,563,599,599,599,599,599,599,
            599,599,599,599,599,587,597,563,563,468,
            468,597,563,558,558,558,558,558,558,558,
            558,558,558,558,365,563,558,558,558,558,
            558,558,558,558,558,558,558,563,560,560,
            560,560,560,560,560,560,560,560,559,776,
            563,559,559,559,559,559,559,559,559,559,
            559,559,154,506,506,506,506,506,506,506,
            506,506,506,506,563,563,506,506,506,506,
            506,506,506,506,506,506,506,155,509,509,
            509,509,509,509,509,509,509,509,509,563,
            563,509,509,509,509,509,509,509,509,509,
            509,509,156,720,720,720,720,720,720,720,
            720,720,720,720,563,563,720,720,720,720,
            720,720,720,720,720,720,720,29,595,595,
            595,595,595,595,595,595,595,595,606,563,
            39,606,606,606,189,401,401,563,563,563,
            563,603,430,593,603,603,603,763,593,563,
            910,910,910,910,910,910,910,910,563,563,
            921,924,563,563,563,563,918,158,529,529,
            529,529,529,529,529,529,920,922,919,909,
            172,562,132,923,563,549,550,551,552,554,
            555,556,557,766,158,921,924,563,563,563,
            563,918,159,723,723,723,723,723,723,723,
            723,920,922,919,486,563,760,563,923,563,
            563,563,563,182,925,563,544,544,544,544,
            544,544,544,544,544,544,772,188,544,544,
            544,544,544,544,544,544,544,544,45,544,
            544,544,544,544,544,544,544,544,544,925,
            519,517,541,563,563,563,563,563,563,563,
            16,563,563,927,44,595,595,595,595,595,
            595,595,595,595,595,563,544,544,544,544,
            544,544,544,544,544,544,47,595,595,595,
            595,595,595,595,595,595,595,46,595,595,
            595,595,595,595,595,595,595,595,49,595,
            595,595,595,595,595,595,595,595,595,48,
            595,595,595,595,595,595,595,595,595,595,
            37,581,563,563,563,563,41,563,563,563,
            174,601,184,186,601,601,601,605,401,401,
            605,605,605,768,171,770,762,581,581,581,
            581,181,177,173,201,563,133,765,134,135,
            136,137,138,139,771,761,767,773,158,153,
            158,158,158,158,158,158,152,563,563,759,
            563,154,563,563,563,563,563,563,154,563,
            563,563,563,563,563,563,563,563,563,563,
            563,563,563,563,774,563,563,621,511,542
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 67,
           NT_OFFSET         = 102,
           LA_STATE_OFFSET   = 928,
           MAX_LA            = 1,
           NUM_RULES         = 365,
           NUM_NONTERMINALS  = 52,
           NUM_SYMBOLS       = 154,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 366,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 102,
           EOLT_SYMBOL       = 103,
           ACCEPT_ACTION     = 562,
           ERROR_ACTION      = 563;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
