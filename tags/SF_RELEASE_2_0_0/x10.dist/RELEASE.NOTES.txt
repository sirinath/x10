Release 2.0.0

This release includes both the C++ and Java code generation backends.

There are several major language changes from X10 1.7 to 2.0. 
 - We have added structs to the language.  Structs provide a
   mechanism for defining headerless inlined aggregates.
   For an example of a struct, see x10.lang.Complex.
 - We have added the ability to declare val instance fields
   and instance methods of a class to be global. This means
   that the fields/methods can be accessed/invoked at any place.
 - We have eliminated Values from the language.  
   The combination of structs and global fields/methods cover all
   of the use cases for Values.
 - We have added static place type checking.
 - We have added unsigned integral types.
For more details on these and other minor language changes, please
see the language manual or the X10 2.0 tutorial found on x10-lang.org.

The following features described in the 2.0 language manual do not
currently work with the Java backend and will be fixed in the subsequent
releases:

- Non-static type definitions as class or interface members
  (static type defs do work)
- Type definitions as package members (i.e., in the outermost scope of
  a compilation unit)
- AST externalization to XML
- Shared local variables
- Extern methods

Additionally, the following features described in the 2.0 language
manual do not currently work with the C++ backend and will be fixed in
the subsequent releases:

- Garbage collection on Cygwin and AIX
- Generic virtual methods
- Exception stack traces on Cygwin and AIX

The generated C++ code requires g++ 4.2 or better to be compiled; 
we do almost all of our testing against g++ 4.3.2.  On AIX, you
may either use g++ 4.2 or better or xlC 10.01.0000.0004 or better.
On Cygwin, g++ 4.3.2 will currently produce corrupted executables
for X10 programs -- x10c++ will use g++-3 as the default
post-compiler, so you need to install the gcc-g++ package.

Below is a summary of JIRA issues addressed for the X10 2.0 release.

Release Notes - X10 - Version X10 2.0.0 

** New Feature
    * [XTENLANG-69] - Implementation of x10.constraints for C++ backend
    * [XTENLANG-144] - Define semantics of static state
    * [XTENLANG-363] - Replace properties with final fields
    * [XTENLANG-449] - Implement Complex value class
    * [XTENLANG-514] - File.NativeFile is not implemented for C++ backend
    * [XTENLANG-515] - X10 2.0 Distributed Object Model
    * [XTENLANG-532] - Language/typechecking changes to prevent access to uninitialized fields during object construction

** Improvement
    * [XTENLANG-364] - Remove type parameters on closures
    * [XTENLANG-411] - x10c++ post-processing -- enable lapi transport on linux
    * [XTENLANG-441] - Factor postcompilation framework into separate class(es)
    * [XTENLANG-443] - Implement all standard functions in x10.lang.Math
    * [XTENLANG-469] - Reduce overhead of finish
    * [XTENLANG-475] - String.split() similar to Java String.split()
    * [XTENLANG-502] - indexOf(String) not currently implemented in String API
    * [XTENLANG-511] - Native support for PlaceLocal storage
    * [XTENLANG-548] - The signature of the main method should constrain the args array to be place-local to place 0
    * [XTENLANG-565] - Better place type inference for async (x) x.bar() in global method
    * [XTENLANG-566] - Promote method isX10Array() on X10TypeSystem_c to X10TypeSystem interface
    * [XTENLANG-578] - autodefinition of typeName on Structs

** Bug
    * [XTENLANG-4] - "attempting to use incompatible return type" when overriding methods with constraints involving parameters
    * [XTENLANG-109] - method can't return types with constraints involving method parameter values
    * [XTENLANG-132] - ClassCastException not being thrown when attempting to convert from A(0) to A(1)
    * [XTENLANG-199] - Unpredictable static initialization order (was: System.out sometimes null)
    * [XTENLANG-296] - += and ++ do not type check for user-defined operand types
    * [XTENLANG-316] - C++ RTT implementation does not support covariant type params e.g. C[T+]
    * [XTENLANG-324] - Static methods are still subject to inheritance rules
    * [XTENLANG-325] - Static overrides are not allowed covariant return types
    * [XTENLANG-335] - Codegen error assigning primitives to x10.lang.Value
    * [XTENLANG-337] - a.equals(b) results in StackOverflowError
    * [XTENLANG-338] - Run-time types do not include constraints
    * [XTENLANG-372] -  Static intialization of Distribution throws NPE with x10c++ 
    * [XTENLANG-384] - Generic interface code fails to compile with a bizarre error
    * [XTENLANG-386] - Marshal.FLOAT Nested class alert?!
    * [XTENLANG-423] - static initialisers appear not to call parents
    * [XTENLANG-454] - Package names are not mangled when translating to C++
    * [XTENLANG-455] - Incorrect method resolution when overloading an inherited generic instance method with a non-generic method
    * [XTENLANG-456] - Compilation errors when class name clashes with a class in a library namespace
    * [XTENLANG-457] - Performance problems due to changes to the Throwable implementation
    * [XTENLANG-458] - Extending a generic class with a non-trivial parameter causes a compilation error
    * [XTENLANG-459] - Using Console.OUT in places other than place 0 throws NullPointerException
    * [XTENLANG-462] - Calls to parenthesized closure literals are not inlined
    * [XTENLANG-463] - Missing include directives for non-inlined closure literals
    * [XTENLANG-464] - Overriding _type() and calling className() causes post-compilation errors.
    * [XTENLANG-465] - Typechecker not enforcing requirement that collection in enhanced for loop must implement Iterable
    * [XTENLANG-466] - Type constraints not implemented by frontend type system?
    * [XTENLANG-468] - Apparently straight forward HashMap usage 'hangs' x10 code
    * [XTENLANG-472] - do { ... } while(true) does not typecheck
    * [XTENLANG-473] - Invalid code generated for unboxing Box[T] in the Java backend (where T is a generic type parameter)
    * [XTENLANG-477] - Double.parseDouble() always returns 0 with C++ backend
    * [XTENLANG-478] - Cannot return an instance of a generic local class from a generic method
    * [XTENLANG-483] - Console.OUT corrupted at place>0
    * [XTENLANG-486] - init error with native statics
    * [XTENLANG-488] - isWhitespace() method creates compile error in C++ backend
    * [XTENLANG-503] - x10.io.FileReader.close() and x10.io.FileWriter.close() are unimplemented in the C++ backend.
    * [XTENLANG-545] - Segmentation fault on remote reference comparison
    * [XTENLANG-553] - Method lookup fails for static methods on structs
    * [XTENLANG-555] - Must generate code to check constraints on instanceof/checkcast
    * [XTENLANG-556] - IllegalMonitorStateException during static initialization
    * [XTENLANG-561] - Overly aggressize elimination of placechecks in C++ backend
    * [XTENLANG-563] - Static placechecking logic incorrect in gloabl instance methods
    * [XTENLANG-568] - Post-compiler warnings reported as errors.
    * [XTENLANG-575] - C++ codegen: generation function calls in a constant expression (case statements of a switch)
    * [XTENLANG-576] - Problem finding the | operator when restricting a Distribution to a Place
    * [XTENLANG-577] - Modify parser so that value isn't a valid key word
    * [XTENLANG-580] - x10c: Compiler Generated: Methods of a class with NativeRep annotation must be annotated Native.
    * [XTENLANG-581] - Points/PointArithmetic1 failure due to faulty resolution of overloaded operator

** Task
    * [XTENLANG-81] - Update X10 tutorial material for 1.7 version of the language specification
    * [XTENLANG-342] - Consider making c++ and java backend projects have parallel structure
    * [XTENLANG-395] - svn cleanup & reorganization
    * [XTENLANG-401] - C++ backend code size examination
    * [XTENLANG-425] - Change build procedure for C++ XRX so that X10 files are not post-compiled by x10c++ 
    * [XTENLANG-426] - Reduce number of hand-written C++ files in x10.runtime
    * [XTENLANG-427] - Reduce use of @NativeRep for C++ runtime
    * [XTENLANG-429] - Remove usage of X10 1.7 Value types from XRX
    * [XTENLANG-430] - Update language manual for 2.0 serialization semantics
    * [XTENLANG-432] - Generate explicit NPE and BPE checks instead of having them be implicit in ref operators
    * [XTENLANG-433] - Carefully inspect handwritten code in C++ runtime and insert explicit NPE and BPE exceptions where necessary
    * [XTENLANG-434] - Remove BPE and NPE checks from ref operators
    * [XTENLANG-435] - Implement X10 interface invocation directly instead of using C++ virtual inheritance
    * [XTENLANG-436] - Implement X10 2.0 Structs
    * [XTENLANG-440] - Language specification for X10 2.0
    * [XTENLANG-442] - Change tests ending in _MustFailRun to catch the appropriate exception and succeed instead.
    * [XTENLANG-527] - X10 2.0 static initialization semantics
    * [XTENLANG-552] - Document minimal required levels of xlC/g++ on various platforms
    * [XTENLANG-554] - Compiler is assuming that unconstrained generic type is an Object

** Sub-task
    * [XTENLANG-421] - Code space of deserialization code
    * [XTENLANG-422] - Code space of struct equals
    * [XTENLANG-428] - Implement X10 2.0 Object Model for C++ codegen/runtime
    * [XTENLANG-437] - Update language manual for 2.0 Structs
    * [XTENLANG-516] - Parse rooted annotation on fields/methods
    * [XTENLANG-518] - C++ backend: Only generate place checks on access to rooted field & invocations of rooted methods
    * [XTENLANG-519] - Update existing test cases for X10 2.0 object model 
    * [XTENLANG-521] - Parser changes for X10 2.0 Structs
    * [XTENLANG-522] - Typechecking for X10 2.0 Structs
    * [XTENLANG-523] - C++ codegen for X10 2.0 Structs
    * [XTENLANG-525] - Update exisiting test cases that use X10 1.7 values to use X10 2.0 structs
    * [XTENLANG-526] - New test cases for X10 2.0 Structs
    * [XTENLANG-528] - Update Language manual for 2.0 static initialization semantics
    * [XTENLANG-530] - Implement static initialization semantics in C++ codegen/runtime
    * [XTENLANG-539] - Front-end support for struct constructors
    * [XTENLANG-541] - Front-end support for structs implementing interfaces
    * [XTENLANG-544] - assignment of a substruct value to a variable of type superstruct fails to typecheck

For the details of JIRA issues fixed in this release, see
http://jira.codehaus.org/browse/XTENLANG/fixforversion/15404

Please use the X10 JIRA to report bugs, after ensuring the problem is
not already reported:
http://jira.codehaus.org/secure/IssueNavigator.jspa?reset=true&&pid=11812&resolution=-1

