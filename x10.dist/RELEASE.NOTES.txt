X10 Release 2.5.3

HIGHLIGHTS OF THIS RELEASE
  We have switched to using an ANTLR generated parser in the X10
  compiler.  This change significantly improved compiler support
  for X10DT features. The X10 Editor is now much more resilient to 
  syntax errors: features such as outline, hyperlink, hover help, 
  and content-assist continue to work in the face of compilation errors.
  For the content-assist feature to work, the user must first enter a 
  semicolon (';') at the end of the statement to be completed.

  Managed X10 now supports compression on the network communication links.
  To enable it, set the system property "X10RT_COMPRESSION" to "snappy" 
  when you launch your program.

MINOR LANGUAGE CHANGE
  To improve the quality of compiler diagnostics for syntax errors
  and the usability of the X10DT editor, two backwards incompatible 
  syntax changes are being made in X10 2.5.3: 
    (1) There is no implicit return in method definitions
    (2) The body of a method or constructor cannot be a block
        introduced by an "="
  Therefore, the following method definition is now incorrect:
     def f (x: long) = {
       x + 1
     }
   It now should be rewritten to either:
     def f (x: long) {
       return x + 1;
     }
   or:
     def f (x: long) = x + 1;
  A tool converting programs to the new syntax is available:
    http://x10.sourceforge.net/misc/x10-2.5.3-converter/

LIMITATIONS OF THIS RELEASE

The size and index of arrays must be less than 2^31 with Managed X10.
An attempt to allocate a longer array causes IllegalArgumentException. 

The following features described in the 2.5 language manual do not
currently work and may be fixed in the subsequent releases:
  - Non-static type definitions as class or interface members
    (static type defs do work)

The constraint solver used by X10 typechecker is known to be incomplete 
for situations in which a constraint implies an infinite number of 
distinct constraints.

Additionally, the following features described in the language
manual do not currently work with Native X10.
  - Non-final generic instance methods
  - Exception stack traces on Cygwin

The generated C++ code requires g++ 4.2 or better to be compiled; 
we do almost all of our testing against g++ 4.4.
  + On Power/Linux and BG/Q, you may either use g++ 4.2 or better
    or xlC 11.1 or better. 

SUMMARY OF ISSUES RESOLVED IN THIS RELEASE

Below is a summary of JIRA issues addressed for the X10 2.5.3

Release Notes - X10 - Version X10 2.5.3

** New Feature
    * [XTENLANG-3382] - Switch MacOS build of X10DT to 64bit

** Bug
    * [XTENLANG-3495] - Stack overflow compiling LULESH with x10c -O
    * [XTENLANG-3496] - Remote reference counting causes DeadPlaceException
    * [XTENLANG-3503] - Native backend generates invalid C++ code or calls wrong method for function interfaces
    * [XTENLANG-3507] - Team.WORLD.split causes an error when using openMPI

For the details of JIRA issues fixed in this release, see
  https://xtenlang.atlassian.net/jira/secure/ReleaseNote.jspa?projectId=10005&version=10160

Please use the X10 JIRA to report bugs, after ensuring the problem is
not already reported:
  https://xtenlang.atlassian.net/projects/XTENLANG/issues
