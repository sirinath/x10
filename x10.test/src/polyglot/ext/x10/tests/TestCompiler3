    // *************** you should never have to edit anything
    // below this line **************************************
    
    public static void main(String[] args) {
        junit.textui.TestRunner.run(TestCompiler.class);
    }

    public static TestSuite suite() {
        return new TestSuite(TestCompiler.class);
    }
    
    /**
     * Constructor for TestX10PrettyPrinterVisitor.
     * @param name
     */
    public TestCompiler(String name) {
        super(name);
    }  

    private final Activity a
        = new Activity() { public void run() {} }; // dummy
  
    /**
     * Junit may use additional threads to run the testcases
     * (other than the main one used to initialize the
     * Runtime class).  Hence we need a litte hack to register
     * the thread used to run the testcase as a 'local' thread
     * with the Runtime.
     */
    public void setUp() {
        DefaultRuntime_c r = (DefaultRuntime_c) Runtime.runtime;
        Place[] pls = Place.places();
        Thread t = Thread.currentThread();
        r.registerThread(t, pls[0]);
        r.registerActivityStart(t, a, null);
    }


    private void compile(String file) {
        String[] poargs 
            = new String[] { "-ext", "x10", file };
        polyglot.main.Main.main(poargs); // run compiler!
    }

    private void run(String file, String main) {
        compile(file);
        try {
            ClassLoader loader 
                = new URLClassLoader(new URL[] { new URL("file://" + System.getProperty("user.dir") + "/") }); 
            Class c
                = loader.loadClass(main);
            Object inst
                = c.newInstance();
            Method m
                = c.getMethod("run", new Class[0]);
            Boolean ret = (Boolean) m.invoke(inst, null);
            assertTrue(ret.booleanValue());
        } catch (IOException io) {
            fail(io.toString());
        } catch (InstantiationException ie) {
            fail(ie.toString());
        } catch (NoSuchMethodException nmse) {
            fail(nmse.toString());
        } catch (InvocationTargetException ite) {
            fail(ite.getCause().getMessage());
        } catch (ClassNotFoundException cnfe) {
            fail(cnfe.toString());
        } catch (IllegalArgumentException iae) {
            fail(iae.toString());
        } catch (ClassFormatError cfe) {
            fail(cfe.toString());
        } catch (IllegalAccessException iae) {
            fail(iae.toString());
        }
    }
    
    private void runMain(String file, String main) {
    runMain(file, main, null);
    }

    private void runMain(String file,
                         String main,
                         String[] args) {
        compile(file);
    try {
        ClassLoader loader 
        = new URLClassLoader(new URL[] { new URL("file://" + System.getProperty("user.dir") + "/") }); 
        Class c
        = loader.loadClass(main);
        Method m
            = c.getMethod("main", new Class[] { String[].class });
        m.invoke(null, new Object[] {args});        
    } catch (IOException io) {
        fail(io.toString());
    } catch (NoSuchMethodException nmse) {
        fail(nmse.toString());
    } catch (InvocationTargetException ite) {
        fail(ite.toString());
    } catch (ClassNotFoundException cnfe) {
        fail(cnfe.toString());
    } catch (IllegalArgumentException iae) {
        fail(iae.toString());
    } catch (ClassFormatError cfe) {
        fail(cfe.toString());
    } catch (IllegalAccessException iae) {
        fail(iae.toString());
    }
    }

}

