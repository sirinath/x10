

                    X10Lib : The X10 Runtime System

                              Version 0.1


                APPLICATION PROGRAMMING INTERFACE (API)
                ---------------------------------------

                  (c) Copyright IBM Corporation 2007



This is the initial API for the X10 Runtime System.

!!!WARNING!!! May be revised as the development progresses.




/// MESSAGING LAYER ///


01) Initialization & Termination
--------------------------------


Init
----

Purpose: Initializes the X10 Runtime System.

Library: libx10.a

C++ syntax:

#include <x10/x10lib.h>
int x10lib::Init(handlers, n)
	x10_async_handler_t *handlers;
	int n;

C syntax:

#include <x10/x10lib.h>
int x10_init(handlers, n)
	x10_async_handler_t *handlers;
	int n;

Parameters:

	INPUT
	handlers	Specifies a set of handlers that needs to be registered for
				remote async execution.
	n			The number of handlers that need to be registered.

Description:

	Initializes data structures needed for communication as well as registers
	handler addresses into an internal handler table, if handlers argument is
	not NULL and n is > 0.
	This method/function must be called before placing any other X10Lib calls.

Return values:

	X10_OK		Indicates the method/function call completed successfully.
	X10_ERR_LAPI	Unable to create the LAPI context for communication.


Finalize
--------

Purpose: Finalizes the X10 Runtime System.

Library: libx10.a

C++ syntax:

#include <x10/x10lib.h>
int x10lib::Finalize()

C syntax:

#include <x10/x10lib.h>
int x10_finalize()

Description:

	This method/function must be called after using X10Lib calls.
	It is an error when any X10Lib calls are made after this routine is called.
	Internally, it terminates and cleans up the LAPI context used for communication.

Return values:
	X10_OK		Indicates the method/function call completed successfully.
	X10_ERR_LAPI	Unable to destroy the underlying LAPI context.


02) Remote Copy Interface for Contiguous Data
---------------------------------------------

Get
---

Purpose: Blocking transfer of data from a remote node to the local node.

Library: libx10.a

C++ syntax:

#include <x10/x10lib.h>
int x10lib::Get(src, dest, n)
	x10_gas_ref_t src;
	void *dest;
	int n;

C syntax:

#include <x10/x10lib.h>
int x10_get(src, dest, n)
	x10_gas_ref_t src;
	void *dest;
	int n;
Parameters:

	INPUT
	src		Specifies the source address on a remote node.
	dest	Specifies the target buffer address on the local node.
			If n is 0, the value of this parameter can be NULL.
	n		Specifies the number of bytes of data to be fetched.

Description:

	Fetches n contiguous bytes from src address on a remote node
	to the dest address on the local node.
	This method is internally implemented by an RDMA if possible.
	The call progresses independently of any other calls made to the X10Lib by
	other threads in the source process.
	The bytes will be available in dest upon successful return from this call.

Return values:

	X10_OK		Indicates the method/function call completed successfully.
	X10_ERR_LAPI	Error from the underlying communication system.


NbGet
-----

Purpose: Non-blocing transfer of data from a remote node to the local node.

Library: libx10.a

C++ syntax:

#include <x10/x10lib.h>
int x10lib::NbGet(src, dest, n, hndl)
	x10_gas_ref_t src;
	void *dest;
	int n;
	x10_switch_t hndl;

C syntax:

#include <x10/x10lib.h>
int x10_get_nb(src, dest, n, hndl)
	x10_gas_ref_t src;
	void *dest;
	int n;
	x10_switch_t hndl;

Parameters:

	INPUT
	src		Specifies the source address on a remote node.
	dest	Specifies the target buffer address on the local node.
			If n is 0, the value of this parameter can be NULL.
	n		Specifies the number of bytes of data to be fetched.

	INPUT/OUTPUT
	hndl	Descriptor associated with a particular non-blocking transfer.

Description:

	Non-blocing fetch of n contiguous bytes from src address on a remote node
	to the dest address on the local node.
	This method is internally implemented by an RDMA if possible.
	The call progresses independently of any other calls made to the X10Lib by
	other threads in the source process.
	As this is a non-blocking call, the caller cannot assume that data transfer
	has completed upon return from the call.  Instead, the bytes will only be
	available after a consecutive Wait call returns successfully.

Return values:

	X10_OK		Indicates the method/function call completed successfully.
	X10_ERR_LAPI	Error from the underlying communication system.


Put
---

Purpose: Blocking transfer of data from the local node to a remote node.

Library: libx10.a

C++ syntax:

#include <x10/x10lib.h>
int x10lib::Put(src, dest, n)
	void *src;
	x10_gas_ref_t dest;
	int n;

C syntax:

#include <x10/x10lib.h>
int x10_put(src, dest, n)
	void *src;
	x10_gas_ref_t dest;
	int n;

Parameters:

	INPUT
	src		Specifies the source address on the local node.
			If n is 0, the value of this parameter can be NULL.
	dest	Specifies the target buffer address on a remote node.
	n		Specifies the number of bytes of data to be transferred.

Description:

	Writes n contiguous bytes from src address on the local node
	to the dest address on a remote node.
	This method is internally implemented by an RDMA if possible.
	The call progresses independently of any other calls made to the X10Lib by
	other threads in the dest process.
	The bytes will be available in dest upon successful return from this call.

Return values:

	X10_OK		Indicates the method/function call completed successfully.
	X10_ERR_LAPI	Error from the underlying communication system.


NbPut
-----

Purpose: Non-blocing transfer of data from the local node to a remote node.

Library: libx10.a

C++ syntax:

#include <x10/x10lib.h>
int x10lib::NbPut(src, dest, n, hndl)
	void *src;
	x10_gas_ref_t dest;
	int n;
	x10_switch_t hndl;

C syntax:

#include <x10/x10lib.h>
int x10_put_nb(src, dest, n, hndl)
	void *src;
	x10_gas_ref_t dest;
	int n;
	x10_switch_t hndl;

Parameters:

	INPUT
	src		Specifies the source address on the local node.
			If n is 0, the value of this parameter can be NULL.
	dest	Specifies the target buffer address on a remote node.
	n		Specifies the number of bytes of data to be transferred.

	INPUT/OUTPUT
	hndl	Descriptor associated with a particular non-blocking transfer.

Description:

	Non-blocing write of n contiguous bytes from src address on the local node
	to the dest address on a remote node.
	This method is internally implemented by an RDMA if possible.
	The call progresses independently of any other calls made to the X10Lib by
	other threads in the dest process.
	As this is a non-blocking call, the caller cannot assume that data transfer
	has completed upon return from the call.  Instead, the bytes will only be
	available after a consecutive Wait call returns successfully.

Return values:

	X10_OK		Indicates the method/function call completed successfully.
	X10_ERR_LAPI	Error from the underlying communication system.


03) Remote Copy Interface for Vector Data
-----------------------------------------


GetV
----

Purpose: Blocking transfer of vector data from a remote node to the local node.

Library: libx10.a

C++ syntax:

#include <x10/x10lib.h>
int x10lib::GetV(dsrc, len)
	x10_giov_ref_t *dsrc;
	int len;

C syntax:

#include <x10/x10lib.h>
int x10_get_v(dsrc, len)
	x10_giov_ref_t *dsrc;
	int len;

Parameters:

	INPUT
	dsrc	Specifies the array of data to get from the remote node.
	len		Specifies the number of entries in the above array.

Description:

	This is a generalized I/O vector blocking operation that transfers
	data from the source address on a remote node to the dest address
	on the local node.
	This method is internally implemented by an RDMA if possible.
	The call progresses independently of any other calls made to the X10Lib by
	other threads in the source process.
	The bytes will be available in dest upon successful return from this call.

Return values:

	X10_OK		Indicates the method/function call completed successfully.
	X10_ERR_LAPI	Error from the underlying communication system.


NbGetV
------

Purpose: Non-blocing transfer of vector data from a remote node to the local node.

Library: libx10.a

C++ syntax:

#include <x10/x10lib.h>
int x10lib::NbGetV(dsrc, len, hndl)
	x10_giov_ref_t *dsrc;
	int len;
	x10_switch_t hndl;

C syntax:

#include <x10/x10lib.h>
int x10_get_v_nb(dsrc, len, hndl)
	x10_giov_ref_t *dsrc;
	int len;
	x10_switch_t hndl;

Parameters:

	INPUT
	dsrc	Specifies the array of data to get from the remote node.
	len		Specifies the number of entries in the above array.

	INPUT/OUTPUT
	hndl	Descriptor associated with a particular non-blocking transfer.

Description:

	This is a generalized I/O vector non-blocking operation that transfers
	data from the source address on a remote node to the dest address
	on the local node.
	This method is internally implemented by an RDMA if possible.
	The call progresses independently of any other calls made to the X10Lib by
	other threads in the source process.
	As this is a non-blocking call, the caller cannot assume that data transfer
	has completed upon return from the call.  Instead, the bytes will only be
	available after a consecutive Wait call returns successfully.

Return values:

	X10_OK		Indicates the method/function call completed successfully.
	X10_ERR_LAPI	Error from the underlying communication system.


PutV
----

Purpose: Blocking transfer of vector data from the local node to a remote node.

Library: libx10.a

C++ syntax:

#include <x10/x10lib.h>
int x10lib::PutV(dsrc, len)
	x10_giov_ref_t *dsrc;
	int len;

C syntax:

#include <x10/x10lib.h>
int x10_put_v(dsrc, len)
	x10_giov_ref_t *dsrc;
	int len;

Parameters:

	INPUT
	dsrc	Specifies the array of data to be put to the remote node.
	len		Specifies the number of entries in the above array.

Description:

	This is a generalized I/O vector blocking operation that transfers
	data from the source address on the local node to the dest address
	on a remote node.
	This method is internally implemented by an RDMA if possible.
	The call progresses independently of any other calls made to the X10Lib by
	other threads in the dest process.
	The bytes will be available in dest upon successful return from this call.

Return values:

	X10_OK		Indicates the method/function call completed successfully.
	X10_ERR_LAPI	Error from the underlying communication system.


NbPutV
------

Purpose: Non-blocing transfer of vector data from the local node to a remote node.

Library: libx10.a

C++ syntax:

#include <x10/x10lib.h>
int x10lib::NbPutV(dsrc, len, hndl)
	x10_giov_ref_t dsrc;
	int len;
	x10_switch_t hndl;

C syntax:

#include <x10/x10lib.h>
int x10_put_v_nb(dsrc, len, hndl)
	x10_giov_ref_t dsrc;
	int len;
	x10_switch_t hndl;

Parameters:

	INPUT
	dsrc	Specifies the array of data to be put to the remote node.
	len		Specifies the number of entries in the above array.

	INPUT/OUTPUT
	hndl	Descriptor associated with a particular non-blocking transfer.

Description:

	This is a generalized I/O vector non-blocking operation that transfers
	data from the source address on the local node to the dest address
	on a remote node.
	This method is internally implemented by an RDMA if possible.
	The call progresses independently of any other calls made to the X10Lib by
	other threads in the dest process.
	As this is a non-blocking call, the caller cannot assume that data transfer
	has completed upon return from the call.  Instead, the bytes will only be
	available after a consecutive Wait call returns successfully.

Return values:

	X10_OK		Indicates the method/function call completed successfully.
	X10_ERR_LAPI	Error from the underlying communication system.


04) Remote Copy Interface for Strided Data
------------------------------------------


GetS
----

Purpose: Blocking transfer of strided data from a remote node to the local node.

Library: libx10.a

C++ syntax:

#include <x10/x10lib.h>
int x10lib::GetS(src, src_stride, dest, dest_stride, count, levels)
	x10_gas_ref_t src;
	int src_stride[];
	void *dest;
	int dest_stride[];
	int count[];
	int levels;

C syntax:

#include <x10/x10lib.h>
int x10_get_s(src, src_stride, dest, dest_stride, count, levels)
	x10_gas_ref_t src;
	int src_stride[];
	void *dest;
	int dest_stride[];
	int count[];
	int levels;

Parameters:

	INPUT
	src		Specifies the source address on a remote node.
	src_stride	Source array of stride distances in bytes.
	dest	Specifies the destination address on the local node.
	dest_stride	Destination array of stride distances in bytes.
	count	Block size in each dimension.  count[0] should be the number
			of bytes of contiguous data in a leading dimension.
	levels	The level of strides.

Description:

	This is a blocking strided operation that transfers data from
	the source address on a remote node to the dest address on
	the local node.
	This method is internally implemented by an RDMA if possible.
	The call progresses independently of any other calls made to the X10Lib by
	other threads in the source process.
	The bytes will be available in dest upon successful return from this call.

Return values:

	X10_OK		Indicates the method/function call completed successfully.
	X10_ERR_LAPI	Error from the underlying communication system.


NbGetS
------

Purpose: Non-blocking transfer of strided data from a remote node to the local node.

Library: libx10.a

C++ syntax:

#include <x10/x10lib.h>
int x10lib::NbGetS(src, src_stride, dest, dest_stride, count, levels, hndl)
	x10_gas_ref_t src;
	int src_stride[];
	void *dest;
	int dest_stride[];
	int count[];
	int levels;
	x10_switch_t hndl;

C syntax:

#include <x10/x10lib.h>
int x10_get_s(src, src_stride, dest, dest_stride, count, levels, hndl)
	x10_gas_ref_t src;
	int src_stride[];
	void *dest;
	int dest_stride[];
	int count[];
	int levels;
	x10_switch_t hndl;

Parameters:

	INPUT
	src		Specifies the source address on a remote node.
	src_stride	Source array of stride distances in bytes.
	dest	Specifies the destination address on the local node.
	dest_stride	Destination array of stride distances in bytes.
	count	Block size in each dimension.  count[0] should be the number
			of bytes of contiguous data in a leading dimension.
	levels	The level of strides.

	INPUT/OUTPUT
	hndl	Descriptor associated with a particular non-blocking transfer.

Description:

	This is a non-blocking strided operation that transfers data from
	the source address on a remote node to the dest address on
	the local node.
	This method is internally implemented by an RDMA if possible.
	The call progresses independently of any other calls made to the X10Lib by
	other threads in the source process.
	As this is a non-blocking call, the caller cannot assume that data transfer
	has completed upon return from the call.  Instead, the bytes will only be
	available after a consecutive Wait call returns successfully.

Return values:

	X10_OK		Indicates the method/function call completed successfully.
	X10_ERR_LAPI	Error from the underlying communication system.


PutS
----

Purpose: Blocking transfer of strided data from the local node to a remote node.

Library: libx10.a

C++ syntax:

#include <x10/x10lib.h>
int x10lib::PutS(src, src_stride, dest, dest_stride, count, levels)
	void *src;
	int src_stride[];
	x10_gas_ref_t dest;
	int dest_stride[];
	int count[];
	int levels;

C syntax:

#include <x10/x10lib.h>
int x10_put_s(src, src_stride, dest, dest_stride, count, levels)
	void *src;
	int src_stride[];
	x10_gas_ref_t dest;
	int dest_stride[];
	int count[];
	int levels;

Parameters:

	INPUT
	src		Specifies the source address on the local node.
	src_stride	Source array of stride distances in bytes.
	dest	Specifies the destination address on a remote node.
	dest_stride	Destination array of stride distances in bytes.
	count	Block size in each dimension.  count[0] should be the number
			of bytes of contiguous data in a leading dimension.
	levels	The level of strides.

Description:

	This is a blocking strided operation that transfers data from
	the source address on the local node to the dest address on
	a remote node.
	This method is internally implemented by an RDMA if possible.
	The call progresses independently of any other calls made to the X10Lib by
	other threads in the dest process.
	The bytes will be available in dest upon successful return from this call.

Return values:
	X10_OK		Indicates the method/function call completed successfully.
	X10_ERR_LAPI	Error from the underlying communication system.


NbPutS
------

Purpose: Non-blocking transfer of strided data from the local node to a remote node.

Library: libx10.a

C++ syntax:

#include <x10/x10lib.h>
int x10lib::NbPutS(src, src_stride, dest, dest_stride, count, levels, hndl)
	void *src;
	int src_stride[];
	x10_gas_ref_t dest;
	int dest_stride[];
	int count[];
	int levels;
	x10_switch_t hndl;

C syntax:

#include <x10/x10lib.h>
int x10_put_s(src, src_stride, dest, dest_stride, count, levels, hndl)
	void *src;
	int src_stride[];
	x10_gas_ref_t dest;
	int dest_stride[];
	int count[];
	int levels;
	x10_switch_t hndl;

Parameters:

	INPUT
	src		Specifies the source address on the local node.
	src_stride	Source array of stride distances in bytes.
	dest	Specifies the destination address on a remote node.
	dest_stride	Destination array of stride distances in bytes.
	count	Block size in each dimension.  count[0] should be the number
			of bytes of contiguous data in a leading dimension.
	levels	The level of strides.

	INPUT/OUTPUT
	hndl	Descriptor associated with a particular non-blocking transfer.

Description:

	This is a non-blocking strided operation that transfers data from
	the source address on the local node to the dest address on
	a remote node.
	This method is internally implemented by an RDMA if possible.
	The call progresses independently of any other calls made to the X10Lib by
	other threads in the dest process.
	As this is a non-blocking call, the caller cannot assume that data transfer
	has completed upon return from the call.  Instead, the bytes will only be
	available after a consecutive Wait call returns successfully.

Return values:

	X10_OK		Indicates the method/function call completed successfully.
	X10_ERR_LAPI	Error from the underlying communication system.


05) Register Transfer Operations
--------------------------------


GetValueXXX
-----------

Purpose: Transfer of a value stored in the register of a remote node.

Library: libx10.a

C++ syntax:

#include <x10/x10lib.h>
XXX x10lib::GetValueXXX(src)
	x10_gas_ref_t src;

C syntax:

#include <x10/x10lib.h>
XXX x10_get_value(src)
	x10_gas_ref_t src;

Parameters:

	INPUT
	src		Specifies the source address on a remote node.

Description:

	The value stored in the register of a remote node specified by
	the src address is returned.
	XXX can be "int"/"long"/"float"/"double".
	This method is internally implemented by an RDMA if possible.
	The call progresses independently of any other calls made to the X10Lib by
	other threads in the source process.

Return values:

	Returns the required datatype value.


PutValueXXX
-----------

Purpose: Blocking transfer of a value stored in the register of the local node to
		 a remote node.

Library: libx10.a

C++ syntax:

#include <x10/x10lib.h>
int x10lib::PutValueXXX(val, dest)
	XXX val;
	x10_gas_ref_t dest;

C syntax:

#include <x10/x10lib.h>
int x10_put_value(val, dest)
	XXX val;
	x10_gas_ref_t dest;

Parameters:

	INPUT
	val		Specifies the value to put in the destination.
	dest	Specifies the destination address on a remote node.

Description:

	The value stored in the register of the local node is blockingly transferred to
	the dest address on a remote node.
	XXX can be "int"/"long"/"float"/"double".
	This method is internally implemented by an RDMA if possible.
	The call progresses independently of any other calls made to the X10Lib by
	other threads in the dest process.

Return values:

	X10_OK		Indicates the method/function call completed successfully.
	X10_ERR_LAPI	Error from the underlying communication system.


NbPutValueXXX
-------------

Purpose: Non-blocking transfer of a value stored in the register of the local node to
		 a remote node.

Library: libx10.a

C++ syntax:

#include <x10/x10lib.h>
int x10lib::NbPutValueXXX(val, dest, hndl)
	XXX val;
	x10_gas_ref_t dest;
	x10_switch_t hndl;

C syntax:

#include <x10/x10lib.h>
int x10_put_value_nb(val, dest)
	XXX val;
	x10_gas_ref_t dest;
	x10_switch_t hndl;

Parameters:

	INPUT
	val		Specifies the value to put in the destination.
	dest	Specifies the destination address on a remote node.

	INPUT/OUTPUT
	hndl	Descriptor associated with a particular non-blocking transfer.

Description:

	The value stored in the register of the local node is non-blockingly transferred
	to the dest address on a remote node.
	XXX can be "int"/"long"/"float"/"double".
	This method is internally implemented by an RDMA if possible.
	The call progresses independently of any other calls made to the X10Lib by
	other threads in the dest process.
	As this is a non-blocking call, the caller cannot assume that data transfer
	has completed upon return from the call.  Instead, the value will only be
	available after a consecutive Wait call returns successfully.

Return values:

	X10_OK		Indicates the method/function call completed successfully.
	X10_ERR_LAPI	Error from the underlying communication system.


06) Ordering
------------

Fence
-----

Purpose: Enforce local order on X10Lib calls.

Library: libx10.a

C++ syntax:

#include <x10/x10lib.h>
int x10lib::Fence()

C syntax:

#include <x10/x10lib.h>
int x10_fence()

Description:

	Blocks the calling task until all the X10Lib operations initiated by
	the task before the fence are guaranteed to complete at the destination.

Return values:

	X10_OK		Indicates the method/function call completed successfully.
	X10_ERR_LAPI	Error from the underlying communication system.


Gfence
------

Purpose: Enforce global order on X10Lib calls.

Library: libx10.a

C++ syntax:

#include <x10/x10lib.h>
int x10lib::Gfence()

C syntax:

#include <x10/x10lib.h>
int x10_gfence()

Description:

	Blocks the calling task until all the outstanding X10Lib operations initiated
	before the fence are guaranteed to complete regardless of the destination.
	This is a collective call that enforces order across all tasks and provides
	barrier synchronization among them.

Return values:

	X10_OK		Indicates the method/function call completed successfully.
	X10_ERR_LAPI	Error from the underlying communication system.



07) Synchronization
-------------------

Lock
----

Purpose: Acquire the mutex lock.

Library: libx10.a

C++ syntax:

#include <x10/x10lib.h>
int x10lib::Lock()

C syntax:

#include <x10/x10lib.h>
int x10_lock()

Description:

	This method/function acquires the lock that is associated with the underlying
	communication system.

Return values:

	X10_OK		Indicates the method/function call completed successfully.
	X10_ERR_LAPI	Error from the underlying communication system.


Unlock
------

Purpose: Release the mutex lock that is held.

Library: libx10.a

C++ syntax:

#include <x10/x10lib.h>
int x10lib::Unlock()

C syntax:

#include <x10/x10lib.h>
int x10_unlock()

Description:

	This method/function releases the lock that is associated with the underlying
	communication system.

Return values:

	X10_OK		Indicates the method/function call completed successfully.
	X10_ERR_LAPI	Error from the underlying communication system.


08) Address Related
-------------------


Register
--------

Purpose: Registers the address of a function.

Library: libx10.a

C++ syntax:

#include <x10/x10lib.h>
int x10lib::Register(addr, addr_hndl)
	void *addr;
	int addr_hndl;

C syntax:

#include <x10/x10lib.h>
int x10_register(addr, addr_hndl)
	void *addr;
	int addr_hndl;

Parameters:

	INPUT
	addr	Specifies the address of the function handler to register.
	addr_hndl	Specifies the table index at which the above address is indexed.

Description:

	Use this method/function to register the address of a handler.
	The function address is maintained in an internal table.

Return values:

	X10_OK		Indicates the method/function call completed successfully.
	X10_ERR_LAPI	Error from the underlying communication system.


AddrInit
--------

Purpose: Create a remote address table.

Library: libx10.a

C++ syntax:

#include <x10/x10lib.h>
int x10lib::AddrInit(my_addr, addr_tab)
	void *my_addr;
	void *addr_tab[];

C syntax:

#include <x10/x10lib.h>
int x10_addr_init(my_addr, addr_tab)
	void *my_addr;
	void *addr_tab[];

Parameters:

	INPUT
	my_addr	Specifies the address supplied by each task.

	OUTPUT
	addr_tab	Specifies the address table, the size of which is greater
				than or equal to number of tasks.
Description:

	This is a collective call which is used to exchange virtual addresses
	among all tasks.
	Upon completion of this call, add_tab[j] contains the virtual address
	entry that was provided by task j.

Return values:

	X10_OK		Indicates the method/function call completed successfully.
	X10_ERR_LAPI	Error from the underlying communication system.


09) Active messages
-------------------

Purpose: Transfer user message to a remote task, obtaining the target address
		 on the remote task from the user specified header handler.

Library: libx10.a

C++ syntax:

error_t x10lib::asyncSpawnInline<N, T>(dest, ...)
	place_t dest;
        int N;
        struct T; 

T is a struct with operator () defined. The type of T should be:
  struct T {
   void operator() (async_arg_t*, int n);
  }; 

C syntax:

error_t x10_asyncSpawnInline(dest, n, f, ...)
	place_t dest;
	int n;
	async_func_t* f;

Parameters:

	INPUT
	dest	Specifies the remote node id.
	n	Specifies the number of arguments to the remote method routine (C only).
        f       Specifies the pointer to the remote method (C only).

Description:

	Use this method/function to execute a method in remote node.

Return values:

	X10_OK		Indicates the method/function call completed successfully.
	X10_ERR_LAPI	Error from the underlying communication system.

Note:
      The C++ interface will be changed soon to match the C interface.


Aggregation:
-----------

Purpose:  Enqueue the active messages and execute them as an aggregate
	  on the remote task. The size of the aggregate is fixed by the library.  
          Once the aggregation limit is reached, the active messages are sent
          to the destination and executed there.

Library: libx10.a

C++ syntax:

error_t x10lib::asyncSpawnInlineAgg<N, T>(dest, int handle, ...)
	place_t dest;
        int handle;
        int N;
        struct T; 


T is a struct with operator () defined. The type of T should be:
  struct T {
   void operator() (async_arg_t*, int n);
  }; 

C syntax:

error_t x10_asyncSpawnInlineAgg(dest, n, f, int handle,...)
	place_t dest;
	int n;
	async_func_t* f;
        int handle;

Parameters:

	INPUT
	dest	Specifies the remote node id.
	n	Specifies the number of arguments to the remote method (C only).
        f       Specifies the pointer to the remote method  (C only).
        handle  Specifies an unique handle for the remote method.
                The handle is required because the aggregation is performed
                for a given remote method. It is the users responsibility to 
                ensure that the handle is unique. If it is not, the result is un-predictable.
Description:

	Use this method/function to execute a method in remote node.

Return values:

	X10_OK		Indicates the method/function call completed successfully.
	X10_ERR_LAPI	Error from the underlying communication system.

Note:
     The C++ interface will be changed soon to match the C interface.

Flush
-----
Purpose : Flush all the oustanding aggreagted active messages. 

C++ Syntax:

error_t x10lib::flush<N, T>(handle)
        int handle;
        int N;
        struct T; 

C Syntax:

error_t x10_flush(n, handle)
        int n;
        struct T f;
        int handle;

Parameters:
  
        INPUT

	n	Specifies the number of arguments to the active message routine. (C only)
        handle  Specifies the handle of the active message to be flushed.
                It is solely the user's responsiblity to provide the same
                handle as that used by asyncSpawnInlineAgg. Failure to do so
                will lead to un-predictable results.

Description:

	Use this method/function to flush all the outstanding aggregated active messages.

Return values:

	X10_OK		Indicates the method/function call completed successfully.
	X10_ERR_LAPI	Error from the underlying communication system.

Note:
     The C++ interface will be changed soon to match the C interface.

10) Environment
---------------

Getenv
------

Purpose: Query the runtime environment.


10) Environment
---------------

Getenv
------

Purpose: Query the runtime environment.

Library: libx10.a

C++ syntax:

#include <x10/x10lib.h>
int x10lib::Getenv(query, ret_val)
	x10_query_t query;
	int *ret_val;

C syntax:

#include <x10/x10lib.h>
int x10_getenv(query, ret_val)
	x10_query_t query;
	int *ret_val;

Parameters:

	INPUT
	query	Specifies the type of query.

	OUTPUT
	ret_val	Specifies the parameter to store the result of the query.

Description:
	
	Use this method/function to query runtime settings and statistics.
	This routine recognizes all the query types allowed for the underlying
	communication system.

Return values:

	X10_OK		Indicates the method/function call completed successfully.
	X10_ERR_LAPI	Error from the underlying communication system.


Setenv
------

Purpose: Set the runtime environment.

Library: libx10.a

C++ syntax:

#include <x10/x10lib.h>
int x10lib::Setenv(query, ret_val)
	x10_query_t query;
	int set_val;

C syntax:

#include <x10/x10lib.h>
int x10_setenv(query, ret_val)
	x10_query_t query;
	int set_val;

Parameters:

	INPUT
	query	Specifies the type of query.
	set_val	Specifies the integer value of the parameter to set.

Description:
	
	Use this method/function to set runtime attributes.
	This routine recognizes all the query types allowed for the underlying
	communication system.

Return values:

	X10_OK		Indicates the method/function call completed successfully.
	X10_ERR_LAPI	Error from the underlying communication system.
