<project name="polyglot" default="all" basedir=".">
	<description>
    Polyglot build file
  </description>

	<!-- set global properties for this build -->

	<!-- source directory -->
	<property name="src" location="${basedir}/src"/>
	<!-- vj: get the environment variables. -->
	<!-- vj: This works on Windows/cygwin. -->
	<property environment="env" />

	<!-- directory for class file targets -->
	<property name="classes" location="${basedir}/classes"/>

	<!-- directory for jar files -->
	<property name="lib" location="${basedir}/lib"/>

	<!-- binaries directory -->
	<property name="bin"  location="${basedir}/bin"/>

	<!-- configuration directory -->
	<property name="etc"  location="${basedir}/etc"/>

	<!-- test cases directory -->
	<property name="testdir"  location="${basedir}/src"/>
	<path id="standard.classpath">
		<pathelement location="${classes}"/>
		<pathelement location="${lib}/junit.jar"/>
		<pathelement location="${lib}/lpg.jar"/>
		<pathelement location="${lib}/junit-src.jar"/>
		<pathelement location="${lib}/java_cup.jar"/>
		<pathelement location="${lib}/JFlex.jar"/>
		<pathelement location="${lib}/jcc.jar"/>
		<pathelement location="${lib}/log4j.jar"/>
	</path>

	<target name="configure" description="Configure Polyglot"
          depends="check-classpath"
          unless="configure.up-to-date">
		<echo message="The OS is ${os.name}."/>
		<echo message="The java version is ${java.version}."/>
		<echo message="The current directory is ${user.dir}."/>
		<echo message="The Java Installation directory is ${java.home}."/>
		<echo message="The file separator is ${file.separator}."/>
		<echo message="The path separator is ${path.separator}."/>
		<echo message="The line separator is ${line.separator}."/>
		<property name="configure.up-to-date" value="true"/>
	</target>

	<target name="check-classpath" 
  description="Check that the classpath contains the appropriate directories/jars">
		<!--
    <available classname="java_cup.Main" property="cp_existence.java_cup"/>
    <available classname="JFlex.Main" property="cp_existence.jlex"/>
    <fail unless="cp_existence.java_cup" 
          message="The java_cup classes must be on the classpath. Try adding java_cup.jar to the classpath."/>
    <fail unless="cp_existence.jlex" 
          message="The JFlex classes must be on the classpath. Try adding JFlex.jar to the classpath."/>
-->
	</target>

	<target name="bin" 
          description="Configure Polyglot" 
          depends="configure,bin-deps"
          unless="bin.up-to-date">
		<antcall target="x10"/>
		<antcall target="x10c"/>
		<antcall target="junit"/>
		<antcall target="dotest"/>
		<antcall target="dounittest"/>
		<antcall target="miscexec"/>
	</target>

	<target name="etc" 
	 description="Configure Polyglot" 
	 depends="etc-deps"
	 unless="etc.up-to-date">
		<antcall target="config"/>
	</target>

	<target name="etc-deps">
		<condition property="etc.up-to-date">
			<and>
				<available file="${etc}/standard.cfg"/>
			</and>
		</condition>
	</target>

	<target name="bin-deps">
		<dependset>
			<srcfileset dir="${bin}" includes="x10c.in"/>
			<targetfileset dir="${bin}" includes="x10c"/>
		</dependset>
		<condition property="bin.up-to-date">
			<and>
				<available file="${bin}/standard.cfg"/>
				<available file="${bin}/x10"/>
				<available file="${bin}/x10c"/>
				<available file="${bin}/junit"/>
				<available file="${bin}/dotest"/>
				<available file="${bin}/dounittest"/>
			</and>
		</condition>
	</target>

	<target name="config-deps">
		<condition property="config.up-to-date">
			<available file="${bin}/config"/>
		</condition>
	</target>


	<target name="config" depends="config-deps" unless="config.up-to-date"
	          description="creates the default config file">
		<echo message="Creating ${etc}/standard.cfg"/>
		<echo file="${etc}/standard.cfg" append="no"># This file was automatically generated during the configure process of this x10 installation.

COMPILER_FRAGMENT_DATA_DIRECTORY=${basedir}${file.separator}..${file.separator}x10.compiler${file.separator}data${file.separator}
SAMPLING_FREQUENCY_MS=50
STATISTICS_DISABLE=none</echo>
	</target>

	<target name="defs-deps">
		<condition property="defs.up-to-date">
			<available file="${bin}/defs"/>
		</condition>
	</target>

	<target name="executable-defs" depends="defs-deps" unless="defs.up-to-date"
          description="creates a file containing common environment variable definitions">
		<echo message="Creating ${bin}/defs"/>
		<echo message="Javahome is ${env.JAVA_HOME}" />
		<echo message="FILE_SEP = '${file.separator}'" />
		<echo message="PATH_SEP = '${path.separator}'" />
		<echo message="X10_PLATFORM = '${env.X10_PLATFORM}'" />
		<echo message="TOP = '${basedir}'" />
		<echo file="${bin}/defs" append="no">#!/bin/sh
# DO NOT EDIT - This file was automatically generated.

JAVA='${env.JAVA_HOME}${file.separator}bin${file.separator}java'
FILE_SEP='${file.separator}'
PATH_SEP='${path.separator}'
TOP='${basedir}'
X10_PLATFORM='${env.X10_PLATFORM}'
    </echo>
	</target>

	<target name="x10c" 
          depends="executable-defs" 
          description="creates the executable script x10c">
		<!-- Create x10c -->
		<echo message="Creating ${bin}/x10c"/>
		<concat destfile="${bin}/x10c" append="no">
			<filelist dir="${bin}" files="defs"/>
		</concat>
		<echo file="${bin}/x10c" append="yes">
ext=""

</echo>
		<concat destfile="${bin}/x10c" append="yes">
			<filelist dir="${bin}" files="x10c.in"/>
		</concat>

		<chmod perm="+x" file="${bin}/x10c"/>

		<delete file="${bin}/defs"/>
	</target>

	<target name="x10" 
	          depends="executable-defs" 
	          description="creates the executable script x10">
		<!-- Create x10 -->
		<echo message="Creating ${bin}/x10"/>
		<concat destfile="${bin}/x10" append="no">
			<filelist dir="${bin}" files="defs"/>
		</concat>
		<echo file="${bin}/x10" append="yes">
	ext=""

	</echo>
		<concat destfile="${bin}/x10" append="yes">
			<filelist dir="${bin}" files="x10.in"/>
		</concat>

		<chmod perm="+x" file="${bin}/x10"/>

		<delete file="${bin}/defs"/>
	</target>
	<target name="miscexec"
		description="makes .dll and .so files in testdir and misc files in bin executable">
 		<chmod perm="ugo+rx">
			<fileset dir="${testdir}">
				<include name="**/*.dll"/>
				<include name="**/*.so"/>
			</fileset>
		</chmod>
		<chmod perm="+x" file="${bin}/doit"/>
		<chmod perm="+x" file="${bin}/testScript"/>
		<chmod perm="+x" file="${bin}/testScript0"/>
		<chmod perm="+x" file="${bin}/newpgrp"/>
		<chmod perm="+x" file="${bin}/makeTestCompiler"/>
		<chmod perm="+x" file="${bin}/cvsDelete"/>
		<chmod perm="+x" file="${bin}/cvsCopy"/>
	</target>
	

	<target name="junit" 
	          depends="executable-defs" 
	          description="creates the executable script junit">
		<!-- Create x10 -->
		<echo message="Creating ${bin}/junit"/>
		<concat destfile="${bin}/junit" append="no">
			<filelist dir="${bin}" files="defs"/>
		</concat>
		<echo file="${bin}/junit" append="yes"> 
ext="" 

</echo>
		<concat destfile="${bin}/junit" append="yes">
			<filelist dir="${bin}" files="junit.in"/>
		</concat>

		<chmod perm="+x" file="${bin}/junit"/>

		<delete file="${bin}/defs"/>
	</target>

	<target name="dotest" 
          depends="executable-defs" 
          description="creates the executable script dotest">
		<!-- Create dotest -->
		<echo message="Creating ${bin}/dotest"/>
		<concat destfile="${bin}/dotest" append="no">
			<filelist dir="${bin}" files="defs"/>
		</concat>
		<echo file="${bin}/dotest" append="yes">
ext=""

</echo>
		<concat destfile="${bin}/dotest" append="yes">
			<filelist dir="${bin}" files="dotest.in"/>
		</concat>

		<chmod perm="+x" file="${bin}/dotest"/>

		<delete file="${bin}/defs"/>
	</target>

	<target name="dounittest" 
          depends="executable-defs" 
          description="creates the executable script dounittest">
		<!-- Create dounittest -->
		<echo message="Creating ${bin}/dounittest"/>
		<concat destfile="${bin}/dounittest" append="no">
			<filelist dir="${bin}" files="defs"/>
		</concat>
		<echo file="${bin}/dounittest" append="yes">
ext=""

</echo>
		<concat destfile="${bin}/dounittest" append="yes">
			<filelist dir="${bin}" files="dounittest.in"/>
		</concat>

		<chmod perm="+x" file="${bin}/dounittest"/>

		<delete file="${bin}/defs"/>
	</target>

	<!-- Configure a single extension
       @param ${ext}         the name of the extension 
    -->
	<target name="configure-ext">
		<available file="configure-${ext}.xml" property="configure-ext.configure-available"/>
		<antcall target="configure-ext-conditional"/>
	</target>

	<target name="configure-ext-conditional" 
          if="configure-ext.configure-available"
          depends="executable-defs">
		<ant antfile="configure-${ext}.xml" target="configure" inheritRefs="true"/>
		<delete file="${bin}/defs"/>
	</target>

	<!-- compile the base compiler -->
	<target name="all" depends="compile" description="compile the source"/>
	<!-- to use ant to also build LAPI support, comment out the line -->
	<!-- above and uncomment the line below -->
	<!-- target name="all" depends="compile,lapi-support" description="compile the source"/ -->

	<!-- compile the base compiler -->
	<target name="compile" depends="base,x10,x10rt" description="compile the source"/>

	<target name="clean" description="clean up">
		<!-- Delete the ${classes} and ${dist} directory trees -->
		<delete dir="${classes}"/>
	</target>

	<target name="clobber" depends="clean">
		<delete>
			<fileset dir="${src}">
				<include name="**/Grm.java"/>
				<include name="**/sym.java"/>
				<include name="**/Lexer_c.java"/>
				<include name="**/*_ppg.cup"/>
				<include name="${src}/ppg/parse/Constant.java"/>
				<include name="${src}/ppg/parse/Grm.java"/>
			</fileset>
		</delete>
		<delete>
			<fileset dir="${etc}">
				<include name="standard.cfg"/>
			</fileset>
		</delete>
		<delete>
			<fileset dir="${bin}">
				<include name="x10"/>
				<include name="x10c"/>
				<include name="junit"/>
				<include name="defs"/>
			</fileset>
		</delete>
 		<delete>
			<fileset dir="${testdir}">
				<include name="**/*.class"/>
				<include name="**/*.java"/>
				<include name="**/*.pem"/>
				<include name="**/*_x10stub.c"/>
				<include name="**/log*"/>
				<include name="**/javacore*"/>
				<include name="**/heapdump*"/>
				<include name="**/ErrorsLog"/>
			</fileset>
		</delete>
	</target>

       <target name="x10rt" description="compile x10 runtime">
          <javac srcdir="${src}" destdir="${classes}" debug="on" target="1.4" source="1.4"
	         includes="x10/**,TestX10.java">
		        <classpath refid="standard.classpath"/>
			                </javac>
					        </target>
       
	<!-- compile the base compiler excluding the jl extension -->
	<target name="compile-base"
          description="compile the source">
		<javac srcdir="${src}" destdir="${classes}" debug="on"
      target="1.4" source="1.4"
      includes="polyglot/**"
      excludes="polyglot/ext/**,polyglot/tests/**,ppg/test/**">
			<classpath refid="standard.classpath"/>
		</javac>
	</target>

	<!-- compile a single extension, named ${ext} -->
	<target name="compile-ext"
    description="compile an extension">
		<javac srcdir="${src}" destdir="${classes}" debug="on"
    target="1.4" source="1.4"
      includes="polyglot/ext/${ext}/**"
      excludes="**/qq/**,**/runtime/**">
			<classpath refid="standard.classpath"/>
			<!-- HACK: the excludes above wouldn't be necessary if we
           reorganized the source tree -->
		</javac>
	</target>

	<target name="base" depends="bin,etc,compile-base">
	</target>

	<!-- the following lines have only ever been tested on AIX -->
	<!-- they build the LAPI support library -->
	<target name="buildLAPISupportTask">
	        <javac srcdir="${src}/lapi_support" destdir="${src}/lapi_support"/>
	</target>
	<target name="declareLAPISupportTask" depends="buildLAPISupportTask">
	        <taskdef name="buildLAPISupport"
		classname="LAPISupportantTask"
		classpath="${src}/lapi_support"/>
	</target>
	
	<target name="lapi-support" depends="declareLAPISupportTask">
	<buildLAPISupport srcdir="${src}/lapi_support" classes="${classes}" bindir="${bin}">
	</buildLAPISupport>
	</target>
	<!-- the preceding lines have only ever been tested on AIX -->

	
</project>
