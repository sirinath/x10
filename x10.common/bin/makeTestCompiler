#!/bin/bash 

usage() {
# print usage message and exit with nonzero return code

echo "
makeTestCompiler <resultFile> <testDirectory>

Currently, resultFile must be set to 
src/polyglot/ext/x10/tests/TestCompiler.java

Automatically generates a java file suitable for use by
junit. Tests are generated for all the *.x10 files in the given
test directory, and recursively for subdirectories thereof.

The file hierarchy starting at the top test directory is scanned
in a pre-order enumeration.  Top level directories that do not
contain *.x10 files are considered organizational directories,
not containing packages or test cases. As soon as a directory
containing any *.x10 files, is encountered in the pre-order
traversal, all the .x10 files containing "public static void
main" methods in this directory and subdirecties are executed
(using the preorder enumeration) as test cases, with the x10
classpath set to this directory.  The subdirectories may have a
package/subpackage organization as in java.

*.x10 files which do not contain "public static void main" are
not made into tests. You can put auxiliary classes used by other
tests in these files.

Omit the ~/x10/ prefix before directory and file names, it will
be inserted. The environment variable X10 must be set to
~/x10 before running this script.

Example:

makeTestCompiler src/polyglot/ext/x10/tests/TestCompiler.java examples

\"junit\" must then be run in the <testDirectory>" 

exit 1

}

checkUsage () {
#simple checks on arguments and environment

  if [[ $# -gt 2 ]]; then usage; fi 
  if [[ "$1" = "-h" || "$1" = "--help" || "$1" = "-help" ]]; then usage; fi
  if [[ -z "$X10" ]]; then
    echo "X10 environment variable must be set"
    usage
  fi
}

testForMain() {
# test if there is a main method in file f
# and filename is of the form *.x10

    local f="$1"
    local tail="$2"
    if [[ "$tail" != *.x10 ]] ; then return 1; fi
    egrep '(public[[:space:]]+static|static[[:space:]]+public)[[:space:]]+void[[:space:]]+main' "$f" >/dev/null
    return $?
}

genTest() {
# generate tests in $1 and subdirectories thereof  

  local srcDir="$1" #relative to top level test directory
  local testDir="$2" #relative to top level directory which had *.x10 files
  local tail=""
  ls $testDir/$srcDir/*.x10 > /dev/null 2>&1 
  local X10Files=$? #0 if *.x10 files exist
  for f in $testDir/$srcDir/*; do
    tail=${f##*/} # if f is a/b/c tail will be c
    if [[ -d "$f" && "$tail" != CVS && "$srcDir" = "." && $X10Files -ne 0 ]]; then
      # this directory is still an an organizational directory
      # not a real test directory
      # continue preorder traversal to find real test directory
      genTest "." "$testDir/$tail"  
    elif [[ -d "$f" && "$tail" != CVS ]]; then
      # this is a real test subdirectory/package, with root at $testDir
      # I.e. we are really at $testDir/$f
      
      genTest "$srcDir/$tail" "$testDir" #recursively generate tests for package subdir
    elif testForMain "$f" "$tail"; then
      if [[ "$tail" != *MustFailTimeout* ]]; then
        # do not include infinite loop test 
        # junit does not have time-out
        genJava "$srcDir" "$testDir" ${tail%.x10} # run an actual x10 test case
      fi
    fi
  done
}

changeSlashToDot() {
# convert a/b/c to a.b.c. But ./foo becomes foo

  local str=$1
  str=${str#\.\/}
  #str=${str//\//\.}
  str=`echo "$str" | sed -e 's/\//\./g' `
  RESULT="$str"
}

changeDotToUnderscore() {
# convert a.b.c to a_b_c

  local str=$1
  str=`echo "$str" | sed -e 's/\./_/g' `
  RESULT="$str"
}

genJava() {
# write a run method (suitable for use with junit) for srcDir/test.x10

  local srcDir="$1"
  local testDir="$2"
  local test="$3"
  local x10FileName="$srcDir/$test.x10" #a/b/c.x10
  changeSlashToDot "$srcDir/$test"
  local className="$RESULT"             #a.b.c
  local localTestTreeRoot="$testDir"
  changeSlashToDot "$testDir"
  local localTestTreeRootName="$RESULT"
  changeDotToUnderscore "$localTestTreeRootName"
  local name1="$RESULT"
  changeDotToUnderscore "$className"
  local name2="$RESULT"

  echo "
    public void test_${name1}_${name2}() {
        run(\"$x10FileName\",\"$className\",\"$localTestTreeRoot\");
    }" >> $WD/TestCompiler2 

}

main() {
#main program

  checkUsage $*
  #result  file
  local result=$X10/${1:-"src/polyglot/ext/x10/tests/TestCompiler.java"}
  #test directory
  local testDir=$X10/${2:-"examples"}
  local SD=$X10/bin                     #source directory
  WD=$X10/TestCompilerWork              #working directory
  if [ -e "$WD" ]; then rm -rf $WD/*; else mkdir $WD; fi
  cd $testDir
  genTest "." "." #generate junit code for $testDir and subdirectories
  (echo "// Automatically generated by $0 $*";
   echo "// Do not edit";
   cat $SD/TestCompiler1 $WD/TestCompiler2 $SD/TestCompiler3) > $result
   rm -rf $WD

}

main $*
exit 0
