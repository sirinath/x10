/***************************************************************************************
               An X10 implementation of the NPB3.0 MG 3D Benchmark 

In this implementation, the grid is partitioned across places. It is used to study X10's 
expressiveness rather than to generate performance numbers. Replacing the current arraycopy 
methods with the corresponding built-in ones (to be implemented) will certainly improve 
performance. 

We use X10's runtime support for abstract performance metrics to study the potential performance 
impacts of expressing fine-grained parallelism in the MG algorithm.

Reference:
	Datta et al. Titanium Performance and Potential: an NPB Experimental Study. 
	In Proceedings of the 18th International Workshop on Languages and Compilers for Parallel Computing (LCPC), 
	October 2005.

To compile and run the code, for example, do the following:
	x10c  -BAD_PLACE_RUNTIME_CHECK=false MGDriver.x10 (add appropriate x10c flags if needed)
	x10  -J-mx1000m -J-ms1000m -libpath . -classpath . -NUMBER_OF_LOCAL_PLACES=4 
	-INIT_THREADS_PER_PLACE=1 NPB3_0_X10.MGDriver -s
        
The output looks like

	Overlapping communication and computation? false. If not, doing exchange after c
	omputation? false
	There are 4 places. Running problem of class S
	The init residual norm is 0.024705294220065465
	Iteration 0
	The residual norm is 0.0029337960976327884
	Iteration 1
	The residual norm is 6.315001790622823E-4
	Iteration 2
	The residual norm is 1.7360856792372306E-4
	Iteration 3
	The residual norm is 5.307707005734895E-5
	The reference 2norm is 5.30770700573E-5. The difference is 4.894495182414249E-17	

	Wall-clock time for MGSolve: 8.272secs

Author: Tong Wen
        IBM Research
        
        (C) Copyright IBM Corp. 2006
*****************************************************************************************/
