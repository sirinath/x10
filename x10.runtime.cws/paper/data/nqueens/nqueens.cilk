/*
 * A simple nqueens program to test abort
 *
 * Author: Keith Randall
 */
/*
 * Copyright (c) 2000 Massachusetts Institute of Technology
 * Copyright (c) 2000 Matteo Frigo
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

#include <cilk.h>
#include <cilk-lib.cilkh>
#include <stdlib.h>
#include <stdio.h>
#include <memory.h>
#include <time.h>
#include <assert.h>

long long nanoTime() {
  struct timespec ts;
  clock_gettime(CLOCK_REALTIME, &ts);
  return (long long)(ts.tv_sec * 1000000000LL + ts.tv_nsec);
}


/*
 * <a> contains array of <n> queen positions.  Returns 1
 * if none of the queens conflict, and returns 0 otherwise.
 */
int ok(int n, char *a)
{
     int i, j;
     char p, q;

     for (i = 0; i < n; i++) {
	  p = a[i];

	  for (j = i + 1; j < n; j++) {
	       q = a[j];
	       if (q == p || q == p - (j - i) || q == p + (j - i))
		    return 0;
	  }
     }
     return 1;
}

static int board_size;

/*
 * <a> is an array of <j> numbers.  The entries of <a> contain
 * queen positions already set.  If there is any extension of <a>
 * to a complete <n> queen setting, returns one of these queen
 * settings (allocated from the heap).  Otherwise, returns NULL.
 * Does not side-effect <a>.
 */

cilk int nqueens(int *a, int a_size) {
  int *next;
  int row = a_size;
  int sum, q, i;
  int attacked;
  int p, k;
  int *y;

  inlet void update(int val, int loc) {
    y[loc] += val;
  }

  if(row >= board_size)
    return 1;

  y = Cilk_alloca((board_size)*sizeof(int));
/*   y = malloc((board_size)*sizeof(int)); */
  assert(y != NULL);

  for(i=0; i<board_size; i++)
    y[i] = 0;

  sum = 0;
  q=0;

  while (q < board_size) {
    attacked = 0;
    for (i = 0; i < row && ! attacked; i++) {
      p = a[i];
      attacked = (q == p || q == p - (row - i) || q == p + (row - i));
    }
    if (!attacked) { 
      next = Cilk_alloca((row+1)*sizeof(int));
      assert(next != NULL);

      for (k = 0; k < row; ++k)
	next[k]=a[k]; 
      next[row]=q; 

      update(spawn nqueens(next, row+1), q);
    }
    q++;
  }
  sync;

  for(i=0; i<board_size; i++)
    sum += y[i];

  return sum;
}

cilk int cilk_main(int argc, char *argv[])
{
     int n, nreps;
     int count;
     int i;
     long long s, t;
     long long minT;
     int a[1];
     int expectedSolutions[20] = {0, 1, 0, 0, 2, 10, 4, 40, 92, 352, 724, 2680, 14200,73712, 365596, 2279184, 14772512};


     if (argc < 3) {
	  printf("Usage: %s <cilk options> <nreps> <board-size>\n", argv[0]);
	  return 1;
     }
     if (argc > 3)
	  printf("%s: extra arguments being ignored\n", argv[0]);

     nreps = atoi(argv[1]);
     n = atoi(argv[2]);
/*      a = Cilk_alloca(0 * sizeof(int)); */

/*      printf("running queens %d\n", n); */

	board_size = n;	
	CILK_MB();

     for(i=0; i<nreps; i++) {
       s = nanoTime();
       count = spawn nqueens(a, 0);
       sync;
       t = nanoTime();
       minT = (i>0 && minT<(t-s) ? minT : (t-s));
     }

     printf("nqueens(%d)=%d\t %s time=%.3lf us \n",
	    n, count, (count==expectedSolutions[n]?"ok":"fail"),
	    minT/1000.0);

     return 0;
}

