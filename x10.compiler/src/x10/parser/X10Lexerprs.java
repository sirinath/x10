

package x10.parser;

import com.ibm.lpg.*;
import java.io.*;

class X10Lexerprs implements ParseTable, X10Lexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,3,3,1,1,5,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,3,2,2,
            3,1,2,3,4,1,2,2,3,2,
            3,2,3,2,2,0,1,2,2,2,
            0,2,1,2,1,2,2,2,3,2,
            3,3,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,2,3,4,
            1,2,3,1,1,1,1,1,1,1,
            1,1,1,1,2,1,2,2,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            2,2,1,1,1,1,1,3,2,2,
            2,2,2,2,2,2,2,1,2,2,
            3
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,21,21,21,21,22,22,22,22,
            22,22,22,23,23,23,23,24,24,25,
            25,19,19,5,5,28,28,29,29,29,
            12,12,12,9,9,9,9,9,2,2,
            2,2,2,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,4,4,4,1,1,1,1,1,
            1,1,1,1,1,10,10,10,10,10,
            10,10,10,7,7,7,7,7,7,7,
            7,7,7,7,7,6,6,32,32,32,
            32,33,33,33,8,8,8,8,11,11,
            14,14,27,27,26,26,18,18,18,34,
            34,34,34,34,34,34,34,34,34,34,
            34,34,34,34,34,34,34,34,34,34,
            34,34,34,34,34,34,34,34,15,15,
            15,15,15,15,15,15,15,15,15,15,
            15,15,15,15,15,15,15,15,15,15,
            15,15,15,15,15,15,35,35,35,35,
            35,35,35,35,35,35,35,35,35,35,
            35,35,35,35,35,35,35,35,35,35,
            35,35,35,35,36,36,36,36,36,36,
            36,36,36,36,36,36,36,36,36,36,
            36,36,36,36,36,36,36,36,36,36,
            36,36,13,13,13,13,39,39,30,30,
            30,30,30,30,30,30,31,31,31,31,
            31,31,31,20,20,20,20,20,20,20,
            16,16,16,16,16,16,16,16,17,17,
            17,37,308,511,510,510,510,435,996,74,
            100,512,205,70,70,70,70,959,358,371,
            450,306,358,4,5,947,473,362,420,407,
            473,405,1,65,65,65,65,714,457,348,
            856,65,70,457,457,65,70,65,509,508,
            508,508,508,887,1086,1073,424,410,72,72,
            72,72,871,57,508,457,620,432,508,375,
            1074,202,431,72,103,63,63,63,63,195,
            387,889,852,63,508,839,74,63,72,63,
            59,490,72,62,382,339,53,483,1100,375,
            608,198,197,197,197,739,522,682,76,764,
            469,459,521,76,76,469,469,903,55,789,
            471,814,180,1029,74,471,471,180,180,970,
            496,1007,498,1079,496,906,498,338,1018,501,
            924,61,945,501,1097,332,1040,74,1051,74,
            183,1062,74,1101,1083,902,1085,1102,695,726,
            406,407,727,1104,1105,1106,1108,1109,1111,1112,
            1122,1125,1126,525,525
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,97,98,0,
            100,101,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,97,
            98,0,100,101,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,95,
            96,97,98,0,0,0,102,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,0,76,77,78,79,80,81,82,
            83,84,85,86,87,88,89,90,91,92,
            93,94,95,96,99,0,0,100,101,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,73,74,75,76,77,78,79,80,
            81,82,83,84,85,86,87,88,89,90,
            91,92,93,94,99,99,97,98,0,1,
            2,3,4,5,6,7,8,9,10,11,
            0,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,69,70,71,
            72,73,74,75,76,77,78,79,80,81,
            82,83,84,85,86,87,88,89,90,91,
            92,93,94,0,0,97,98,0,1,2,
            3,4,5,6,7,8,9,10,11,0,
            0,14,15,16,17,18,19,20,21,22,
            23,24,13,26,27,28,29,30,31,32,
            33,0,0,0,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,0,0,
            73,0,1,2,3,4,5,6,7,8,
            9,10,11,74,0,14,15,16,17,18,
            19,20,21,22,23,24,12,26,0,0,
            0,0,31,0,1,2,3,4,5,6,
            7,8,9,10,11,0,0,14,15,16,
            17,18,19,20,21,22,23,24,0,1,
            2,3,4,5,6,7,8,9,10,11,
            25,0,14,15,16,17,18,19,20,21,
            22,23,24,0,1,2,3,4,5,6,
            7,8,9,10,11,0,0,14,15,16,
            17,18,19,20,21,22,23,24,0,1,
            2,3,4,5,6,7,8,9,10,11,
            0,0,14,15,16,17,18,19,20,21,
            22,23,24,0,1,2,3,4,5,6,
            7,8,9,10,11,99,0,14,15,16,
            17,18,19,20,21,22,23,24,0,1,
            2,3,4,5,6,7,8,9,10,11,
            0,0,14,15,16,0,18,19,0,0,
            0,0,11,25,26,14,15,16,13,31,
            0,1,2,3,4,5,6,7,8,0,
            0,11,12,0,0,0,0,17,0,1,
            2,3,4,5,6,7,8,27,28,29,
            30,0,0,0,34,0,1,2,3,4,
            5,6,7,8,13,13,11,12,32,33,
            0,0,17,0,1,2,3,4,5,6,
            7,8,27,28,29,30,35,0,0,34,
            0,0,0,0,0,75,0,1,2,3,
            4,5,6,7,8,9,10,13,0,1,
            2,3,4,5,6,7,8,9,10,0,
            1,2,3,4,5,6,7,8,9,10,
            75,35,36,25,0,99,0,0,0,0,
            0,0,0,0,25,0,1,2,3,4,
            5,6,7,8,9,10,0,1,2,3,
            4,5,6,7,8,9,10,0,1,2,
            3,4,5,6,7,8,9,10,0,1,
            2,3,4,5,6,7,8,9,10,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,0,0,0,0,0,0,0,0,
            0,0,0,11,0,0,14,15,16,11,
            18,19,14,15,16,13,0,13,13,0,
            0,0,0,0,0,0,0,0,0,13,
            0,0,13,13,13,12,12,12,36,12,
            12,0,12,12,0,0,0,0,0,0,
            0,0,0,12,0,0,12,12,0,0,
            0,0,0,0,71,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,77,
            0,76,78,79,0,0,0,0,95,96,
            0,72,0,100,101,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            525,590,590,590,590,590,590,590,590,590,
            590,590,590,590,590,590,590,590,590,590,
            590,590,590,590,590,590,590,590,590,590,
            590,590,590,590,590,590,590,590,590,590,
            590,590,590,590,590,590,590,590,590,590,
            590,590,590,590,590,590,590,590,590,590,
            590,590,590,590,590,590,590,590,590,590,
            590,590,590,590,590,590,590,590,589,424,
            590,590,590,590,590,590,590,590,590,590,
            590,590,590,590,590,590,590,590,590,71,
            590,590,525,588,588,588,588,588,588,588,
            588,588,588,588,588,588,588,588,588,588,
            588,588,588,588,588,588,588,588,588,588,
            588,588,588,588,588,588,588,588,588,588,
            588,588,588,588,588,588,588,588,588,588,
            588,588,588,588,588,588,588,588,588,588,
            588,588,588,588,588,588,588,588,588,588,
            588,588,588,588,588,588,588,588,588,588,
            531,593,588,588,588,588,588,588,588,588,
            588,588,588,588,588,588,588,588,588,588,
            588,66,588,588,7,595,595,595,595,595,
            595,595,595,595,595,595,595,595,595,595,
            595,595,595,595,595,595,595,595,595,595,
            595,595,595,595,595,595,595,595,595,595,
            595,595,595,595,595,595,595,595,595,595,
            595,595,595,595,595,595,595,595,595,595,
            595,595,595,595,595,595,595,595,595,595,
            595,595,595,595,595,595,595,595,595,595,
            595,595,595,595,595,595,595,595,595,595,
            595,595,595,595,595,595,595,595,595,595,
            595,595,595,525,525,525,595,525,403,511,
            511,511,511,511,511,511,511,511,510,398,
            494,510,510,510,510,510,510,510,510,510,
            510,510,367,510,510,510,510,510,510,510,
            510,360,505,504,510,510,510,510,510,510,
            510,510,510,510,510,510,510,510,510,510,
            510,510,510,510,510,510,510,510,510,510,
            510,510,510,510,510,510,510,510,512,448,
            510,416,525,404,550,506,503,467,390,558,
            546,492,542,543,555,556,553,554,557,541,
            538,539,512,512,524,196,73,512,512,525,
            597,597,597,597,597,597,597,597,597,597,
            597,597,597,597,597,597,597,597,597,597,
            597,597,597,597,597,597,597,597,597,597,
            597,597,597,527,597,597,597,597,597,597,
            597,597,597,597,597,597,597,597,597,597,
            597,597,597,597,597,597,597,597,597,597,
            597,597,597,597,597,597,597,597,597,597,
            597,597,597,597,485,597,597,597,597,597,
            597,597,597,597,597,597,597,597,597,597,
            597,597,597,597,1,4,597,597,525,508,
            508,508,508,508,508,508,508,508,508,508,
            525,508,508,508,508,508,508,508,508,508,
            508,508,508,508,508,508,508,508,508,508,
            508,508,508,508,508,508,508,508,508,508,
            508,508,508,508,508,508,508,508,508,508,
            508,508,508,508,508,508,508,508,508,508,
            508,508,508,508,508,508,508,508,508,508,
            508,508,508,412,508,508,508,508,508,508,
            508,508,508,508,508,508,508,508,508,508,
            508,508,508,525,525,508,508,1,723,723,
            723,723,723,723,723,723,723,723,722,23,
            525,722,722,722,722,722,722,722,722,722,
            722,722,569,722,722,722,722,722,722,722,
            722,525,525,525,722,722,722,722,722,722,
            722,722,722,722,722,722,722,722,722,722,
            722,722,722,722,722,722,722,722,722,722,
            722,722,722,722,722,722,722,722,525,525,
            722,54,601,601,601,601,601,601,601,601,
            601,601,601,575,525,601,601,601,601,601,
            601,601,601,601,601,601,528,580,525,525,
            525,525,580,525,457,457,457,457,457,457,
            457,457,457,457,457,349,194,457,457,457,
            457,457,457,457,457,457,457,457,525,522,
            522,522,522,522,522,522,522,522,522,521,
            576,525,521,521,521,521,521,521,521,521,
            521,521,521,177,469,469,469,469,469,469,
            469,469,469,469,469,525,525,469,469,469,
            469,469,469,469,469,469,469,469,178,471,
            471,471,471,471,471,471,471,471,471,471,
            525,525,471,471,471,471,471,471,471,471,
            471,471,471,179,705,705,705,705,705,705,
            705,705,705,705,705,8,525,705,705,705,
            705,705,705,705,705,705,705,705,4,599,
            599,599,599,599,599,599,599,599,599,587,
            525,58,587,587,587,27,375,375,525,525,
            525,525,584,479,578,584,584,584,563,578,
            525,513,514,515,516,517,518,519,520,525,
            525,868,871,525,525,525,73,865,181,490,
            490,490,490,490,490,490,490,867,869,866,
            455,9,20,525,870,525,857,857,857,857,
            857,857,857,857,565,572,868,871,387,387,
            525,525,865,182,708,708,708,708,708,708,
            708,708,867,869,866,856,559,525,525,870,
            525,525,525,525,19,872,525,473,473,473,
            473,473,473,473,473,473,473,571,26,358,
            358,358,358,358,358,358,358,358,358,78,
            496,496,496,496,496,496,496,496,496,496,
            872,488,481,509,525,4,525,525,525,525,
            525,525,525,525,876,77,599,599,599,599,
            599,599,599,599,599,599,525,498,498,498,
            498,498,498,498,498,498,498,525,501,501,
            501,501,501,501,501,501,501,501,80,599,
            599,599,599,599,599,599,599,599,599,79,
            599,599,599,599,599,599,599,599,599,599,
            82,599,599,599,599,599,599,599,599,599,
            599,81,599,599,599,599,599,599,599,599,
            599,599,5,8,525,525,525,525,60,525,
            525,525,10,582,12,24,582,582,582,586,
            375,375,586,586,586,566,15,568,562,22,
            11,39,525,155,156,157,525,158,159,561,
            160,161,570,567,573,181,181,181,560,181,
            181,162,181,181,176,175,525,525,525,525,
            525,525,525,181,525,525,177,177,525,525,
            525,525,525,525,720,525,525,525,525,525,
            525,525,525,525,525,525,525,525,525,875,
            525,507,594,421,525,525,525,525,720,720,
            525,574,525,720,720
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 63,
           NT_OFFSET         = 102,
           LA_STATE_OFFSET   = 876,
           MAX_LA            = 1,
           NUM_RULES         = 351,
           NUM_NONTERMINALS  = 39,
           NUM_SYMBOLS       = 141,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 352,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 99,
           EOLT_SYMBOL       = 103,
           ACCEPT_ACTION     = 524,
           ERROR_ACTION      = 525;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
