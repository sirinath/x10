

package x10.parser;

import com.ibm.lpg.*;

class X10Lexerprs implements ParseTable, X10Lexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,3,3,1,1,1,5,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,3,2,
            2,3,1,2,3,4,1,2,2,3,
            2,3,2,2,3,3,2,3,2,2,
            0,1,2,2,2,0,2,1,2,1,
            2,2,2,3,2,3,3,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,2,3,4,1,2,3,1,1,
            1,1,1,1,1,1,1,1,1,2,
            1,2,2,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,2,2,1,1,1,
            1,1,3,2,2,2,2,2,2,2,
            2,2,1,2,2,3
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,22,22,22,22,23,23,23,
            23,23,23,23,24,24,24,24,25,25,
            25,25,26,26,27,27,20,20,5,5,
            30,30,31,31,31,13,13,13,10,10,
            10,10,10,2,2,2,2,2,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            1,1,1,1,1,1,1,1,1,1,
            11,11,11,11,11,11,11,11,7,7,
            7,7,7,7,7,7,7,7,7,7,
            6,6,34,34,34,34,35,35,35,8,
            8,9,9,12,12,15,15,29,29,28,
            28,19,19,19,36,36,36,36,36,36,
            36,36,36,36,36,36,36,36,36,36,
            36,36,36,36,36,36,36,36,36,36,
            36,36,36,16,16,16,16,16,16,16,
            16,16,16,16,16,16,16,16,16,16,
            16,16,16,16,16,16,16,16,16,16,
            16,37,37,37,37,37,37,37,37,37,
            37,37,37,37,37,37,37,37,37,37,
            37,37,37,37,37,37,37,37,37,38,
            38,38,38,38,38,38,38,38,38,38,
            38,38,38,38,38,38,38,38,38,38,
            38,38,38,38,38,38,38,14,14,14,
            14,41,41,32,32,32,32,32,32,32,
            32,33,33,33,33,33,33,33,21,21,
            21,21,21,21,21,17,17,17,17,17,
            17,17,17,18,18,18,39,308,521,520,
            520,520,413,996,79,306,871,522,205,75,
            75,75,75,959,363,365,463,448,363,4,
            5,6,947,500,368,441,852,500,447,1,
            70,70,70,70,60,65,353,970,505,70,
            75,344,505,70,75,70,509,518,518,518,
            518,856,100,839,79,436,410,77,77,77,
            77,63,67,518,1086,54,434,518,382,887,
            1007,507,416,77,1079,507,103,68,68,68,
            68,1074,62,66,518,620,68,1073,889,77,
            68,200,68,77,1100,58,64,903,468,502,
            386,945,382,608,203,202,202,202,714,472,
            739,532,682,81,472,472,480,531,81,81,
            764,482,789,490,56,202,482,482,490,490,
            814,185,906,1097,1018,511,185,185,472,511,
            1029,79,924,337,343,1040,79,1051,79,1101,
            389,1062,79,188,1083,902,1085,1102,695,726,
            406,407,727,1104,1105,1106,1108,1109,1111,1112,
            1122,1125,1126,535,535
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,97,98,0,
            100,101,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,97,
            98,0,100,101,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,95,
            96,97,98,0,0,0,102,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,0,76,77,78,79,80,81,82,
            83,84,85,86,87,88,89,90,91,92,
            93,94,95,96,99,0,0,100,101,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,73,74,75,76,77,78,79,80,
            81,82,83,84,85,86,87,88,89,90,
            91,92,93,94,99,99,97,98,0,1,
            2,3,4,5,6,7,8,9,10,11,
            0,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,69,70,71,
            72,73,74,75,76,77,78,79,80,81,
            82,83,84,85,86,87,88,89,90,91,
            92,93,94,0,0,97,98,0,1,2,
            3,4,5,6,7,8,9,10,11,0,
            0,14,15,16,17,18,19,20,21,22,
            23,24,13,26,27,28,29,30,31,32,
            33,0,0,0,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,0,0,
            73,0,1,2,3,4,5,6,7,8,
            9,10,11,74,0,14,15,16,17,18,
            19,20,21,22,23,24,12,26,0,0,
            0,0,31,0,1,2,3,4,5,6,
            7,8,9,10,11,0,0,14,15,16,
            17,18,19,20,21,22,23,24,0,1,
            2,3,4,5,6,7,8,9,10,11,
            25,0,14,15,16,17,18,19,20,21,
            22,23,24,0,1,2,3,4,5,6,
            7,8,9,10,11,0,0,14,15,16,
            17,18,19,20,21,22,23,24,0,1,
            2,3,4,5,6,7,8,9,10,11,
            0,0,14,15,16,17,18,19,20,21,
            22,23,24,0,1,2,3,4,5,6,
            7,8,9,10,11,99,0,14,15,16,
            17,18,19,20,21,22,23,24,0,1,
            2,3,4,5,6,7,8,9,10,11,
            0,0,14,15,16,0,18,19,0,0,
            0,0,11,25,26,14,15,16,13,31,
            0,1,2,3,4,5,6,7,8,0,
            0,11,12,0,0,0,0,17,0,1,
            2,3,4,5,6,7,8,27,28,29,
            30,0,0,0,34,0,1,2,3,4,
            5,6,7,8,13,13,11,12,32,33,
            0,0,17,0,1,2,3,4,5,6,
            7,8,27,28,29,30,35,0,0,34,
            0,0,0,0,0,75,0,1,2,3,
            4,5,6,7,8,9,10,13,0,1,
            2,3,4,5,6,7,8,9,10,0,
            1,2,3,4,5,6,7,8,9,10,
            75,35,36,25,0,99,0,0,0,0,
            0,0,0,0,25,0,1,2,3,4,
            5,6,7,8,9,10,0,1,2,3,
            4,5,6,7,8,9,10,0,1,2,
            3,4,5,6,7,8,9,10,0,1,
            2,3,4,5,6,7,8,9,10,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,0,0,0,0,0,0,0,0,
            0,0,0,11,0,0,14,15,16,11,
            18,19,14,15,16,13,0,13,13,0,
            0,0,0,0,0,0,0,0,0,13,
            0,0,13,13,13,12,12,12,36,12,
            12,0,12,12,0,0,0,0,0,0,
            0,0,0,12,0,0,12,12,0,0,
            0,0,0,0,71,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,77,
            0,76,78,79,0,0,0,0,95,96,
            0,72,0,100,101,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            535,605,605,605,605,605,605,605,605,605,
            605,605,605,605,605,605,605,605,605,605,
            605,605,605,605,605,605,605,605,605,605,
            605,605,605,605,605,605,605,605,605,605,
            605,605,605,605,605,605,605,605,605,605,
            605,605,605,605,605,605,605,605,605,605,
            605,605,605,605,605,605,605,605,605,605,
            605,605,605,605,605,605,605,605,604,436,
            605,605,605,605,605,605,605,605,605,605,
            605,605,605,605,605,605,605,605,605,76,
            605,605,535,603,603,603,603,603,603,603,
            603,603,603,603,603,603,603,603,603,603,
            603,603,603,603,603,603,603,603,603,603,
            603,603,603,603,603,603,603,603,603,603,
            603,603,603,603,603,603,603,603,603,603,
            603,603,603,603,603,603,603,603,603,603,
            603,603,603,603,603,603,603,603,603,603,
            603,603,603,603,603,603,603,603,603,603,
            542,608,603,603,603,603,603,603,603,603,
            603,603,603,603,603,603,603,603,603,603,
            603,71,603,603,8,610,610,610,610,610,
            610,610,610,610,610,610,610,610,610,610,
            610,610,610,610,610,610,610,610,610,610,
            610,610,610,610,610,610,610,610,610,610,
            610,610,610,610,610,610,610,610,610,610,
            610,610,610,610,610,610,610,610,610,610,
            610,610,610,610,610,610,610,610,610,610,
            610,610,610,610,610,610,610,610,610,610,
            610,610,610,610,610,610,610,610,610,610,
            610,610,610,610,610,610,610,610,610,610,
            610,610,610,535,535,535,610,535,429,521,
            521,521,521,521,521,521,521,521,520,406,
            493,520,520,520,520,520,520,520,520,520,
            520,520,373,520,520,520,520,520,520,520,
            520,412,515,514,520,520,520,520,520,520,
            520,520,520,520,520,520,520,520,520,520,
            520,520,520,520,520,520,520,520,520,520,
            520,520,520,520,520,520,520,520,522,454,
            520,445,535,424,561,516,509,457,411,569,
            557,461,553,554,566,567,564,565,568,552,
            549,550,522,522,534,201,78,522,522,535,
            612,612,612,612,612,612,612,612,612,612,
            612,612,612,612,612,612,612,612,612,612,
            612,612,612,612,612,612,612,612,612,612,
            612,612,612,537,612,612,612,612,612,612,
            612,612,612,612,612,612,612,612,612,612,
            612,612,612,612,612,612,612,612,612,612,
            612,612,612,612,612,612,612,612,612,612,
            612,612,612,612,492,612,612,612,612,612,
            612,612,612,612,612,612,612,612,612,612,
            612,612,612,612,1,4,612,612,535,518,
            518,518,518,518,518,518,518,518,518,518,
            535,518,518,518,518,518,518,518,518,518,
            518,518,518,518,518,518,518,518,518,518,
            518,518,518,518,518,518,518,518,518,518,
            518,518,518,518,518,518,518,518,518,518,
            518,518,518,518,518,518,518,518,518,518,
            518,518,518,518,518,518,518,518,518,518,
            518,518,518,366,518,518,518,518,518,518,
            518,518,518,518,518,518,518,518,518,518,
            518,518,518,535,535,518,518,1,738,738,
            738,738,738,738,738,738,738,738,737,24,
            535,737,737,737,737,737,737,737,737,737,
            737,737,580,737,737,737,737,737,737,737,
            737,535,535,535,737,737,737,737,737,737,
            737,737,737,737,737,737,737,737,737,737,
            737,737,737,737,737,737,737,737,737,737,
            737,737,737,737,737,737,737,737,535,535,
            737,55,616,616,616,616,616,616,616,616,
            616,616,616,586,535,616,616,616,616,616,
            616,616,616,616,616,616,538,591,535,535,
            535,535,591,535,472,472,472,472,472,472,
            472,472,472,472,472,354,199,472,472,472,
            472,472,472,472,472,472,472,472,535,532,
            532,532,532,532,532,532,532,532,532,531,
            587,535,531,531,531,531,531,531,531,531,
            531,531,531,182,482,482,482,482,482,482,
            482,482,482,482,482,535,535,482,482,482,
            482,482,482,482,482,482,482,482,183,490,
            490,490,490,490,490,490,490,490,490,490,
            535,535,490,490,490,490,490,490,490,490,
            490,490,490,184,720,720,720,720,720,720,
            720,720,720,720,720,9,535,720,720,720,
            720,720,720,720,720,720,720,720,4,614,
            614,614,614,614,614,614,614,614,614,598,
            535,59,602,602,598,28,382,382,535,535,
            535,535,595,397,589,600,600,595,574,589,
            535,523,524,525,526,527,528,529,530,535,
            535,883,886,535,535,535,78,880,186,502,
            502,502,502,502,502,502,502,882,884,881,
            470,10,21,535,885,535,872,872,872,872,
            872,872,872,872,576,583,883,886,468,468,
            535,535,880,187,723,723,723,723,723,723,
            723,723,882,884,881,871,570,535,535,885,
            535,535,535,535,20,887,535,500,500,500,
            500,500,500,500,500,500,500,582,27,363,
            363,363,363,363,363,363,363,363,363,83,
            505,505,505,505,505,505,505,505,505,505,
            887,494,430,519,535,4,535,535,535,535,
            535,535,535,535,891,82,614,614,614,614,
            614,614,614,614,614,614,535,507,507,507,
            507,507,507,507,507,507,507,535,511,511,
            511,511,511,511,511,511,511,511,85,614,
            614,614,614,614,614,614,614,614,614,84,
            614,614,614,614,614,614,614,614,614,614,
            87,614,614,614,614,614,614,614,614,614,
            614,86,614,614,614,614,614,614,614,614,
            614,614,5,9,535,535,535,535,61,535,
            535,535,11,593,13,25,599,599,593,597,
            382,382,601,601,597,577,16,579,573,23,
            12,40,535,160,161,162,535,163,164,572,
            165,166,581,578,584,186,186,186,571,186,
            186,167,186,186,181,180,535,535,535,535,
            535,535,535,186,535,535,182,182,535,535,
            535,535,535,535,735,535,535,535,535,535,
            535,535,535,535,535,535,535,535,535,890,
            535,517,609,485,535,535,535,535,735,735,
            535,585,535,735,735
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 63,
           NT_OFFSET         = 102,
           LA_STATE_OFFSET   = 891,
           MAX_LA            = 1,
           NUM_RULES         = 356,
           NUM_NONTERMINALS  = 41,
           NUM_SYMBOLS       = 143,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 357,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 99,
           EOLT_SYMBOL       = 103,
           ACCEPT_ACTION     = 534,
           ERROR_ACTION      = 535;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
