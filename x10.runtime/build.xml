<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [<!ENTITY buildfile SYSTEM "file:./build-user.xml">]>
<project name="x10.runtime" default="dist" basedir=".">
    &buildfile;
    <property name="x10.home" value="${basedir}/.."/>
    <property name="x10.dist.location" value="${x10.home}/x10.dist"/>
    <property name="x10.constraints.location" location="${x10.home}/x10.constraints"/>
    <property name="x10.common.location" location="${x10.home}/x10.common"/>
    <property name="build" location="${basedir}/classes"/>
    <property name="src" location="${basedir}/src-java"/>
    <property name="inc" location="${x10.dist.location}/include"/>
    <property name="lib" location="${x10.dist.location}/lib"/>
    <property name="jar" value="x10.jar"/>
    <property name="bdwgc.dir" location="${basedir}/src-cpp/bdwgc"/>
    <property name="make.exe" value="make"/>
    <property name="bash.exe" value="bash"/>
    <property name="optimize" value="false" />
    <property name="DISABLE_GC" value="false" />
    <property name="NO_CHECKS" value="false" />
    <property name="USE_BFD" value="false" />
    <property name="X10RT_MPI" value="false" />
    <path id="project.classpath">
        <path refid="mainproject.classpath"/>
        <path refid="x10.constraints.classpath"/>
        <path refid="x10.common.classpath"/>
    </path>
    <path id="mainproject.classpath">
        <pathelement location="${build}"/>
    </path>
    <path id="x10.constraints.classpath">
        <pathelement location="${x10.constraints.location}/classes"/>
    </path>
    <path id="x10.common.classpath">
        <pathelement location="${x10.common.location}/classes"/>
    </path>
    <!-- get the environment variables -->
    <property environment="env"/>

    <!-- set up to use ECJ -->
    <property name="ejc.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
    <property name="ejc.classpath" location="${lib}/ecj.jar"/>

    <target name="init">
        <mkdir dir="${build}"/>
        <javac destdir="${build}" source="1.5" target="1.5" debug="on" nowarn="on">
            <src path="${x10.common.location}/contrib/ant"/>
            <include name="Ejc.java"/>
            <include name="IfTask.java"/>
            <classpath>
              <path refid="project.classpath"/>
            </classpath>
        </javac>
        <!-- Allow using the Eclipse compiler -->
        <taskdef name="ejc" classname="Ejc">
            <classpath>
                <pathelement location="${ejc.classpath}"/>
                <pathelement location="${build}"/>
            </classpath>
        </taskdef>
        <!-- use ECJ instead of javac (needs ecj.jar on the classpath) -->
        <!--<property name="build.compiler" value="${ejc.compiler}"/>-->

        <!-- allow simpler specification of conditional tasks -->
        <taskdef name="if" classname ="IfTask" classpath="${build}" />
    </target>

    <!-- Determine whether or not we should be building with GC enabled -->
    <condition property="bdwgc.enabled">
        <and>
            <isfalse value="${DISABLE_GC}" />
            <or>
                <os family="unix" name="linux"/>
            	<os family="mac"/>
            </or>
        </and>
    </condition>
    <condition property="cppmake.gcarg" value="ENABLE_GC=1" else="DISABLE_GC=1">
        <isset property="bdwgc.enabled" />
    </condition>
    <condition property="cppmake.optimize" value="OPTIMIZE=1" else="DEBUG=1">
        <istrue value="${optimize}" />
    </condition>
    <condition property="cppmake.no_checks" value="NO_CHECKS=1" else="CHECKS=1">
        <istrue value="${NO_CHECKS}" />
    </condition>
    <condition property="cppmake.use_bfd" value="USE_BFD=1" else="AVOID_BFD=1">
        <istrue value="${USE_BFD}" />
    </condition>
    <condition property="cppmake.x10rt_mpi" value="ENABLE_X10RT_MPI=1" else="DISABLE_X10RT_MPI=1">
        <istrue value="${X10RT_MPI}" />
    </condition>
    <condition property="x10c.optimize" value="-O" else="">
        <istrue value="${optimize}" />
    </condition>
    <target name="available-procs" unless="available.procs">
        <property name="available.procs" value="2"/>
    </target>

    <target name="clean" depends="clean-java,clean-cpp"/>
    <target name="clean-java">
        <delete dir="${build}"/>
    </target>
    <target name="clean-cpp" depends="available-procs,clean-bdwgc">
        <exec executable="${make.exe}" failonerror="true" dir="${basedir}/src-cpp">
            <arg value="-j1" />
            <arg value="clean"/>
        </exec>
    </target>
    <target name="prepare-clean-bdwgc" if="bdwgc.enabled">
        <delete dir="${bdwgc.dir}/install" quiet="true"/>
        <available file="${bdwgc.dir}/src/Makefile" property="bdwgc.makefile.present"/>
    </target>
    <target name="clean-bdwgc" depends="prepare-clean-bdwgc" if="bdwgc.makefile.present">
        <exec executable="${make.exe}" failonerror="true" dir="${bdwgc.dir}/src">
            <arg value="distclean"/>
        </exec>
    </target>
    <target name="dist-java" depends="jar">
        <mkdir dir="${lib}"/>
        <copy todir="${lib}">
            <fileset dir="${build}" includes="${jar}"/>
        </copy>
    </target>
    <target name="dist-cpp" depends="build-cpp,available-procs">
        <exec executable="${make.exe}" failonerror="true" dir="${basedir}/src-cpp">
            <arg value="-j${available.procs}" />
            <arg value="install" />
            <arg value="${cppmake.gcarg}" />
            <arg value="${cppmake.optimize}" />
            <arg value="${cppmake.no_checks}" />
            <arg value="${cppmake.use_bfd}" />
            <arg value="${cppmake.x10rt_mpi}" />
        </exec>
    </target>
    <target name="dist" depends="dist-java,dist-cpp" description="generate part of the distribution">
    </target>
    <target name="jar" depends="build-xrx">
        <jar jarfile="${build}/${jar}">
            <fileset dir="${build}" includes="x10/**/*.class" excludes="${jar}"/>
            <fileset dir="${build}/gen" includes="x10/**/*.class" excludes="${jar}"/>
            <fileset dir="${basedir}/src-x10" includes="x10/**" excludes="${jar}"/>
            <fileset dir="${x10.constraints.location}/classes" includes="x10/constraint/**" excludes="x10/constraint/test/**"/>
            <fileset dir="${x10.common.location}/classes" includes="x10/**"/>
        </jar>
    </target>
    <target name="build-java" depends="init,gen-xrx">
        <ejc destdir="${build}" source="1.5" target="1.5" debug="on" nowarn="on">
            <src path="${src}"/>
            <classpath>
              <path refid="project.classpath"/>
            </classpath>
        </ejc>
    </target>
    <property name="gen" location="${build}/gen"/>
    <target name="check-xrx" depends="init">
        <fileset id="xrx.files" dir="${basedir}/src-x10" includes="**/*.x10"/>
        <uptodate property="xrx.uptodate">
            <srcfiles refid="xrx.files"/>
            <globmapper from="*.x10" to="${gen}/*.java" handledirsep="true"/>
        </uptodate>
    </target>
    <target name="gen-xrx" depends="init,check-xrx" unless="xrx.uptodate">
        <echo message="Building Java sources for XRX"/>
        <fileset id="changed.xrx.files" dir="${basedir}/src-x10" includes="**/*.x10">
            <depend targetdir="${gen}">
                <mapper type="glob" from="*.x10" to="*.java"/>
            </depend>
        </fileset>
        <pathconvert property="xrx.list" refid="changed.xrx.files" dirsep="/" pathsep=" ">
            <map from="${basedir}${file.separator}src-x10${file.separator}" to=""/>
        </pathconvert>
        <echo message="x10c -c ${xrx.list}"/>
        <exec executable="${bash.exe}" failonerror="true" dir="${basedir}/src-x10">
            <arg value="-c" />
            <arg value="'${x10.dist.location}/bin/x10c' ${x10c.optimize} -d '${gen}' -J-ea -rtdev -sourcepath . -disable CheckNativeAnnotations -commandlineonly -c ${xrx.list}" />
        </exec>
    </target>
    <target name="build-xrx" depends="init,gen-xrx,build-java">
        <!--
        <fileset id="generated.files" dir="${build}/gen" includes="**/*.java"/>
        <pathconvert property="generated.list" refid="generated.files" dirsep="/" pathsep=" "/>
        <java jar="${lib}/ecj.jar" fork="true" dir="${build}/gen" failonerror="true">
            <arg value="-1.5"/>
            <arg value="-nowarn"/>
            <arg line="-classpath .${path.separator}.."/>
            <arg line="${generated.list}"/>
        </java>
        -->
        <!--
        <javac destdir="${build}/gen" compiler="${ejc.compiler}" source="1.5" target="1.5" debug="on" nowarn="on">
            <src path="${build}/gen"/>
            <classpath>
              <path refid="project.classpath"/>
              <path>
                  <pathelement location="${build}/gen"/>
                  <pathelement location="${build}"/>
              </path>
            </classpath>
        </javac>
        -->
        <ejc destdir="${gen}" source="1.5" target="1.5" debug="on" nowarn="on">
            <src path="${gen}"/>
            <size value="50" when="more"/>
            <classpath>
              <path refid="project.classpath"/>
              <path>
                  <pathelement location="${gen}"/>
                  <pathelement location="${build}"/>
              </path>
            </classpath>
        </ejc>
    </target>

    <target name="build-cpp" depends="init,dist-bdwgc,available-procs">
        <exec executable="${make.exe}" failonerror="true" dir="${basedir}/src-cpp">
            <arg value="-j${available.procs}" />
            <arg value="${cppmake.gcarg}" />
            <arg value="${cppmake.optimize}" />
            <arg value="${cppmake.no_checks}" />
            <arg value="${cppmake.use_bfd}" />
            <arg value="${cppmake.x10rt_mpi}" />
        </exec>
    </target>

    <target name="build" depends="build-xrx,build-cpp">
        <echo message="${ant.project.name}: ${ant.file}"/>
    </target>

    <target name="build-bdwgc" depends="check-bdwgc,download-bdwgc,convert-bdwgc-paths,available-procs" unless="bdwgc.skip.build">
        <sequential>
            <echo message="Installing BDWGC to ${bdwgc.platform.dir}"/>
            <exec executable="${bash.exe}" dir="${bdwgc.dir}/src" failonerror="true">
                <arg value="${bdwgc.dir}/src/configure" />
                <arg value="-enable-threads=posix" />
                <arg value="-enable-thread-local-alloc" />
            	<!-- <arg value="CFLAGS=-D_XOPEN_SOURCE" /> -->
                <arg value="--prefix=${bdwgc.platform.dir}/install" />
            </exec>
            <exec executable="${make.exe}" dir="${bdwgc.dir}/src" failonerror="true">
                <arg value="-j${available.procs}" />
            </exec>
            <exec executable="${make.exe}" dir="${bdwgc.dir}/src" failonerror="true">
                <arg value="install" />
            </exec>
        </sequential>
    </target>

    <target name="dist-bdwgc" depends="build-bdwgc" if="bdwgc.enabled">
      <sequential>
        <mkdir dir="${lib}"/>
        <copy todir="${lib}" file="${bdwgc.dir}/install/lib/libgc.a" />
        <copy todir="${inc}">
           <fileset dir="${bdwgc.dir}/install/include" includes="**/*.h"/>
        </copy>
      </sequential>
    </target>

    <target name="download-bdwgc" depends="check-bdwgc" unless="bdwgc.skip.download">
        <sequential>
            <cvs cvsRoot=":pserver:anonymous@bdwgc.cvs.sourceforge.net:/cvsroot/bdwgc"
                 package="bdwgc"
                 tag="gc7_1"
                 dest="${bdwgc.dir}"
                 failonerror="true"
             />
            <move file="${bdwgc.dir}/bdwgc" tofile="${bdwgc.dir}/src" />
        </sequential>

    </target>

    <target name="convert-bdwgc-paths-cygwin" depends="check-bdwgc" if="running.on.cygwin">
        <exec executable="cygpath" outputproperty="bdwgc.platform.dir" errorproperty="bdwgc.conversion.errors">
            <arg value="${bdwgc.dir}" />
        </exec>
    </target>
    <target name="convert-bdwgc-paths-other" depends="check-bdwgc" unless="running.on.cygwin">
        <property name="bdwgc.platform.dir" value="${bdwgc.dir}" />
    </target>
    <target name="convert-bdwgc-paths" depends="convert-bdwgc-paths-cygwin,convert-bdwgc-paths-other" />

    <target name="check-bdwgc">
        <sequential>
            <condition property="bdwgc.skip.download">
                <or>
                    <available file="${bdwgc.dir}/src/configure" property="bdwgc.available"/>
                    <not>
                        <isset property="bdwgc.enabled" />
                    </not>
                </or>
            </condition>
            <condition property="bdwgc.skip.build">
                <or>
                    <available file="${bdwgc.dir}/install/lib/libgc.so" property="bdwgc.built"/>
                    <available file="${bdwgc.dir}/install/lib/libgc.a" property="bdwgc.built"/>
                    <not>
                        <isset property="bdwgc.enabled" />
                    </not>
                </or>
            </condition>
            <condition property="running.on.cygwin">
                <os family="windows"/>
            </condition>
        </sequential>
    </target>

</project>
