This program is designed to implement the L.U.L.E.S.H.  challenge 
problem in X10.  Details of the problem can be found at 
https://computation.llnl.gov/casc/ShockHydro/LULESH-files/spec.pdf. The 
program is based on c++ code that is locaed in the c++ directory. Further 
details can be found at https://codedesign.llnl.gov/lulesh.php.

Files - The main file is ./luleshtest.x10.  The parameters of the model are 
defined in Domain.x10.  The c++ code, which has been modified to produce the  
same output as luleshtest.x10 for debugging purposes, is c++/lulesh.cc. A 
makefile is also included in that folder.

Input - All parameters are defined in the Main method and therefore the 
program does not take any input.

Output - The program outputs the values of "t" and "dt" at the end of each 
iteration.  In addition, the program outputs the time spent in each of the 
major methods.  Finally, the code outputs the values of "x", "y", "z", "fx", 
"fy", "fz" to the file "/Users/daperlmu/Desktop/luleshx10Output" (see the 
"outputFile" variable in the Main method to change this path).  All output 
other than the values of "t" and "dt" is for debugging only and should be 
removed from the final version of the code.

Bugs - Currently the values of the force variables "fx", "fy", "fz" are not 
correct for some nodes after the first iteration.

Performance - The code is currently significantly slower than the c++ program 
it is based on.  Below is a list of factor that have been tested and whether 
or not they affect performance.
  Rails vs Arrays - Using Rails instead of Arrays where possible gives a very 
    minor performance improvement.
  Instance variable location - Moving the instance variables from a seperate 
    file (Domain.x10) to the main file or using a local class to store them 
    has no noticable performance impact.
  For loop syntax - Using explicit for loops [for (i = 0; i < x; i++)] gives 
    superior performance to using int ranges [for (i in 0..(x-1))] or enhanced 
    for loops [for (i in myArray)]
  Compiler Options vs Inline Pragmas - The best compiler flags -O, -NO_CHECKS 
    and -FLATTEN_STATEMENTS improve performance as do Inline pragmas.  
    However, the compiler runs out of memory when trying to compile with those 
    compiler options and Inline pragmas.  The current version of the code uses 
    the compiler options listed above but uses Inline pragmas only for short 
    functions that are called several times in the code.
