////////////////////////////////////////////////////
// if X10 represents java generics Java5-style
// * types erased

/* X10 */
class X10Class {
    def main() {

	val list : java.util.List[String] = new java.util.ArrayList[String]();

	val java_obj = new JavaObject();
	java_obj.fillIn(list);
	val str : String = list.get(0);	 			// ClassCastException at runtime

	val asany : Any = list;

	val b1 = asany instanceof java.util.List[String];	// true or false?
	val b2 = asany instanceof java.util.List[Double];	// b2 == b1, as types are erased
    }
}

/* Java */
class JavaObject {	
	public static void fillIn(java.util.List list) {
		list.add(new Object());
	}
}

////////////////////////////////////////////////////
// if X10 represents java generics as raw types
// the type system gives stronger guarantees,
// but does it matter for the end user (app programmer)?

/* X10 */
class X10Class {
    def main() {

	val list : java.util.List = new java.util.ArrayList();

	val java_obj = new JavaObject();
	java_obj.fillIn(list);
	val str = list.get(0) as String;	 // still gets a runtime exception on downcast
    }
}
