\contentsline {part}{I\hspace {1em}Basic X10}{1}{part.1}
\contentsline {chapter}{\numberline {1}A Whirlwind Tour of X10\xspace {}}{3}{chapter.1}
\contentsline {section}{\numberline {1.1}Hello!}{3}{section.1.1}
\contentsline {section}{\numberline {1.2}Two CPUs Are Better Than One}{6}{section.1.2}
\contentsline {subsection}{\numberline {1.2.1}$\pi $ via Monte Carlo}{6}{subsection.1.2.1}
\contentsline {subsection}{\numberline {1.2.2}Getting Started: A Serial Version}{7}{subsection.1.2.2}
\contentsline {subsection}{\numberline {1.2.3}We Can Do Better}{11}{subsection.1.2.3}
\contentsline {subsection}{\numberline {1.2.4}Enter The Second Processor}{14}{subsection.1.2.4}
\contentsline {section}{\numberline {1.3}A Thousand CPUs Are Better Than Two}{18}{section.1.3}
\contentsline {subsection}{\numberline {1.3.1}Distributing Work}{18}{subsection.1.3.1}
\contentsline {subsection}{\numberline {1.3.2}A First Try At Multi-Place Code}{20}{subsection.1.3.2}
\contentsline {chapter}{\numberline {2}A First Look At X10\xspace 's Types}{27}{chapter.2}
\contentsline {section}{\numberline {2.1}What's In An {\tt .x10} Source File?}{27}{section.2.1}
\contentsline {section}{\numberline {2.2}What's In A Class?}{29}{section.2.2}
\contentsline {subsection}{\numberline {2.2.1}Inheritance And More}{33}{subsection.2.2.1}
\contentsline {subsection}{\numberline {2.2.2}Concrete classes versus wishful thinking}{35}{subsection.2.2.2}
\contentsline {section}{\numberline {2.3}Interfaces: More Abstract Than Abstract}{36}{section.2.3}
\contentsline {subsection}{\numberline {2.3.1}How interfaces get used}{40}{subsection.2.3.1}
\contentsline {subsubsection}{ Anything you can do\dots }{42}{section*.7}
\contentsline {subsubsection}{ Why interface methods are public:}{43}{section*.8}
\contentsline {subsubsection}{ A matter of convention: }{44}{section*.9}
\contentsline {subsubsection}{ For C++ programmers: }{44}{section*.10}
\contentsline {section}{\numberline {2.4}Giving Up Inheritance To Get Efficiency}{44}{section.2.4}
\contentsline {subsection}{\numberline {2.4.1}The Problem}{44}{subsection.2.4.1}
\contentsline {subsection}{\numberline {2.4.2}The Solution}{45}{subsection.2.4.2}
\contentsline {subsection}{\numberline {2.4.3}Equality, Classes, and Structs}{47}{subsection.2.4.3}
\contentsline {subsection}{\numberline {2.4.4}Fine Points}{47}{subsection.2.4.4}
\contentsline {subsection}{\numberline {2.4.5}Performance of Structs}{49}{subsection.2.4.5}
\contentsline {chapter}{\numberline {3}A Potpourri of Types}{51}{chapter.3}
\contentsline {section}{\numberline {3.1}The Numbers Game}{51}{section.3.1}
\contentsline {subsection}{\numberline {3.1.1}The Players}{51}{subsection.3.1.1}
\contentsline {subsection}{\numberline {3.1.2}Signed versus unsigned}{52}{subsection.3.1.2}
\contentsline {section}{\numberline {3.2}String Theory}{53}{section.3.2}
\contentsline {subsection}{\numberline {3.2.1}\tt Char}{53}{subsection.3.2.1}
\contentsline {subsection}{\numberline {3.2.2}\tt String}{54}{subsection.3.2.2}
\contentsline {subsection}{\numberline {3.2.3}\tt StringBuilder}{57}{subsection.3.2.3}
\contentsline {section}{\numberline {3.3}Files}{57}{section.3.3}
\contentsline {section}{\numberline {3.4}Exceptions}{61}{section.3.4}
\contentsline {subsection}{\numberline {3.4.1}The Basics}{61}{subsection.3.4.1}
\contentsline {section}{\numberline {3.5}Functions}{65}{section.3.5}
\contentsline {subsection}{\numberline {3.5.1}Function Types}{65}{subsection.3.5.1}
\contentsline {subsection}{\numberline {3.5.2}A Few Words On Arguments}{66}{subsection.3.5.2}
\contentsline {chapter}{\numberline {4}Dealing With Concurrency}{69}{chapter.4}
\contentsline {section}{\numberline {4.1}Here, There, and Everywhere}{69}{section.4.1}
\contentsline {subsubsection}{Getting Work Done At Other Places}{70}{section*.11}
\contentsline {section}{\numberline {4.2}Concurrency: Walking {\em and} Chewing Gum}{73}{section.4.2}
\contentsline {subsection}{\numberline {4.2.1}More About Asyncs}{77}{subsection.4.2.1}
\contentsline {subsection}{\numberline {4.2.2}Finish Really Means ``Finish Everything Everywhere''}{78}{subsection.4.2.2}
\contentsline {subsection}{\numberline {4.2.3}When To Use {\tt finish}}{80}{subsection.4.2.3}
\contentsline {section}{\numberline {4.3}Data Races}{81}{section.4.3}
\contentsline {subsection}{\numberline {4.3.1}Curing Races: Atomic Power}{82}{subsection.4.3.1}
\contentsline {subsection}{\numberline {4.3.2}Efficient Atomic Expressions}{83}{subsection.4.3.2}
\contentsline {subsection}{\numberline {4.3.3}{\tt when}: Conditional Atomic Blocks}{88}{subsection.4.3.3}
\contentsline {subsection}{\numberline {4.3.4}Putting It All Together: Implementing Queues}{92}{subsection.4.3.4}
\contentsline {section}{\numberline {4.4}Asynchronous Error Recovery}{94}{section.4.4}
\contentsline {chapter}{\numberline {5}There and Back Again: Computing with {\tt at}}{99}{chapter.5}
\contentsline {section}{\numberline {5.1}Hidden Treasure: Unexpected Copies}{99}{section.5.1}
\contentsline {chapter}{\numberline {6}Fancy Types}{101}{chapter.6}
\contentsline {section}{\numberline {6.1}Constrained Types}{101}{section.6.1}
\contentsline {subsubsection}{Tracking Nulls}{102}{section*.12}
\contentsline {subsection}{\numberline {6.1.1}{\tt self}, {\tt this}, and all that}{103}{subsection.6.1.1}
\contentsline {subsubsection}{{\tt self} in nested types}{105}{section*.13}
\contentsline {subsection}{\numberline {6.1.2}{\tt val} variables instead of {\tt self}}{106}{subsection.6.1.2}
\contentsline {subsection}{\numberline {6.1.3}Guards}{107}{subsection.6.1.3}
\contentsline {subsection}{\numberline {6.1.4}Legal Constraints}{108}{subsection.6.1.4}
\contentsline {subsection}{\numberline {6.1.5}Constraints can be...}{108}{subsection.6.1.5}
\contentsline {subsubsection}{Expressions Allowed In Constraints}{109}{section*.14}
\contentsline {subsubsection}{Having your cake and eating it too}{109}{section*.15}
\contentsline {subsubsection}{Unrelated Constraints}{110}{section*.16}
\contentsline {subsection}{\numberline {6.1.6}Using Properties}{110}{subsection.6.1.6}
\contentsline {subsection}{\numberline {6.1.7}Nulls and Constraints}{112}{subsection.6.1.7}
\contentsline {subsection}{\numberline {6.1.8}Constraints and Subtyping}{113}{subsection.6.1.8}
\contentsline {subsection}{\numberline {6.1.9}STATIC\_CHECKS}{113}{subsection.6.1.9}
\contentsline {subsection}{\numberline {6.1.10}Incompleteness}{113}{subsection.6.1.10}
\contentsline {subsection}{\numberline {6.1.11}Why Generics Lose Constraints At Runtime}{114}{subsection.6.1.11}
\contentsline {section}{\numberline {6.2}Type Declarations}{114}{section.6.2}
\contentsline {section}{\numberline {6.3}Type Inference}{114}{section.6.3}
\contentsline {section}{\numberline {6.4}Generics}{114}{section.6.4}
\contentsline {section}{\numberline {6.5}Default Values}{114}{section.6.5}
\contentsline {section}{\numberline {6.6}Common Ancestors of Types}{114}{section.6.6}
\contentsline {section}{\numberline {6.7}When Types Don't Work}{114}{section.6.7}
