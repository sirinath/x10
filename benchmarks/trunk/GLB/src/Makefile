# A top-level Makefile to compile all X10 sources

# <BEGIN> user settings #

ifeq ($(shell uname -s),Darwin)
  export X10CXX?=/Users/vsaraswa/ws/head1/x10.dist/bin/x10c++
else
  export X10CXX?=/gsa/yktgsa-h1/08/pkambadu/Software/src/x10/x10-trunk/x10.dist/bin/x10c++
endif

#leave blank by default, X10 automatically chooses a transport for you. To
#force a particular implementation, please uncheck one of the other options.
export X10RTTRANSPORT	?= 
#export X10RTTRANSPORT	?= -x10rt mpi
#export X10RTTRANSPORT	?= -x10rt standalone
#export X10RTTRANSPORT	?= -x10rt pgas_lapi
#export X10RTTRANSPORT	?= -x10rt pgas_bgp
#export X10RTTRANSPORT	?= -x10rt pgas_sockets

export X10CXXFLAGS 	?= -report postcompile=5 -VERBOSE_CALLS

# <END> user settings #

ifeq ($(shell uname -s),AIX)
   include arch/aix.mk
endif
ifeq ($(shell uname -s),Linux)
   include arch/linux.mk
endif
ifeq ($(shell uname -s),Darwin)
   include arch/darwin.mk
endif
ifeq ($(firstword $(subst _, ,$(shell uname -s))),CYGWIN)
   include arch/cygwin.mk
endif
ifeq ($(BGP_CROSS_COMPILE), 1)
   include arch/bgp.mk
endif

X10RUN?=runx10
X10CXXFLAGS=-report postcompile=5 -VERBOSE_CALLS $(X10RT_TRANSPORT)

HEADERS=
        
SOURCES=sha1.c

OBJS=$(SOURCES:.c=.o)

X10_STRUCTS= 
X10_STRUCTS_CC=$(X10_STRUCTS:.x10=.cc)
X10_STRUCTS_H=$(X10_STRUCTS:.x10=.h)
X10_STRUCTS_STRUCTS_H=$(X10_STRUCTS:.x10=.struct_h)

X10_CLASSES=global/lb/GlobalRunner.x10 \
            global/lb/Counter.x10 \
            global/lb/SeqRunner.x10 \
            global/lb/Runner.x10 \
            global/lb/NetworkGenerator.x10 \
            global/lb/PAdicNumber.x10 \
            global/lb/Event.x10 \
            global/lb/TaskFrame.x10 
X10_CLASSES_CC=$(X10_CLASSES:.x10=.cc)
X10_CLASSES_H=$(X10_CLASSES:.x10=.h)

TARGET= GlobalRunner

all: ${TARGET}

GlobalRunner: global/lb/GlobalRunner.x10 \
            global/lb/Counter.x10 \
            global/lb/SeqRunner.x10 \
            global/lb/Runner.x10 \
            global/lb/NetworkGenerator.x10 \
            global/lb/PAdicNumber.x10 \
            global/lb/Event.x10 \
            global/lb/TaskFrame.x10 
	${X10CXX} ${X10CXXFLAGS} ${X10RTTRANSPORT} $< -o $@ 


test: Sha1Rand.cpp libsha1.a
	${CXX} ${CXXFLAGS} -DSHA1_TEST $< -o $@ -L. -lsha1

clean:
	rm -rf core*.* ${OBJS} ${TARGET} *.dSYM *.inc 
	rm -rf ${X10_CLASSES_CC} ${X10_CLASSES_H}
	rm -rf ${X10_STRUCTS_CC} ${X10_STRUCTS_H} ${X10_STRUCTS_STRUCTS_H}
