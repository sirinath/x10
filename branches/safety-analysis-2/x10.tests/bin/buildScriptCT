#!/bin/bash

#
# (c) Copyright IBM Coporation 2007-09
#
# $Id$
# Script that sources and builds all components required for regression.

svnUpdate() {
	if [[ ! -d $1 ]]; then
		( \
			cd $(dirname $1); \
			printf "\n## [$prog]: checking out module $(basename $1)...\n"; \
			svn co "${2}/$(basename $1)"; \
			exit $?; \
		)
		if (( $? != 0 )); then
			printf "\n[$prog: err]: checkout failed for module $(basename $1)\n"
			return 1
		else
			printf "\n## done.\n"
			return 0
		fi
	else
		( \
			cd $1; \
			printf "\n## [$prog]: updating module $(basename $1)...\n"; \
			svn update; \
			exit $?; \
		)
		if (( $? != 0 )); then
			printf "\n[$prog: err]: update failed for module $(basename $1)\n"
			return 1
		else
			printf "\n## done.\n"
			return 0
		fi
	fi
}

cvsUpdate() {
	if [[ ! -d $1 ]]; then
		( \
			cd $(dirname $1); \
			printf "\n## [$prog]: checking out module $(basename $1)...\n"; \
			cvs -d "$2" co $(basename $1); \
			exit $?; \
		)
		if (( $? != 0 )); then
			printf "\n[$prog: err]: checkout failed for module $(basename $1)\n"
			return 1
		else
			printf "\n## done.\n"
			return 0
		fi
	else
		( \
			cd $1; \
			printf "\n## [$prog]: updating module $(basename $1)...\n"; \
			cvs -d "$2" update -d; \
			exit $?; \
		)
		if (( $? != 0 )); then
			printf "\n[$prog: err]: update failed for module $(basename $1)\n"
			return 1
		else
			printf "\n## done.\n"
			return 0
		fi
	fi
}

buildX10Module() {
	printf "\n## [$prog]: building module $(basename $1)...\n"
	case "$2" in
		"polyglot")
			( \
				cd $1; \
				ant clean jar; \
				exit $?; \
			)
			;;
		"x10c")
			( \
				cd $1; \
				ant clean grammar dist; \
				exit $?; \
			)
			;;
		"x10j")
			( \
				cd $1; \
				ant clean dist-java; \
				exit $?; \
			)
			;;
		"x10")
			( \
				cd $1; \
				ant clean dist; \
				exit $?; \
			)
			;;
	esac
	if (( $? != 0 )); then
		printf "\n[$prog: err]: x10 component build failed for $(basename $1)\n"
		return 1
	else
		printf "\n## done.\n"
		return 0
	fi
}

main() {
    # source all the relevant modules -- do fresh checkout each time
	declare -i status;
	POLYGLOT_HOME=$X10_HOME/polyglot
	if [[ -d $POLYGLOT_HOME ]]; then
		rm -rf $POLYGLOT_HOME
	fi
	svnUpdate $POLYGLOT_HOME $POLYGLOT_SVNROOT
	status=$?
	if (( $status != 0 )); then
		return $status
	fi

	X10_COMMON=$X10_HOME/x10.common
	if [[ -d $X10_COMMON ]]; then
		rm -rf $X10_COMMON
	fi
	svnUpdate $X10_COMMON $X10_SVNROOT
	status=$?
	if (( $status != 0 )); then
		return $status
	fi

	X10_COMPILER=$X10_HOME/x10.compiler
	if [[ -d $X10_COMPILER ]]; then
		rm -rf $X10_COMPILER
	fi
	svnUpdate $X10_COMPILER $X10_SVNROOT
	status=$?
	if (( $status != 0 )); then
		return $status
	fi

	X10_RUNTIME=$X10_HOME/x10.runtime
	if [[ -d $X10_RUNTIME ]]; then
		rm -rf $X10_RUNTIME
	fi
	svnUpdate $X10_RUNTIME $X10_SVNROOT
	status=$?
	if (( $status != 0 )); then
		return $status
	fi

	X10_CONSTRAINTS=$X10_HOME/x10.constraints
	if [[ -d $X10_CONSTRAINTS ]]; then
		rm -rf $X10_CONSTRAINTS
	fi
	svnUpdate $X10_CONSTRAINTS $X10_SVNROOT
	status=$?
	if (( $status != 0 )); then
		return $status
	fi

	X10_DIST=$X10_HOME/x10.dist
	if [[ -d $X10_DIST ]]; then
		rm -rf $X10_DIST
	fi
	svnUpdate $X10_DIST $X10_SVNROOT
	status=$?
	if (( $status != 0 )); then
		return $status
	fi
    # post-checkout patch -- required on some platforms during batch compilation of xrx classes
	(cd $X10_DIST/bin; \
	mv x10c.in x10c.in.orig; \
	sed -e 's/-Xmx512m/-Xmx1024m/g' x10c.in.orig > x10c.in; \
	mv setupX10.in setupX10.in.orig; \
	sed -e 's/-Xmx128m/-Xmx1024m/g' setupX10.in.orig > setupX10.in; \
	)

	X10_TESTS=$X10_HOME/x10.tests
	if [[ -d $X10_TESTS ]]; then
		rm -rf $X10_TESTS
	fi
	svnUpdate $X10_TESTS $X10_SVNROOT
	status=$?
	if (( $status != 0 )); then
		return $status
	fi

    # build modules in the listed order -- some builds may be redundant
	buildX10Module $POLYGLOT_HOME polyglot
	status=$?
	if (( $status != 0 )); then
		return $status
	fi
	export LOCAL_POLYGLOT_JAR=$POLYGLOT_HOME/lib/polyglot.jar
	if [[ "$(uname -s)" == CYGWIN* ]]; then
		export LOCAL_POLYGLOT_JAR=$(cygpath -w -a $LOCAL_POLYGLOT_JAR)
	fi

	buildX10Module $X10_CONSTRAINTS x10
	status=$?
	if (( $status != 0 )); then
		return $status
	fi

	buildX10Module $X10_COMMON x10
	status=$?
	if (( $status != 0 )); then
		return $status
	fi

	buildX10Module $X10_DIST x10j
	status=$?
	if (( $status != 0 )); then
		return $status
	fi

	buildX10Module $X10_COMPILER x10
	status=$?
	if (( $status != 0 )); then
		return $status
	fi

	buildX10Module $X10_TESTS x10
	return $?
}

prog=$(basename $0)
MYDIR=$(dirname $0)

if [[ -z "$X10_HOME" ]]; then
	export X10_HOME=$(cd $MYDIR/../..; pwd)
fi

if [[ -z "$CVS_RSH" ]]; then
	export CVS_RSH=ssh
fi

if [[ -z "$X10_SVNROOT" ]]; then
	export X10_SVNROOT="http://x10.svn.sf.net/svnroot/x10/trunk"
fi

if [[ -z "$POLYGLOT_SVNROOT" ]]; then
	export POLYGLOT_SVNROOT="http://polyglot-compiler.googlecode.com/svn/trunk"
fi

main

# vim:tabstop=4:shiftwidth=4:expandtab
