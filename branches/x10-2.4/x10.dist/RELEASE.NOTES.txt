Release 2.4.0

MAJOR CHANGES

X10 v2.4 is not backwards compatible with X10 v2.3. 

The motivation for making backwards incompatible language changes with
this release of X10 is to significantly improve the ability of the X10
programmer to exploit the expanded memory capabilities of modern
computer systems.  In particular, X10 v2.4 includes an extensive
redesign of arrays and a change of the default type of unqualified
integral literals (e.g. 2) from Int to Long. Taken together these two
changes enable natural exploitation of large memories via 64-bit
addressing and Long-based indexing of arrays and similar data
structures.

Please refer to the ChangeLog section of the X10 2.4.0 language
specification for a more detailed list of language and class library
changes.

X10 2.4.0 is also the first official release of X10 with support for
IBM's BlueGene/Q system.

LIMITATIONS OF THIS RELEASE

The following features described in the 2.4 language manual do not
currently work and may be fixed in the subsequent releases:
  - Non-static type definitions as class or interface members
    (static type defs do work)

The constraint solver used by X10 typechecker is known to be incomplete 
for situations in which a constraint implies an infinite number of 
distinct constraints.

Additionally, the following features described in the language
manual do not currently work with Native X10.
  - Garbage collection on AIX
  - Non-final generic instance methods
  - Exception stack traces on Cygwin

Although greatly improved from previous releases, the X10 runtime 
still uses a modified "busy wait" loop in the worker threads that 
execute asyncs. A consequence of this is that even if a Place has 
no asyncs to execute, one worker thread in the Place will still consume
CPU cycles busy waiting for messages to arrive from the network.  

The generated C++ code requires g++ 4.2 or better to be compiled; 
we do almost all of our testing against g++ 4.4.
  + On AIX and Power/Linux, you may either use g++ 4.2 or better or 
    xlC 11.1 or better. 
  + Some versions of Xcode on MacOS default to using the Clang C++
    front-end. The generated C++ code does not compile with Clang; you
    need to use the g++ front-end.  To do this export CC=gcc; CXX=g++. 
    Note that this means that the C++ code generated by the X10
    compiler cannot be compiled using Xcode 5.  We plan to address
    this limitation in the next release of X10.

SUMMARY OF ISSUES RESOLVED IN THIS RELEASE

Below is a summary of JIRA issues addressed for the X10 2.4.0

TODO:

For the details of JIRA issues fixed in this release, see
http: TODO

Please use the X10 JIRA to report bugs, after ensuring the problem is
not already reported:
http://jira.codehaus.org/secure/IssueNavigator.jspa?reset=true&&pid=11812&resolution=-1

