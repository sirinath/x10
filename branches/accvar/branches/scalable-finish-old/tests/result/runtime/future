Baolin here again --- Call Graph
x10.lang.Future.run()V.finish.69.20: 
	One-x10.lang.Future.result()Lx10/util/GrowableRail;
	One-x10.lang.Fun_0_0.apply()Lx10/lang/Object;
	One-x10.util.GrowableRail.add(Lx10/lang/Object;)V

x10.lang.Future.result()Lx10/util/GrowableRail;: 

x10.lang.Runtime$Monitor.release()V: 
	One-x10.util.ArrayList.size()Lx10/lang/Int;
	One-x10.lang.Runtime$Lock.unlock()V
	ZerOrOne-x10.lang.Runtime.decreaseParallelism(Lx10/lang/Int;)V
	Unbounded-x10.util.Stack.pop()Lx10/lang/Runtime$Thread;
	Unbounded-x10.lang.Runtime.unpark(Lx10/lang/Runtime$Thread;)V

x10.lang.Runtime.decreaseParallelism(Lx10/lang/Int;)V: 
	ZerOrOne-x10.lang.PlaceLocalHandle.apply()Lx10/lang/Runtime;
	ZerOrOne-x10.lang.Runtime$Pool.decrease(Lx10/lang/Int;)V

x10.util.ArrayList.size()Lx10/lang/Int;: 
	One-x10.util.GrowableRail.length()Lx10/lang/Int;

x10.lang.Runtime$Latch.release()V: 
	One-x10.lang.Runtime$Lock.lock()V
	One-x10.lang.Runtime$Monitor.release()V

x10.lang.Runtime.unpark(Lx10/lang/Runtime$Thread;)V: 
	ZerOrOne-x10.lang.Runtime$Thread.unpark()V

x10.lang.Future.run()V: 
	One-x10.lang.Runtime$Latch.release()V

x10.lang.RuntimeTest.foo()V: 
	One-x10.lang.Future.<init>(Lx10/lang/Fun_0_0;)V
	One-x10.lang.Future.run()V

new table

x10.lang.Future.run()V.finish.69.20: 
	One-x10.lang.Future.result()Lx10/util/GrowableRail;
	One-x10.lang.Fun_0_0.apply()Lx10/lang/Object;
	One-x10.util.GrowableRail.add(Lx10/lang/Object;)V

x10.lang.Future.result()Lx10/util/GrowableRail;: 

x10.lang.Runtime$Monitor.release()V: 
	One-x10.util.ArrayList.size()Lx10/lang/Int;
	One-x10.lang.Runtime$Lock.unlock()V
	ZerOrOne-x10.lang.Runtime.decreaseParallelism(Lx10/lang/Int;)V
	Unbounded-x10.util.Stack.pop()Lx10/lang/Runtime$Thread;
	Unbounded-x10.lang.Runtime.unpark(Lx10/lang/Runtime$Thread;)V
	One-x10.util.GrowableRail.length()Lx10/lang/Int;
	ZerOrOne-x10.lang.PlaceLocalHandle.apply()Lx10/lang/Runtime;
	ZerOrOne-x10.lang.Runtime$Pool.decrease(Lx10/lang/Int;)V
	Unbounded-x10.lang.Runtime$Thread.unpark()V

x10.lang.Runtime.decreaseParallelism(Lx10/lang/Int;)V: 
	ZerOrOne-x10.lang.PlaceLocalHandle.apply()Lx10/lang/Runtime;
	ZerOrOne-x10.lang.Runtime$Pool.decrease(Lx10/lang/Int;)V

x10.util.ArrayList.size()Lx10/lang/Int;: 
	One-x10.util.GrowableRail.length()Lx10/lang/Int;

x10.lang.Runtime$Latch.release()V: 
	One-x10.lang.Runtime$Lock.lock()V
	One-x10.lang.Runtime$Monitor.release()V
	One-x10.util.ArrayList.size()Lx10/lang/Int;
	One-x10.lang.Runtime$Lock.unlock()V
	ZerOrOne-x10.lang.Runtime.decreaseParallelism(Lx10/lang/Int;)V
	Unbounded-x10.util.Stack.pop()Lx10/lang/Runtime$Thread;
	Unbounded-x10.lang.Runtime.unpark(Lx10/lang/Runtime$Thread;)V
	One-x10.util.GrowableRail.length()Lx10/lang/Int;
	ZerOrOne-x10.lang.PlaceLocalHandle.apply()Lx10/lang/Runtime;
	ZerOrOne-x10.lang.Runtime$Pool.decrease(Lx10/lang/Int;)V
	Unbounded-x10.lang.Runtime$Thread.unpark()V

x10.lang.Runtime.unpark(Lx10/lang/Runtime$Thread;)V: 
	ZerOrOne-x10.lang.Runtime$Thread.unpark()V

x10.lang.Future.run()V: 
	One-x10.lang.Runtime$Latch.release()V
	One-x10.lang.Runtime$Lock.lock()V
	One-x10.lang.Runtime$Monitor.release()V
	One-x10.util.ArrayList.size()Lx10/lang/Int;
	One-x10.lang.Runtime$Lock.unlock()V
	ZerOrOne-x10.lang.Runtime.decreaseParallelism(Lx10/lang/Int;)V
	Unbounded-x10.util.Stack.pop()Lx10/lang/Runtime$Thread;
	Unbounded-x10.lang.Runtime.unpark(Lx10/lang/Runtime$Thread;)V
	One-x10.util.GrowableRail.length()Lx10/lang/Int;
	ZerOrOne-x10.lang.PlaceLocalHandle.apply()Lx10/lang/Runtime;
	ZerOrOne-x10.lang.Runtime$Pool.decrease(Lx10/lang/Int;)V
	Unbounded-x10.lang.Runtime$Thread.unpark()V

x10.lang.RuntimeTest.foo()V: 
	One-x10.lang.Future.<init>(Lx10/lang/Fun_0_0;)V
	One-x10.lang.Future.run()V
	One-x10.lang.Runtime$Latch.release()V
	One-x10.lang.Runtime$Lock.lock()V
	One-x10.lang.Runtime$Monitor.release()V
	One-x10.util.ArrayList.size()Lx10/lang/Int;
	One-x10.lang.Runtime$Lock.unlock()V
	ZerOrOne-x10.lang.Runtime.decreaseParallelism(Lx10/lang/Int;)V
	Unbounded-x10.util.Stack.pop()Lx10/lang/Runtime$Thread;
	Unbounded-x10.lang.Runtime.unpark(Lx10/lang/Runtime$Thread;)V
	One-x10.util.GrowableRail.length()Lx10/lang/Int;
	ZerOrOne-x10.lang.PlaceLocalHandle.apply()Lx10/lang/Runtime;
	ZerOrOne-x10.lang.Runtime$Pool.decrease(Lx10/lang/Int;)V
	Unbounded-x10.lang.Runtime$Thread.unpark()V