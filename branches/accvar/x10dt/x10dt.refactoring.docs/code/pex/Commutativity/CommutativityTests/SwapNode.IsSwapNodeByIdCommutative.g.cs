// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Framework.Exceptions;

namespace CommutativityTests
{
    public partial class SwapNode
    {
[TestMethod]
[PexGeneratedBy(typeof(SwapNode))]
public void IsSwapNodeByIdCommutative563()
{
    List list;
    list = new List((Node)null);
    list.head = (Node)null;
    this.IsSwapNodeByIdCommutative(list, list, 0, 0);
}
[TestMethod]
[PexGeneratedBy(typeof(SwapNode))]
public void IsSwapNodeByIdCommutative56301()
{
    List list;
    List list1;
    list = new List((Node)null);
    list.head = (Node)null;
    list1 = new List((Node)null);
    list1.head = (Node)null;
    this.IsSwapNodeByIdCommutative(list, list1, 0, 0);
}
[TestMethod]
[PexGeneratedBy(typeof(SwapNode))]
public void IsSwapNodeByIdCommutative604()
{
    Node node;
    List list;
    List list1;
    node = new Node(0, (Node)null);
    node.id = 0;
    node.next = (Node)null;
    list = new List((Node)null);
    list.head = node;
    list1 = new List((Node)null);
    list1.head = node;
    this.IsSwapNodeByIdCommutative(list, list1, 0, 0);
}
[TestMethod]
[PexGeneratedBy(typeof(SwapNode))]
[Ignore]
[PexDescription("the test state was: path bounds exceeded")]
public void IsSwapNodeByIdCommutative732()
{
    Node node;
    List list;
    List list1;
    node = new Node(0, (Node)null);
    node.id = 0;
    node.next = (Node)null;
    list = new List((Node)null);
    list.head = node;
    list1 = new List((Node)null);
    list1.head = node;
    this.IsSwapNodeByIdCommutative(list, list1, 1, 0);
}
[TestMethod]
[PexGeneratedBy(typeof(SwapNode))]
public void IsSwapNodeByIdCommutative60401()
{
    Node node;
    List list;
    Node node1;
    List list1;
    node = new Node(0, (Node)null);
    node.id = 0;
    node.next = (Node)null;
    list = new List((Node)null);
    list.head = node;
    node1 = new Node(0, (Node)null);
    node1.id = 0;
    node1.next = (Node)null;
    list1 = new List((Node)null);
    list1.head = node1;
    this.IsSwapNodeByIdCommutative(list, list1, 0, 0);
}
[TestMethod]
[PexGeneratedBy(typeof(SwapNode))]
[PexRaisedException(typeof(PexAssertFailedException))]
public void IsSwapNodeByIdCommutativeThrowsPexAssertFailedException148()
{
    Node node;
    Node node1;
    List list;
    Node node2;
    List list1;
    node = new Node(0, (Node)null);
    node.id = 1;
    node.next = (Node)null;
    node1 = new Node(0, (Node)null);
    node1.id = 0;
    node1.next = node;
    list = new List((Node)null);
    list.head = node1;
    node2 = new Node(0, (Node)null);
    node2.id = 0;
    node2.next = node;
    list1 = new List((Node)null);
    list1.head = node2;
    this.IsSwapNodeByIdCommutative(list, list1, 0, 0);
}
[TestMethod]
[PexGeneratedBy(typeof(SwapNode))]
[PexRaisedException(typeof(PexAssertFailedException))]
public void IsSwapNodeByIdCommutativeThrowsPexAssertFailedException672()
{
    Node node;
    Node node1;
    Node node2;
    List list;
    Node node3;
    Node node4;
    List list1;
    node = new Node(0, (Node)null);
    node.id = 2;
    node.next = (Node)null;
    node1 = new Node(0, node);
    node1.id = 0;
    node1.next = node;
    node2 = new Node(0, (Node)null);
    node2.id = 1;
    node2.next = node1;
    list = new List((Node)null);
    list.head = node2;
    node3 = new Node(0, (Node)null);
    node3.id = 0;
    node3.next = node;
    node3.next = node;
    node4 = new Node(0, (Node)null);
    node4.id = 1;
    node4.next = node3;
    list1 = new List((Node)null);
    list1.head = node4;
    this.IsSwapNodeByIdCommutative(list, list1, 1, 1);
}
[TestMethod]
[PexGeneratedBy(typeof(SwapNode))]
[PexRaisedException(typeof(PexAssertFailedException))]
public void IsSwapNodeByIdCommutativeThrowsPexAssertFailedException61()
{
    Node node;
    Node node1;
    Node node2;
    Node node3;
    List list;
    Node node4;
    List list1;
    node = new Node(0, (Node)null);
    node.id = 1;
    node.next = (Node)null;
    node1 = new Node(0, (Node)null);
    node1.id = 2;
    node1.next = node;
    node2 = new Node(0, (Node)null);
    node2.id = 2;
    node2.next = node1;
    node3 = new Node(0, (Node)null);
    node3.id = 0;
    node3.next = node2;
    list = new List((Node)null);
    list.head = node3;
    node4 = new Node(0, (Node)null);
    node4.id = 0;
    node4.next = node2;
    list1 = new List((Node)null);
    list1.head = node4;
    this.IsSwapNodeByIdCommutative(list, list1, 0, 0);
}
    }
}
