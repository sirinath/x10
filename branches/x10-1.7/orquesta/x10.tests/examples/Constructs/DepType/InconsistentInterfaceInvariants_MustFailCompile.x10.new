/*
 *
 * (C) Copyright IBM Corporation 2006
 *
 *  This file is part of X10 Test.
 *
 */
/** Tests that invariants due to a super constraint and a sub constraint are 
 * consistent with each other.
 *@author pvarma
 *
 */

import harness.x10Test;;

public class InconsistentInterfaceInvariants_MustFailCompile extends x10Test { 

    interface public static interface Test(public val l: int, public val m: int, , public const m == l: Test{m == l} = m == l)Test{m == l} /*
 *
 * (C) Copyright IBM Corporation 2006
 *
 *  This file is part of X10 Test.
 *
 */
/** Tests that invariants due to a super constraint and a sub constraint are 
 * consistent with each other.
 *@author pvarma
 *
 */

import harness.x10Test;

public class InconsistentInterfaceInvariants_MustFailCompile extends x10Test { 

    public static interface Test (int l, int m : m == l ) {
     public public def put()(): int;/*
 *
 * (C) Copyright IBM Corporation 2006
 *
 *  This file is part of X10 Test.
 *
 */
/** Tests that invariants due to a super constraint and a sub constraint are 
 * consistent with each other.
 *@author pvarma
 *
 */

import harness.x10Test;

public class InconsistentInterfaceInvariants_MustFailCompile extends x10Test { 

    public static interface Test (int lint l/*
 *
 * (C) Copyright IBM Corporation 2006
 *
 *  This file is part of X10 Test.
 *
 */
/** Tests that invariants due to a super constraint and a sub constraint are 
 * consistent with each other.
 *@author pvarma
 *
 */

import harness.x10Test;

public class InconsistentInterfaceInvariants_MustFailCompile extends x10Test { 

    public static interface Test (int l, int mint m : m == l ) {
     public int put();
    }
    
    interface public static interface Test1(public const l == 0 && m == 1: Test1{l == 0 && m == 1} = l == 0 && m == 1)Test1{l == 0 && m == 1} extends Test { 
     public public def foo()(): int;;
    }
    
    public def run(): boolean = { 
	 return true;
    }
	
    public static def main(var args: Rail[String]): void = {
        new InconsistentInterfaceInvariants_MustFailCompile().execute();
    }
   

		
}
