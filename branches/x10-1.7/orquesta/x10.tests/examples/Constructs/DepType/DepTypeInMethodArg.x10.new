/*
 *
 * (C) Copyright IBM Corporation 2006
 *
 *  This file is part of X10 Test.
 *
 */
import harness.x10Test;;

/**
 * Check that a method can have a deptype argument and it is checked properly.
 *
 * @author vj
 */
 public class DepTypeInMethodArg extends x10Test {
	    class Test(public val i: int, public val j: int, ) /*
 *
 * (C) Copyright IBM Corporation 2006
 *
 *  This file is part of X10 Test.
 *
 */
import harness.x10Test;

/**
 * Check that a method can have a deptype argument and it is checked properly.
 *
 * @author vj
 */
 public class DepTypeInMethodArg extends x10Test {
	    class Test(int i, int j) {
	       public def this(val i: int, val j: int): Test{self.i==i&&self.j==j} = { 
                   property(i,j);
               }/*
 *
 * (C) Copyright IBM Corporation 2006
 *
 *  This file is part of X10 Test.
 *
 */
import harness.x10Test;

/**
 * Check that a method can have a deptype argument and it is checked properly.
 *
 * @author vj
 */
 public class DepTypeInMethodArg extends x10Test {
	    class Test(int iint*
 *
 * (C) Copyright IBM Corporation 2006
 *
 *  This file is part of X10 Test.
 *
 */
import harness.x10Test;

/**
 * Check that a method can have a deptype argument and it is checked properly.
 *
 * @author vj
 */
 public class DepTypeInMethodArg extends x10Test {
	    class Test(int i/*
 *
 * (C) Copyright IBM Corporation 2006
 *
 *  This file is part of X10 Test.
 *
 */
import harness.x10Test;

/**
 * Check that a method can have a deptype argument and it is checked properly.
 *
 * @author vj
 */
 public class DepTypeInMethodArg extends x10Test {
	    class Test(int i, int jint*
 *
 * (C) Copyright IBM Corporation 2006
 *
 *  This file is part of X10 Test.
 *
 */
import harness.x10Test;

/**
 * Check that a method can have a deptype argument and it is checked properly.
 *
 * @author vj
 */
 public class DepTypeInMethodArg extends x10Test {
	    class Test(int i, int j) {
	       public Test(:self.i==i&&self.j==j)(final int i, final int j) { 
                   property(i,j);
               }
	    }
	   public def m(val t1: Test, var t2: Test{i == t1.i}): boolean = { 
	      return true;
	    }
		public def run(): boolean = {
		   var x: Test{i==j} = new Test(1,1); 
		   return true;
		}
		public static def main(var args: Rail[String]): void = {
			new DepTypeInMethodArg().execute();
		}
	}
