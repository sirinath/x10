
//
// Licensed Material 
// (C) Copyright IBM Corp, 2006-2008
//

package x10.parser;

public class X10Lexerprs implements lpg.runtime.ParseTable, X10Lexersym {
    public final static int ERROR_SYMBOL = 0;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 0;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 0;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 0;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 70;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 102;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 931;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 1;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 366;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 43;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 145;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 367;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 0;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 97;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 103;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 564;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 565;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = false;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return X10Lexersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            1,0,0,0,0,0,0,0,0,0,
            0,0,0,1,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static byte prosthesesIndex[] = {0,
            27,28,35,31,32,33,13,18,20,30,
            34,19,23,29,38,42,2,3,4,5,
            6,7,8,9,10,11,12,14,15,16,
            17,21,22,24,25,26,36,37,39,40,
            43,1,41
        };
    };
    public final static byte prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,3,3,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,2,2,2,2,2,
            2,2,2,3,2,2,2,2,2,2,
            2,2,3,3,4,2,2,3,1,3,
            2,2,3,3,2,1,2,2,2,3,
            3,2,5,3,2,2,0,1,2,1,
            2,2,0,2,1,2,1,2,2,2,
            3,2,3,3,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,2,
            3,1,1,1,1,1,1,1,1,1,
            1,1,2,1,2,2,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            6,2,1,1,1,1,1,1,1,6,
            2,2,2,2,2,2,2,2,2,1,
            2,2,2,2,2,3
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,21,
            21,22,23,23,23,23,24,24,24,24,
            24,24,24,25,32,32,32,32,33,33,
            26,34,34,19,19,7,7,29,29,31,
            31,31,12,12,12,10,10,10,10,10,
            4,4,4,4,4,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,6,6,6,6,6,6,6,6,6,
            6,6,6,6,6,6,6,6,6,6,
            6,6,6,6,6,6,6,1,1,1,
            1,1,1,1,1,1,1,11,11,11,
            11,11,11,11,11,3,3,3,3,3,
            3,3,3,3,3,3,3,2,2,37,
            37,37,8,8,9,9,30,30,14,14,
            28,28,27,27,18,18,18,38,38,38,
            38,38,38,38,38,38,38,38,38,38,
            38,38,38,38,38,38,38,38,38,38,
            38,38,38,38,38,38,15,15,15,15,
            15,15,15,15,15,15,15,15,15,15,
            15,15,15,15,15,15,15,15,15,15,
            15,15,15,15,39,39,39,39,39,39,
            39,39,39,39,39,39,39,39,39,39,
            39,39,39,39,39,39,39,39,39,39,
            39,39,40,40,40,40,40,40,40,40,
            40,40,40,40,40,40,40,40,40,40,
            40,40,40,40,40,40,40,40,40,40,
            13,13,13,13,43,43,35,35,35,35,
            35,35,35,35,36,36,36,36,36,36,
            36,36,36,20,20,20,20,20,20,20,
            20,20,16,16,16,16,16,16,16,16,
            17,17,17,17,17,17,41,408,553,1077,
            86,552,552,552,456,205,82,554,634,82,
            82,82,1110,86,424,478,63,70,439,5,
            6,7,8,9,397,1037,369,1163,463,1,
            76,375,369,76,76,76,946,203,360,76,
            82,98,76,82,76,510,549,529,200,549,
            549,549,308,84,870,960,84,84,84,964,
            422,549,436,64,71,549,103,74,84,942,
            74,74,74,351,1121,86,74,1026,382,74,
            399,74,1048,444,382,549,927,86,84,444,
            995,84,943,991,65,72,1088,480,425,61,
            447,62,69,480,1166,378,1000,447,610,206,
            1132,86,205,205,205,687,493,493,493,711,
            497,497,497,735,88,88,88,759,505,505,
            505,783,509,509,509,807,515,515,515,831,
            519,519,519,1164,493,855,350,350,350,879,
            523,523,523,903,341,341,341,1099,535,1066,
            992,982,1154,1169,535,1143,86,994,1171,1170,
            532,485,342,191,1167,965,1165,1174,1172,625,
            506,1173,963,1168,1175,702,750,798,894,1176,
            1179,1183,1193,565,565
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,0,98,99,
            100,101,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,0,
            98,99,100,101,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,95,
            96,0,98,99,0,0,102,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,75,76,77,78,79,80,81,82,
            83,84,85,86,87,88,89,90,91,92,
            93,94,95,96,0,98,99,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,75,76,77,78,0,80,81,82,
            83,84,85,86,87,88,89,90,91,92,
            93,94,95,96,0,0,0,100,101,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,28,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,73,74,75,76,77,78,79,80,
            81,82,83,84,85,86,87,88,89,90,
            91,92,93,94,95,96,0,98,99,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,0,16,17,18,19,20,
            21,22,23,0,0,26,27,0,29,30,
            31,32,33,34,11,12,13,14,24,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,73,0,0,76,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,0,16,17,18,19,20,21,22,23,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,24,16,17,18,19,
            20,21,22,23,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,0,
            16,17,18,19,20,21,22,23,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,24,16,17,18,19,20,21,
            22,23,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,0,16,17,
            18,19,20,21,22,23,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,24,16,17,18,19,20,21,22,23,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,0,16,17,18,19,
            20,21,22,23,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,0,
            16,17,18,19,20,21,22,23,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,0,16,17,18,19,20,21,
            22,23,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,24,16,17,
            18,19,20,21,22,23,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,0,0,17,18,0,1,2,3,4,
            5,6,7,8,28,0,11,15,0,0,
            0,16,0,0,0,0,97,26,27,24,
            11,12,13,14,29,30,31,32,15,15,
            35,0,1,2,3,4,5,6,7,8,
            0,0,11,0,0,0,0,16,0,0,
            36,11,12,13,14,24,15,17,18,15,
            29,30,31,32,15,0,35,0,25,25,
            78,0,80,97,79,0,1,2,3,4,
            5,6,7,8,9,10,0,1,2,3,
            4,5,6,7,8,9,10,0,1,2,
            3,4,5,6,7,8,9,10,0,97,
            79,36,37,0,28,0,1,2,3,4,
            5,6,7,8,75,28,0,1,2,3,
            4,5,6,7,8,9,10,0,1,2,
            3,4,5,6,7,8,9,10,0,1,
            2,3,4,5,6,7,8,9,10,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,0,1,2,3,4,5,6,7,
            8,9,10,0,1,2,3,4,5,6,
            7,8,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,15,
            15,15,0,15,15,15,15,15,15,26,
            27,25,0,26,27,25,33,34,25,24,
            38,39,24,37,0,0,24,0,0,0,
            0,0,0,0,0,0,24,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,74,0,0,0,
            0,0,77,0,0,81,82,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            97,0,100,101,97,0,0,0,0,0,
            0,97,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            565,641,641,641,641,641,641,641,641,641,
            641,641,641,641,641,641,641,641,641,641,
            641,641,641,641,641,641,641,641,641,641,
            641,641,641,641,641,641,641,641,641,641,
            641,641,641,641,641,641,641,641,641,641,
            641,641,641,641,641,641,641,641,641,641,
            641,641,641,641,641,641,641,641,641,641,
            641,641,641,641,641,641,641,641,641,641,
            641,640,436,641,641,641,641,641,641,641,
            641,641,641,641,641,641,641,83,641,641,
            641,641,565,639,639,639,639,639,639,639,
            639,639,639,639,639,639,639,639,639,639,
            639,639,639,639,639,639,639,639,639,639,
            639,639,639,639,639,639,639,639,639,639,
            639,639,639,639,639,639,639,639,639,639,
            639,639,639,639,639,639,639,639,639,639,
            639,639,639,639,639,639,639,639,639,639,
            639,639,639,639,639,639,639,639,639,639,
            639,639,639,638,644,639,639,639,639,639,
            639,639,639,639,639,639,639,639,639,77,
            639,639,639,639,80,647,647,647,647,647,
            647,647,647,647,647,647,647,647,647,647,
            647,647,647,647,647,647,647,647,647,647,
            647,647,647,647,647,647,647,647,647,647,
            647,647,647,647,647,647,647,647,647,647,
            647,647,647,647,647,647,647,647,647,647,
            647,647,647,647,647,647,647,647,647,647,
            647,647,647,647,647,647,647,647,647,647,
            647,647,647,647,647,647,647,647,647,647,
            647,647,647,647,647,647,647,647,647,647,
            647,565,647,647,565,565,647,565,649,649,
            649,649,649,649,649,649,649,649,649,649,
            649,649,649,649,649,649,649,649,649,649,
            649,649,649,649,649,649,649,649,649,649,
            649,649,567,649,649,649,649,649,649,649,
            649,649,649,649,649,649,649,649,649,649,
            649,649,649,649,649,649,649,649,649,649,
            649,649,649,649,649,649,649,649,649,649,
            649,649,649,649,649,649,531,649,649,649,
            649,649,649,649,649,649,649,649,649,649,
            649,649,649,649,565,649,649,565,513,553,
            553,553,553,553,553,553,553,553,552,552,
            552,552,538,552,552,552,552,552,552,552,
            552,415,460,552,552,395,552,552,552,552,
            552,552,411,545,544,554,554,552,552,552,
            552,552,552,552,552,552,552,552,552,552,
            552,552,552,552,552,552,552,552,552,552,
            552,552,552,552,552,552,552,552,552,552,
            552,554,476,552,474,537,565,462,546,539,
            530,429,600,588,533,585,597,598,595,596,
            599,583,580,581,565,361,565,554,554,565,
            549,549,549,549,549,549,549,549,549,549,
            549,549,549,549,549,549,549,549,549,549,
            549,549,549,623,549,549,549,549,549,549,
            549,549,549,549,549,549,549,549,549,549,
            549,549,549,549,549,549,549,549,549,549,
            549,549,549,549,549,549,549,549,549,549,
            549,549,549,549,549,549,549,549,549,549,
            549,549,549,549,549,549,549,549,406,549,
            549,549,549,549,549,549,549,549,549,549,
            549,549,549,549,549,549,565,549,549,1,
            771,771,771,771,771,771,771,771,771,771,
            770,770,770,770,565,770,770,770,770,770,
            770,770,770,67,565,770,770,565,770,770,
            770,770,770,770,628,635,635,628,568,770,
            770,770,770,770,770,770,770,770,770,770,
            770,770,770,770,770,770,770,770,770,770,
            770,770,770,770,770,770,770,770,770,770,
            770,770,770,565,565,770,565,493,493,493,
            493,493,493,493,493,493,493,493,493,493,
            493,167,493,493,493,493,493,493,493,493,
            565,497,497,497,497,497,497,497,497,497,
            497,497,497,497,497,189,497,497,497,497,
            497,497,497,497,60,653,653,653,653,653,
            653,653,653,653,653,653,653,653,653,168,
            653,653,653,653,653,653,653,653,565,505,
            505,505,505,505,505,505,505,505,505,505,
            505,505,505,189,505,505,505,505,505,505,
            505,505,565,509,509,509,509,509,509,509,
            509,509,509,509,509,509,509,169,509,509,
            509,509,509,509,509,509,565,515,515,515,
            515,515,515,515,515,515,515,515,515,515,
            515,189,515,515,515,515,515,515,515,515,
            565,519,519,519,519,519,519,519,519,519,
            519,519,519,519,519,565,519,519,519,519,
            519,519,519,519,565,915,915,915,915,915,
            915,915,915,915,915,915,915,915,915,565,
            915,915,915,915,915,915,915,915,565,523,
            523,523,523,523,523,523,523,523,523,523,
            523,523,523,170,523,523,523,523,523,523,
            523,523,565,906,906,906,906,906,906,906,
            906,906,906,906,906,906,906,189,906,906,
            906,906,906,906,906,906,59,651,651,651,
            651,651,651,651,651,651,651,630,637,637,
            630,4,26,447,447,565,555,556,557,558,
            559,560,561,562,452,565,920,604,565,68,
            565,917,204,29,11,565,564,626,626,923,
            629,636,636,629,919,921,918,489,606,610,
            922,565,907,907,907,907,907,907,907,907,
            7,22,920,19,27,565,565,917,565,24,
            601,627,634,634,627,923,617,447,447,605,
            919,921,918,501,615,565,922,565,930,547,
            929,565,548,4,924,565,382,382,382,382,
            382,382,382,382,382,382,28,369,369,369,
            369,369,369,369,369,369,369,90,444,444,
            444,444,444,444,444,444,444,444,565,1,
            924,527,466,565,550,189,532,532,532,532,
            532,532,532,532,621,931,89,651,651,651,
            651,651,651,651,651,651,651,565,480,480,
            480,480,480,480,480,480,480,480,565,535,
            535,535,535,535,535,535,535,535,535,92,
            651,651,651,651,651,651,651,651,651,651,
            91,651,651,651,651,651,651,651,651,651,
            651,94,651,651,651,651,651,651,651,651,
            651,651,93,651,651,651,651,651,651,651,
            651,651,651,190,756,756,756,756,756,756,
            756,756,10,85,14,25,12,85,21,13,
            17,42,44,43,202,171,565,565,172,613,
            614,611,173,616,612,603,618,620,619,59,
            59,927,174,59,59,928,485,485,551,189,
            768,768,189,602,565,565,189,565,565,565,
            565,565,565,565,565,565,189,565,565,565,
            565,565,565,565,565,565,565,565,565,565,
            565,565,565,565,565,565,768,565,565,565,
            565,565,622,565,565,646,418,565,565,565,
            565,565,565,565,565,565,565,565,565,565,
            4,565,768,768,4,565,565,565,565,565,
            565,10
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
