/*
 *  This file is part of the X10 project (http://x10-lang.org).
 *
 *  This file is licensed to You under the Eclipse Public License (EPL);
 *  You may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *      http://www.opensource.org/licenses/eclipse-1.0.php
 *
 *  (C) Copyright IBM Corporation 2006-2010.
 */

package x10.parser;

public class X10Lexerprs implements lpg.runtime.ParseTable, X10Lexersym {
    public final static int ERROR_SYMBOL = 0;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 0;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 0;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 0;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 72;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 102;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 954;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 1;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 374;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 46;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 148;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 375;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 0;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 98;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 103;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 579;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 580;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = false;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return X10Lexersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,1,0,0,0,0,0,0,0,
            0,0,0,0,0,0,1,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static byte prosthesesIndex[] = {0,
            30,31,38,34,35,36,15,21,23,33,
            37,18,19,22,26,32,41,45,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,16,17,20,24,25,27,28,29,39,
            40,42,43,46,1,44
        };
    };
    public final static byte prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,3,3,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,2,2,2,
            2,2,2,2,2,3,2,2,2,2,
            2,2,2,2,3,3,4,2,2,3,
            1,3,2,2,3,3,2,3,3,2,
            1,2,2,2,3,3,2,5,3,2,
            2,0,1,2,1,2,2,0,2,1,
            2,1,2,2,2,3,2,3,3,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,2,3,1,1,1,1,
            1,1,1,1,1,1,1,1,1,2,
            1,2,2,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,6,2,1,
            1,1,1,1,1,1,6,2,2,2,
            2,2,2,2,2,2,1,2,2,2,
            2,2,1,3
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,23,23,24,25,26,26,27,27,27,
            27,28,28,28,28,28,28,28,29,35,
            35,35,35,36,36,30,37,37,21,21,
            7,7,33,33,34,34,34,14,14,14,
            10,10,10,10,10,4,4,4,4,4,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,6,6,6,6,
            6,6,6,6,6,6,6,6,6,6,
            6,6,6,6,6,6,6,6,6,6,
            6,6,1,1,1,1,1,1,1,1,
            1,1,11,11,11,11,11,11,11,11,
            3,3,3,3,3,3,3,3,3,3,
            3,3,2,2,40,40,40,8,8,9,
            9,12,12,13,13,16,16,32,32,31,
            31,20,20,20,41,41,41,41,41,41,
            41,41,41,41,41,41,41,41,41,41,
            41,41,41,41,41,41,41,41,41,41,
            41,41,41,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,42,42,42,42,42,42,42,42,42,
            42,42,42,42,42,42,42,42,42,42,
            42,42,42,42,42,42,42,42,42,43,
            43,43,43,43,43,43,43,43,43,43,
            43,43,43,43,43,43,43,43,43,43,
            43,43,43,43,43,43,43,15,15,15,
            15,46,46,38,38,38,38,38,38,38,
            38,39,39,39,39,39,39,39,39,39,
            22,22,22,22,22,22,22,22,22,18,
            18,18,18,18,18,18,18,19,19,19,
            19,19,19,19,44,308,568,1080,91,567,
            567,567,479,610,213,569,947,212,212,212,
            711,465,465,465,407,383,1183,459,469,5,
            6,7,8,9,10,11,444,1078,65,475,
            1,81,472,99,81,81,81,510,564,367,
            81,564,564,564,1166,81,358,81,687,440,
            440,440,410,89,432,564,89,89,89,564,
            735,93,93,93,1167,994,447,103,79,634,
            89,79,79,79,210,201,428,79,66,1069,
            564,440,79,946,79,759,500,500,500,976,
            545,89,205,87,89,956,87,87,87,927,
            91,445,396,67,74,1038,377,70,77,526,
            410,529,377,533,982,529,783,504,504,504,
            807,514,514,514,831,518,518,518,1113,91,
            87,1124,91,87,855,357,357,357,879,522,
            522,522,903,348,348,348,999,1135,91,1027,
            508,1049,511,1168,68,75,508,984,511,1091,
            527,69,76,1102,551,1157,527,625,349,1170,
            551,1146,91,962,1006,964,196,1174,1172,1173,
            981,1169,1175,1205,726,1178,1212,1177,1171,1186,
            774,822,870,918,1195,1213,1214,1215,580,580
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,97,0,99,
            100,101,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,97,
            0,99,100,101,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,95,
            96,97,0,99,0,0,102,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,75,76,77,78,0,80,81,82,
            83,84,85,86,87,88,89,90,91,92,
            93,94,95,96,97,0,0,100,101,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,73,74,75,76,77,78,79,80,
            81,82,83,84,85,86,87,88,89,90,
            91,92,93,94,95,96,97,0,99,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,0,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,73,74,75,76,77,78,79,80,
            81,82,83,84,85,86,87,88,89,90,
            91,92,93,94,95,96,97,0,99,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,0,16,17,18,19,20,
            21,22,23,0,25,26,27,28,0,15,
            31,32,33,34,35,0,0,0,15,0,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,73,0,0,76,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,77,16,17,18,19,20,21,22,23,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,0,16,17,18,19,
            20,21,22,23,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,24,
            16,17,18,19,20,21,22,23,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,0,16,17,18,19,20,21,
            22,23,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,24,16,17,
            18,19,20,21,22,23,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,0,16,17,18,19,20,21,22,23,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,24,16,17,18,19,
            20,21,22,23,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,0,
            16,17,18,19,20,21,22,23,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,24,16,17,18,19,20,21,
            22,23,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,0,16,17,
            18,19,20,21,22,23,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,24,0,17,18,0,0,1,2,3,
            4,5,6,7,8,0,30,11,0,0,
            15,0,16,0,0,0,11,12,13,14,
            24,25,17,18,29,0,15,31,32,33,
            0,0,36,0,1,2,3,4,5,6,
            7,8,29,0,11,15,15,0,0,16,
            25,26,27,28,0,0,0,24,25,11,
            12,13,14,0,31,32,33,37,25,36,
            15,28,0,0,98,79,0,1,2,3,
            4,5,6,7,8,9,10,0,1,2,
            3,4,5,6,7,8,9,10,0,1,
            2,3,4,5,6,7,8,9,10,78,
            0,80,79,37,38,0,0,30,0,1,
            2,3,4,5,6,7,8,0,30,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,0,1,2,3,4,5,6,7,
            8,9,10,0,1,2,3,4,5,6,
            7,8,9,10,0,1,2,3,4,5,
            6,7,8,9,10,0,1,2,3,4,
            5,6,7,8,9,10,0,1,2,3,
            4,5,6,7,8,0,0,0,0,0,
            0,0,0,0,0,98,0,0,11,12,
            13,14,0,15,15,0,15,15,15,15,
            25,26,27,28,0,25,26,27,28,34,
            35,29,29,29,0,39,40,30,26,27,
            38,0,0,0,0,0,0,0,24,15,
            0,0,0,0,0,0,15,0,0,0,
            0,0,0,0,0,0,24,24,24,0,
            74,0,0,0,75,0,0,0,0,81,
            82,0,0,0,0,0,0,0,0,0,
            0,0,0,98,0,0,100,101,98,0,
            0,0,0,0,98,0,0,0,0,0,
            0,0,0,98,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            580,661,661,661,661,661,661,661,661,661,
            661,661,661,661,661,661,661,661,661,661,
            661,661,661,661,661,661,661,661,661,661,
            661,661,661,661,661,661,661,661,661,661,
            661,661,661,661,661,661,661,661,661,661,
            661,661,661,661,661,661,661,661,661,661,
            661,661,661,661,661,661,661,661,661,661,
            661,661,661,661,661,661,661,661,661,661,
            661,660,447,661,661,661,661,661,661,661,
            661,661,661,661,661,661,661,661,88,661,
            661,661,580,659,659,659,659,659,659,659,
            659,659,659,659,659,659,659,659,659,659,
            659,659,659,659,659,659,659,659,659,659,
            659,659,659,659,659,659,659,659,659,659,
            659,659,659,659,659,659,659,659,659,659,
            659,659,659,659,659,659,659,659,659,659,
            659,659,659,659,659,659,659,659,659,659,
            659,659,659,659,659,659,659,659,659,659,
            659,659,659,658,664,659,659,659,659,659,
            659,659,659,659,659,659,659,659,659,659,
            82,659,659,659,85,667,667,667,667,667,
            667,667,667,667,667,667,667,667,667,667,
            667,667,667,667,667,667,667,667,667,667,
            667,667,667,667,667,667,667,667,667,667,
            667,667,667,667,667,667,667,667,667,667,
            667,667,667,667,667,667,667,667,667,667,
            667,667,667,667,667,667,667,667,667,667,
            667,667,667,667,667,667,667,667,667,667,
            667,667,667,667,667,667,667,667,667,667,
            667,667,667,667,667,667,667,667,667,667,
            667,667,580,667,580,580,667,580,424,568,
            568,568,568,568,568,568,568,568,567,567,
            567,567,557,567,567,567,567,567,567,567,
            567,417,567,567,567,567,463,485,567,567,
            567,567,567,413,560,559,569,569,567,567,
            567,567,567,567,567,567,567,567,567,567,
            567,567,567,567,567,567,567,567,567,567,
            567,567,567,567,567,567,567,567,567,567,
            567,569,549,567,547,555,580,494,561,558,
            553,449,617,605,953,554,602,614,615,612,
            613,616,600,597,598,580,580,569,569,580,
            669,669,669,669,669,669,669,669,669,669,
            669,669,669,669,669,669,669,669,669,669,
            669,669,669,669,669,669,669,669,669,669,
            669,669,669,669,669,582,669,669,669,669,
            669,669,669,669,669,669,669,669,669,669,
            669,669,669,669,669,669,669,669,669,669,
            669,669,669,669,669,669,669,669,669,669,
            669,669,669,669,669,669,669,669,537,669,
            669,669,669,669,669,669,669,669,669,669,
            669,669,669,669,669,669,669,580,669,580,
            564,564,564,564,564,564,564,564,564,564,
            564,564,564,564,564,564,564,564,564,564,
            564,564,564,580,564,564,564,564,564,564,
            564,564,564,564,564,564,564,564,564,564,
            564,564,564,564,564,564,564,564,564,564,
            564,564,564,564,564,564,564,564,564,564,
            564,564,564,564,564,564,564,564,564,564,
            564,564,564,564,564,564,564,564,386,564,
            564,564,564,564,564,564,564,564,564,564,
            564,564,564,564,564,564,564,580,564,1,
            793,793,793,793,793,793,793,793,793,793,
            792,792,792,792,27,792,792,792,792,792,
            792,792,792,31,792,792,792,792,580,631,
            792,792,792,792,792,580,580,580,623,580,
            792,792,792,792,792,792,792,792,792,792,
            792,792,792,792,792,792,792,792,792,792,
            792,792,792,792,792,792,792,792,792,792,
            792,792,792,580,580,792,580,440,440,440,
            440,440,440,440,440,440,440,440,440,440,
            440,639,440,440,440,440,440,440,440,440,
            580,465,465,465,465,465,465,465,465,465,
            465,465,465,465,465,580,465,465,465,465,
            465,465,465,465,62,673,673,673,673,673,
            673,673,673,673,673,673,673,673,673,583,
            673,673,673,673,673,673,673,673,580,500,
            500,500,500,500,500,500,500,500,500,500,
            500,500,500,172,500,500,500,500,500,500,
            500,500,580,504,504,504,504,504,504,504,
            504,504,504,504,504,504,504,194,504,504,
            504,504,504,504,504,504,580,514,514,514,
            514,514,514,514,514,514,514,514,514,514,
            514,173,514,514,514,514,514,514,514,514,
            580,518,518,518,518,518,518,518,518,518,
            518,518,518,518,518,194,518,518,518,518,
            518,518,518,518,580,937,937,937,937,937,
            937,937,937,937,937,937,937,937,937,174,
            937,937,937,937,937,937,937,937,580,522,
            522,522,522,522,522,522,522,522,522,522,
            522,522,522,194,522,522,522,522,522,522,
            522,522,580,928,928,928,928,928,928,928,
            928,928,928,928,928,928,928,175,928,928,
            928,928,928,928,928,928,61,671,671,671,
            671,671,671,671,671,671,671,650,657,657,
            650,194,580,529,529,29,580,570,571,572,
            573,574,575,576,577,9,531,942,580,580,
            622,24,939,21,580,580,647,654,654,647,
            945,390,529,529,562,4,634,941,943,940,
            13,28,944,580,929,929,929,929,929,929,
            929,929,952,63,942,627,621,580,72,939,
            396,445,445,396,580,23,580,945,496,648,
            655,655,648,580,941,943,940,618,646,944,
            633,646,580,580,4,946,580,508,508,508,
            508,508,508,508,508,508,508,30,377,377,
            377,377,377,377,377,377,377,377,95,511,
            511,511,511,511,511,511,511,511,511,951,
            580,563,946,543,539,580,580,565,194,545,
            545,545,545,545,545,545,545,580,954,94,
            671,671,671,671,671,671,671,671,671,671,
            580,527,527,527,527,527,527,527,527,527,
            527,580,551,551,551,551,551,551,551,551,
            551,551,97,671,671,671,671,671,671,671,
            671,671,671,96,671,671,671,671,671,671,
            671,671,671,671,99,671,671,671,671,671,
            671,671,671,671,671,98,671,671,671,671,
            671,671,671,671,671,671,195,776,776,776,
            776,776,776,776,776,90,12,73,16,26,
            90,15,14,19,45,579,211,368,649,656,
            656,649,64,630,632,209,629,628,620,636,
            61,61,61,61,176,61,61,61,61,428,
            428,949,950,566,44,790,790,640,645,645,
            619,46,177,178,179,580,580,580,194,635,
            580,580,580,580,580,580,637,580,580,580,
            580,580,580,580,580,580,194,194,194,580,
            790,580,580,580,638,580,580,580,580,666,
            455,580,580,580,580,580,580,580,580,580,
            580,580,580,4,580,580,790,790,4,580,
            580,580,580,580,1,580,580,580,580,580,
            580,580,580,12
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
