'''Places'''

An X10 place is a repository for data and activities. Each place is to be thought of as a locality boundary: the activities running in a place may access data items located at that place with the efficiency of on-chip access. Accesses to remote places may take orders of magnitude longer.

In X10 v0.5, the set of places available to a computation is determined at the time that the program is run and remains fixed through the run of the program. The number of places available to a computation may be determined by querying a run-time int constant (place.MAX_PLACES).

All scalar objects created during program execution are located in one place, though they may be accessed from other places. Aggregate objects (arrays) may be distributed across multiple places using distributions. 

The set of all places in a running instance of an X10 program is denoted by place.places. (This set may be used to define distributions, for instance.)

The set of all places is totally ordered. Places may be used as keys in hash-tables. Like a value object, a place is "unlocated". 

X10 permits user-definable place constants (= final variables = variables that must be assigned before use, and can be assigned only once). Place constants may be used in type expressions after the "@" sign. For instance, consider the following class definition:

----
 public class Cell<BaseType@P> {
  BaseType@P value;

  public Cell(BaseType@P value) {  
     this.value := value;
  }

  public BaseType@P getValue() {
     return this.value;
  }

  public void setValue(BaseType@P value) {
     this.value := value;
  }
 }
----

The usage of this class would be:

  Cell<Point@Q> cell = new Cell<Point@Q>(new Point@Q());

Cell is a generic class whose single located type parameter specifies type and location information. At runtime, BaseType will be replaced by an unlocated type (e.g. a class or an interface) and P will be replaced by a place constant (e.g. here). P may be used in the body of Cell anywhere a place expression may be used. See XtenTypes.

