/*
 *
 * (C) Copyright IBM Corporation 2006
 *
 *  This file is part of X10 Test.
 *
 */
import harness.x10Test;;

/**
 * Check that a cast involving types which are not related by supertype or subtype
 * relation fails
 *
 * @author pvarma
 */
public class CastChecking1_MustFailCompile extends x10Test {
	class Test(public val i: int, public val j: int, ) /*
 *
 * (C) Copyright IBM Corporation 2006
 *
 *  This file is part of X10 Test.
 *
 */
import harness.x10Test;

/**
 * Check that a cast involving types which are not related by supertype or subtype
 * relation fails
 *
 * @author pvarma
 */
public class CastChecking1_MustFailCompile extends x10Test {
	class Test(int i, int j) {
		def this(val i: int, val j: int): Test{self.i==i && self.j==j} = {
			property(i,j);
		}/*
 *
 * (C) Copyright IBM Corporation 2006
 *
 *  This file is part of X10 Test.
 *
 */
import harness.x10Test;

/**
 * Check that a cast involving types which are not related by supertype or subtype
 * relation fails
 *
 * @author pvarma
 */
public class CastChecking1_MustFailCompile extends x10Test {
	class Test(int iint*
 *
 * (C) Copyright IBM Corporation 2006
 *
 *  This file is part of X10 Test.
 *
 */
import harness.x10Test;

/**
 * Check that a cast involving types which are not related by supertype or subtype
 * relation fails
 *
 * @author pvarma
 */
public class CastChecking1_MustFailCompile extends x10Test {
	class Test(int i/*
 *
 * (C) Copyright IBM Corporation 2006
 *
 *  This file is part of X10 Test.
 *
 */
import harness.x10Test;

/**
 * Check that a cast involving types which are not related by supertype or subtype
 * relation fails
 *
 * @author pvarma
 */
public class CastChecking1_MustFailCompile extends x10Test {
	class Test(int i, int jint*
 *
 * (C) Copyright IBM Corporation 2006
 *
 *  This file is part of X10 Test.
 *
 */
import harness.x10Test;

/**
 * Check that a cast involving types which are not related by supertype or subtype
 * relation fails
 *
 * @author pvarma
 */
public class CastChecking1_MustFailCompile extends x10Test {
	class Test(int i, int j) {
		Test(:self.i==i && self.j==j)(final int i, final int j) {
			property(i,j);
		}
	}
		
	class Test2(public val k: int, ) extends Test{i==j} /*
 *
 * (C) Copyright IBM Corporation 2006
 *
 *  This file is part of X10 Test.
 *
 */
import harness.x10Test;

/**
 * Check that a cast involving types which are not related by supertype or subtype
 * relation fails
 *
 * @author pvarma
 */
public class CastChecking1_MustFailCompile extends x10Test {
	class Test(int i, int j) {
		Test(:self.i==i && self.j==j)(final int i, final int j) {
			property(i,j);
		}
	}
		
	class Test2(int k) extends Test(:i==j) {
		def this(val k: int): Test2{self.i==k&&self.j==k&&self.k==k} = {
			super(k,k);
			property(k);
		}/*
 *
 * (C) Copyright IBM Corporation 2006
 *
 *  This file is part of X10 Test.
 *
 */
import harness.x10Test;

/**
 * Check that a cast involving types which are not related by supertype or subtype
 * relation fails
 *
 * @author pvarma
 */
public class CastChecking1_MustFailCompile extends x10Test {
	class Test(int i, int j) {
		Test(:self.i==i && self.j==j)(final int i, final int j) {
			property(i,j);
		}
	}
		
	class Test2(int kint*
 *
 * (C) Copyright IBM Corporation 2006
 *
 *  This file is part of X10 Test.
 *
 */
import harness.x10Test;

/**
 * Check that a cast involving types which are not related by supertype or subtype
 * relation fails
 *
 * @author pvarma
 */
public class CastChecking1_MustFailCompile extends x10Test {
	class Test(int i, int j) {
		Test(:self.i==i && self.j==j)(final int i, final int j) {
			property(i,j);
		}
	}
		
	class Test2(int k) extends Test(:i==j) {
		Test2(:self.i==k&&self.j==k&&self.k==k)(final int k) {
			super(k,k);
			property(k);
		}
	}
	
	public def run(): boolean = {
		var a: Test2{k==1&&i==j} = new Test2(1);
		var b: Test{i==j} = a;
		var c: Test = (Test) 5;  // must fail compile
	   return true;
	}
	public static def main(var args: Rail[String]): void = {
		new CastChecking1_MustFailCompile().execute();
	}
}
