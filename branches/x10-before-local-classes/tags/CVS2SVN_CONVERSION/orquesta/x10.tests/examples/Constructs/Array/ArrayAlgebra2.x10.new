/*
 *
 * (C) Copyright IBM Corporation 2006
 *
 *  This file is part of X10 Test.
 *
 */
import harness.x10Test;;

/**
 * Constant promotions to arrays: (D n)
 * disjoint union and overlay of arrays
 * array lift, scan and reduce.
 *
 * This one tests arrays of booleans.
 *
 * @author kemal 4/2005
 */
public class ArrayAlgebra2 extends x10Test {

	public const N: int = 24;
	def makeArray(var D: dist, val k: boolean): Array[boolean] = {
		return new Array[boolean](D, (var p: point): boolean => { return k; });
	}

	public def run(): boolean = {
		final val D: dist = distmakeBlockCyclic([0..N-1], 2);
		final val D01: dist = D | [0..N/2-1];
		final val D23: dist = D | [(N/2)..N-1];
		final val D0: dist = D | [0..N/4-1];
		final val D1: dist = D | [(N/4)..N/2-1];
		final val D2: dist = D | [(N/2)..3*N/4-1];
		final val D3: dist = D | [(3*N/4)..N-1];
		final val ia1: Array[boolean] = makeArray(D, false).overlay((makeArray(D01, true) || makeArray(D23, false))
					.overlay(makeArray(D3, true)).overlay(makeArray(D0, false)));
		arrEq(ia1 | D0, makeArray(D0, false));
		arrEq(ia1 | D1, makeArray(D1, true));
		arrEq(ia1 | D2, makeArray(D2, false));
		arrEq(ia1 | D3, makeArray(D3, true));
		// We should eventually support the following:
		//chk(ia1.or() == true);
		//chk(ia1.and() == false);
		//chk(ia1.xor() == false);
		//TODO: scan does not need a unit operand
		arrEq(ia1.scan(booleanArray.or,false),
				new Array[boolean](D, (var point [i]: point): boolean => {return (ia1 | [0..i]).reduce(booleanArray.or,false);}));
		arrEq((makeArray(D0, true) || makeArray(D1,false)).lift(booleanArray.xor,makeArray(D01, true)),
				(makeArray(D0, false) || makeArray(D1,true)));

		// a1 || a2 where a1, a2 are boolean arrays
		//causes ambiguity with array disjoint union
		//arrEq(makeArray(D01, false) | makeArray(D01, false),
		//      makeArray(D01,false) & makeArray(D01, true));

		return true;
	}

	/**
	 * Throw an error iff x and y are not arrays with same
	 * content and dist
	 */
	static def arrEq(val x: Array[boolean], val y: Array[boolean]): void = {
		chk(x.dist.equals(y.dist));
		finish ateach (val p: point in x) chk(x(p) == y(p));
	}

	public static def main(var args: Rail[String]): void = {
		new ArrayAlgebra2().execute();
	}
}
