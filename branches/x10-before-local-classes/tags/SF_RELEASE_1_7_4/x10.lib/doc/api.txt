

                    X10Lib : The X10 Runtime System

                              Version 0.6


                APPLICATION PROGRAMMING INTERFACE (API)
                ---------------------------------------

                  (c) Copyright IBM Corporation 2007



This document describes the X10Lib's Application Programming Interface
(API) that is part of the current release.



############################################################
#                                                          #
#                   MESSAGING LAYER                        #
#                                                          #
############################################################



================================
01) INITIALIZATION & TERMINATION
================================


/// INITIALIZATION ///

Purpose: Initializes the X10 Runtime Library.

Library: libx10.a

C++ syntax:

	#include <x10/x10lib.h>
	x10_err_t x10lib::Init(handlers, n)
		x10_async_handler_t *handlers;
		int n;

C syntax:

	#include <x10/x10lib.h>
	x10_err_t x10_init(handlers, n)
		x10_async_handler_t *handlers;
		int n;

Parameters:

	INPUT
	-----
	handlers	Specifies a set of handlers that needs to be registered for
				remote async execution.
	n			The number of handlers that need to be registered.

Description:

	Initializes data structures needed for communication as well as registers
	handler addresses into an internal handler table, if handlers argument is
	not NULL and n is > 0.
	This method/function must be called before placing any other X10Lib calls.

Return values:

	X10_OK			Indicates the method/function call completed successfully.
	X10_ERR_COM 	Unable to create the context for communication.


Note: Currently async handler registration is done through other methods.


/// TERMINATION ///

Purpose: Terminates and cleans up the X10 Runtime Context.

Library: libx10.a

C++ syntax:

	#include <x10/x10lib.h>
	x10_err_t x10lib::Finalize()

C syntax:

	#include <x10/x10lib.h>
	x10_err_t x10_finalize()

Description:

	This method/function must be called after all the X10Lib calls are made.
	It is an error when any X10Lib calls are made after this routine is called.
	Internally, it terminates and cleans up the context used for communication.

Return values:

	X10_OK			Indicates the method/function call completed successfully.
	X10_ERR_INIT	This method was called without initializing the X10Lib.


/// CLEANUP ///

Purpose: Cleans up the X10 Runtime Context when an error is encountered.

Library: libx10.a

C++ syntax:

	#include <x10/x10lib.h>
	void x10lib::Cleanup()

C syntax:

	#include <x10/x10lib.h>
	void x10_cleanup()

Description:

	When an error is encountered during X10Lib call processing and before
	exiting the program, call this routine to safely free all the internally
	allocated structures and terminate the communication context.

Return values:
	None



=========================
02) REMOTE COPY INTERFACE
=========================



/// BLOCKING GET ///

Purpose: Blocking transfer of data from a remote node to the local node.

Library: libx10.a

C++ syntax:

	#include <x10/x10lib.h>
	x10_err_t x10lib::Get(src, dest, n)
		x10_gas_ref_t src;
		void *dest;
		int n;

C syntax:

	#include <x10/x10lib.h>
	x10_err_t x10_get(src, dest, n)
		x10_gas_ref_t src;
		void *dest;
		int n;

Parameters:

	INPUT
	-----
	src		Specifies the source address on a remote node.
	dest	Specifies the target buffer address on the local node.
			If n is 0, the value of this parameter can be NULL.
	n		Specifies the number of bytes of data to be fetched.

Description:

	Fetches n contiguous bytes from src address on a remote node
	to the dest address on the local node.
	This method is internally implemented by an RDMA if possible.
	The call progresses independently of any other calls made to the X10Lib by
	other threads in the source process.
	The bytes will be available in dest upon successful return from this call.

Return values:

	X10_OK					Indicates the method/function call completed successfully.
	X10_ERR_INIT			This method was called without initializing the X10Lib.
	X10_ERR_PLACE			Specified place is outside the range.
	X10_ERR_REM_ADDR_NULL	Specified remote address is NULL.
	X10_ERR_LOC_ADDR_NULL	Specified local address is NULL.
	X10_ERR_DATA_LEN		Specified length is outside the range.
	X10_ERR_COM 			Error from the underlying communication system.


Note: RDMA support is not currently available.


/// NON-BLOCKING GET ///

Purpose: Non-blocking transfer of data from a remote node to the local node.

Library: libx10.a

C++ syntax:

	#include <x10/x10lib.h>
	x10_err_t x10lib::NbGet(src, dest, n, sw)
		x10_gas_ref_t src;
		void *dest;
		int n;
		x10_switch_t sw;

C syntax:

	#include <x10/x10lib.h>
	x10_err_t x10_get_nb(src, dest, n, sw)
		x10_gas_ref_t src;
		void *dest;
		int n;
		x10_switch_t sw;

Parameters:

	INPUT
	-----
	src		Specifies the source address on a remote node.
	dest	Specifies the target buffer address on the local node.
			If n is 0, the value of this parameter can be NULL.
	n		Specifies the number of bytes of data to be fetched.

	INPUT/OUTPUT
	------------
	sw		Reference to the handle associated with a particular non-blocking transfer.

Description:

	Non-blocking fetch of n contiguous bytes from src address on a remote node
	to the dest address on the local node.
	This method is internally implemented by an RDMA if possible.
	The call progresses independently of any other calls made to the X10Lib by
	other threads in the source process.
	As this is a non-blocking call, the caller cannot assume that data transfer
	has completed upon return from the call.  Instead, the bytes will only be
	available after a subsequent wait call on the switch returns successfully.

Return values:

	X10_OK					Indicates the method/function call completed successfully.
	X10_ERR_INIT			This method was called without initializing the X10Lib.
	X10_ERR_PLACE			Specified place is outside the range.
	X10_ERR_REM_ADDR_NULL	Specified remote address is NULL.
	X10_ERR_LOC_ADDR_NULL	Specified local address is NULL.
	X10_ERR_DATA_LEN		Specified length is outside the range.
	X10_ERR_COM 			Error from the underlying communication system.
	X10_ERR_PARAM_INVALID	Specified parameter is not valid.


Note: RDMA support is not currently available.


/// BLOCKING PUT ///

Purpose: Blocking transfer of data from the local node to a remote node.

Library: libx10.a

C++ syntax:

	#include <x10/x10lib.h>
	x10_err_t x10lib::Put(src, dest, n)
		void *src;
		x10_gas_ref_t dest;
		int n;

C syntax:

	#include <x10/x10lib.h>
	x10_err_t x10_put(src, dest, n)
		void *src;
		x10_gas_ref_t dest;
		int n;

Parameters:

	INPUT
	-----
	src		Specifies the source address on the local node.
			If n is 0, the value of this parameter can be NULL.
	dest	Specifies the target buffer address on a remote node.
	n		Specifies the number of bytes of data to be transferred.

Description:

	Writes n contiguous bytes from src address on the local node
	to the dest address on a remote node.
	This method is internally implemented by an RDMA if possible.
	The call progresses independently of any other calls made to the X10Lib by
	other threads in the dest process.
	The bytes will be available in dest upon successful return from this call.

Return values:

	X10_OK					Indicates the method/function call completed successfully.
	X10_ERR_INIT			This method was called without initializing the X10Lib.
	X10_ERR_PLACE			Specified place is outside the range.
	X10_ERR_REM_ADDR_NULL	Specified remote address is NULL.
	X10_ERR_LOC_ADDR_NULL	Specified local address is NULL.
	X10_ERR_DATA_LEN		Specified length is outside the range.
	X10_ERR_COM 			Error from the underlying communication system.


Note: RDMA support is not currently available.


/// NON-BLOCKING PUT ///

Purpose: Non-blocking transfer of data from the local node to a remote node.

Library: libx10.a

C++ syntax:

	#include <x10/x10lib.h>
	x10_err_t x10lib::NbPut(src, dest, n, sw)
		void *src;
		x10_gas_ref_t dest;
		int n;
		x10_switch_t sw;

C syntax:

	#include <x10/x10lib.h>
	x10_err_t x10_put_nb(src, dest, n, sw)
		void *src;
		x10_gas_ref_t dest;
		int n;
		x10_switch_t sw;

Parameters:

	INPUT
	-----
	src		Specifies the source address on the local node.
			If n is 0, the value of this parameter can be NULL.
	dest	Specifies the target buffer address on a remote node.
	n		Specifies the number of bytes of data to be transferred.

	INPUT/OUTPUT
	------------
	sw		Reference to the handle associated with a particular non-blocking transfer.

Description:

	Non-blocking write of n contiguous bytes from src address on the local node
	to the dest address on a remote node.
	This method is internally implemented by an RDMA if possible.
	The call progresses independently of any other calls made to the X10Lib by
	other threads in the dest process.
	As this is a non-blocking call, the caller cannot assume that data transfer
	has completed upon return from the call.  Instead, the bytes will only be
	available after a consecutive Wait call returns successfully.

Return values:

	X10_OK					Indicates the method/function call completed successfully.
	X10_ERR_INIT			This method was called without initializing the X10Lib.
	X10_ERR_PLACE			Specified place is outside the range.
	X10_ERR_REM_ADDR_NULL	Specified remote address is NULL.
	X10_ERR_LOC_ADDR_NULL	Specified local address is NULL.
	X10_ERR_DATA_LEN		Specified length is outside the range.
	X10_ERR_COM 			Error from the underlying communication system.
	X10_ERR_PARAM_INVALID	Specified parameter is not valid.


Note: RDMA support is not currently available.


================================
03) REGISTER TRANSFER OPERATIONS
================================


/// GET XXXXX ///

Purpose: Transfer of a value stored in the register of a remote node.

Library: libx10.a

C++ syntax:

	#include <x10/x10lib.h>
	XXX x10lib::GetXXX(src)
		x10_gas_ref_t src;

C syntax:

	#include <x10/x10lib.h>
	XXX x10_get_xxx(src)
		x10_gas_ref_t src;

Parameters:

	INPUT
	-----
	src		Specifies the source address on a remote node.

Description:

	The value stored in the register of a remote node specified by
	the src address is returned.
	XXX can be "int"/"long"/"float"/"double".
	This method is internally implemented by an RDMA if possible.
	The call progresses independently of any other calls made to the X10Lib by
	other threads in the source process.

Return values:

	Returns the required datatype value.


Note: RDMA support is not currently available.


/// BLOCKING PUT XXXXX ///

Purpose: Blocking transfer of a value stored in the register of the local node to
		 a remote node.

Library: libx10.a

C++ syntax:

	#include <x10/x10lib.h>
	x10_err_t x10lib::PutXXX(val, dest)
		XXX val;
		x10_gas_ref_t dest;

C syntax:

	#include <x10/x10lib.h>
	x10_err_t x10_put_value(val, dest)
		XXX val;
		x10_gas_ref_t dest;

Parameters:

	INPUT
	-----
	val		Specifies the value to put in the destination.
	dest	Specifies the destination address on a remote node.

Description:

	The value stored in the register of the local node is blockingly transferred to
	the dest address on a remote node.
	XXX can be "int"/"long"/"float"/"double".
	This method is internally implemented by an RDMA if possible.
	The call progresses independently of any other calls made to the X10Lib by
	other threads in the dest process.

Return values:

	X10_OK					Indicates the method/function call completed successfully.
	X10_ERR_INIT			This method was called without initializing the X10Lib.
	X10_ERR_PLACE			Specified place is outside the range.
	X10_ERR_REM_ADDR_NULL	Specified remote address is NULL.
	X10_ERR_LOC_ADDR_NULL	Specified local address is NULL.
	X10_ERR_DATA_LEN		Specified length is outside the range.
	X10_ERR_COM 			Error from the underlying communication system.


Note: RDMA support is not currently available.


/// NON-BLOCKING PUT XXXXX ///

Purpose: Non-blocking transfer of a value stored in the register of the local node to
		 a remote node.

Library: libx10.a

C++ syntax:

	#include <x10/x10lib.h>
	x10_err_t x10lib::NbPutXXX(val, dest, sw)
		XXX val;
		x10_gas_ref_t dest;
		x10_switch_t sw;

C syntax:

	#include <x10/x10lib.h>
	x10_err_t x10_put_value_nb(val, dest, sw)
		XXX val;
		x10_gas_ref_t dest;
		x10_switch_t sw;

Parameters:

	INPUT
	-----
	val		Specifies the value to put in the destination.
	dest	Specifies the destination address on a remote node.

	INPUT/OUTPUT
	------------
	sw		Handle associated with a particular non-blocking transfer.

Description:

	The value stored in the register of the local node is non-blockingly transferred
	to the dest address on a remote node.
	XXX can be "int"/"long"/"float"/"double".
	This method is internally implemented by an RDMA if possible.
	The call progresses independently of any other calls made to the X10Lib by
	other threads in the dest process.
	As this is a non-blocking call, the caller cannot assume that data transfer
	has completed upon return from the call.  Instead, the value will only be
	available after a subsequent switch wait call returns successfully.

Return values:

	X10_OK					Indicates the method/function call completed successfully.
	X10_ERR_INIT			This method was called without initializing the X10Lib.
	X10_ERR_PLACE			Specified place is outside the range.
	X10_ERR_REM_ADDR_NULL	Specified remote address is NULL.
	X10_ERR_LOC_ADDR_NULL	Specified local address is NULL.
	X10_ERR_DATA_LEN		Specified length is outside the range.
	X10_ERR_COM 			Error from the underlying communication system.
	X10_ERR_PARAM_INVALID	Specified parameter is not valid.


Note: RDMA support is not currently available.



============
04) ORDERING
============



/// LOCAL SYNCHRONIZATION ///


Purpose: Synchronize local data transfer operations.

Library: libx10.a

C++ syntax:

	#include <x10/x10lib.h>
	void x10lib::SyncLocal()

C syntax:

	#include <x10/x10lib.h>
	void x10_sync_local()

Description:

	Blocks the calling task until all the X10Lib operations initiated by
	the task before this call are guaranteed to complete at various destinations.

Return values:

	None


/// GLOBAL SYNCHRONIZATION ///


Purpose: Synchronize global data transfer operations.

Library: libx10.a

C++ syntax:

	#include <x10/x10lib.h>
	void x10lib::SyncGloabl()

C syntax:

	#include <x10/x10lib.h>
	void x10_sync_global()

Description:

	Blocks the calling task until all the outstanding X10Lib operations initiated
	by all the participating tasks before this call are guaranteed to complete
	regardless of the destination.  This is a collective call that enforces order
	across all tasks and provides barrier synchronization among them.

Return values:

	None


===========
05) LOCKING
===========


Locks are at present shared with the underlying communication system
to improve latency and throughput.


/// LOCK ///

Purpose: Acquire the mutex lock.

Library: libx10.a

C++ syntax:

	#include <x10/x10lib.h>
	void x10lib::Lock()

C syntax:

	#include <x10/x10lib.h>
	void x10_lock()

Description:

	This method/function acquires the shared lock that is associated with
	the underlying communication system.

Return values:

	None


/// UNLOCK ///


Purpose: Release the mutex lock that is held.

Library: libx10.a

C++ syntax:
	#include <x10/x10lib.h>
	void x10lib::Unlock()

C syntax:
	#include <x10/x10lib.h>
	void x10_unlock()

Description:

	This method/function releases the lock that is associated with the
	underlying communication system.

Return values:

	None


/// TRY LOCK ///


Purpose: Try and acquire the mutex lock.

Library: libx10.a

C++ Syntax:
	#include <x10/x10lib.h>
	#include <sys/errno.h>
	int x10lib::TryLock()

C Syntax:
	#include <x10/x10lib.h>
	#include <sys/errno.h>
	int x10_try_lock()

Description:
	This method tries to acquire the lock that is associated with the
	underlying communication sytem.  Returns immediately if the lock
	is already held by someone.

Parameters:

	None

Return values:

	0		The lock has been successfully acquired.
	EBUSY	The lock is being held.



============
06) PROGRESS
============


Methods to achieve progress in polling mode.


/// PROBING ///

Purpose: To make one-time progress in polling mode.

Library: libx10.a

C++ Syntax:

	#include <x10/x10lib.h>
	void Probe()

C Syntax:

	#include <x10/x10lib.h>
	void x10_probe()

Description:

	This is a non-blocking call which can be used to monitor local progress.
	It transfers control to the underlying communication system in order to
	make one round of progress on the associated messages.

Parameters:

	None

Return values:

	None


/// POLLING ///


Purpose: To make progress in polling mode the specified number of times.

Library: libx10.a

C++ Syntax:

	#include <x10/x10lib.h>
	void x10lib::Poll(cnt, state)
		unsigned int cnt;
		x10_msg_state_t *state;

C Syntax:

	#include <x10/x10lib.h>
	void x10_poll(cnt, state)
		unsigned int cnt;
		x10_msg_state_t *state;

Description:

	Allows the calling process to check communication progress until either
	progress (the completion of eithr a message send operation or a message
	receive operation) is made or a specified number of loops have executed.

Parameters:

	INPUT
	-----
	cnt		Specifies the maximum number of times to loop with no progress before
			returning.

	INPUT/OUTPUT
	------------
	state	Specifies the address of a x10 message state variable into which
			the result of this call will be written.

			The return state can be any of the following:

			X10_NO_PROGRESS		Looped so many times without progress
			X10_SEND_COMPLETE	Send operation completed
			X10_RECV_COMPLETE	Receive operation completed
			X10_BOTH_COMPLETE	Both send and receive operations completed
			X10_SHM_COMPLETE	Shared memory completion
			X10_UNKNOWN_STATE	Invalid (or) unknown state

Return values:

	None


================
07) REGISTRATION
================

/// HANDLER ADDRESS REGISTRATION ///

Purpose: Registers the address of a function handler.

Library: libx10.a

C++ Syntax:

	#include <x10/x10lib.h>
	int x10lib::RegHandlerAddr(addr)
		void *addr;

C Syntax:
	#include <x10/x10lib.h>
	int x10_reg_handler_addr(addr)
		void *addr;

Parameters:

	INPUT
	-----
	addr	Specifies the address of the function handler to register.

Description:

	Use this method/function to register the address of a handler.
	The function address is maintained in an internal table.

Return values:

	Returns the address handle that can be used in placed of addr.


/// GETTING HANDLER ADDRESS ///

Purpose: To retrieve the previously registered function address.

Library: libx10.a

C++ Syntax:

	#include <x10/x10lib.h>
	x10_err_t x10lib::GetHandlerAddr(addr, ah)
		void **addr;
		int ah;

C Syntax:

	#include <x10/x10lib.h>
	x10_err_t x10_get_handler_addr(addr, ah)
		void **addr;
		int ah;

Description:

	Use this method to retrieve the function address that was previously
	registered and is associated with the index ah.

Parameters:

	INPUT
	-----
	ah		Specifies the address handle that was returned during registration.

	OUTPUT
	------
	addr	Returns the function address that was registered.

Return Values:
	X10_OK					Indicates the method/function call completed successfully.
	X10_ERR_INIT			This method was called without initializing the X10Lib.
	X10_ERR_ADDR_HNDL_RANGE Specified address handle is outside range.
	X10_ERR_RET_PTR_NULL	Specified return value pointer is NULL.



=====================
08) GLOBAL ADDRESSING
=====================



/// MAKEING GLOBAL REFERENCE ///


Purpose: Make a global address space reference.

Library: libx10.a

C++ Syntax:

	#include <x10/x10lib.h>
	x10_gas_ref_t x10lib::MakeGASRef(place, addr)
		int place;
		void *addr;

C Syntax:

	#include <x10/x10lib.h>
	x10_gas_ref_t x10_make_gas_ref(place, addr)
		int place;
		void *addr;

Description:

	This method call can be used to construct a global address space reference
	(GAS) for the specified place and virtual address.  If the specified place
	is remote it constructs the globally valid reference that can be used from
	other places.

Parameters:

	INPUT
	-----
	place	Specifies the placed id where this address points to.
	addr	Specifies the address component on the indicated place.

Return Values:

	Returns the globally valid reference.


/// GLOBAL REFERENCE TO PLACE ///


Purpose: To retrieve the place id from the GAS reference.

Library: libx10.a

C++ Syntax:

	#include <x10/x10lib.h>
	int x10lib::GAS2Place(ref)
		x10_gas_ref_t ref;

C Syntax:

	#include <x10/x10lib.h>
	int x10_gas2place(ref)
		x10_gas_ref_t ref;

Description:

	This method can be used to get the place id for the specified
	global reference.

Parameters:

	ref		Specifies the global address reference.

Return values:

	Returns the place pointed to by the reference.


/// GLOBAL REFERENCE TO ADDRESS ///


Purpose: To retrieve the address component from the GAS reference.

C++ Syntax:

	#include <x10/x10lib.h>
	void *x10lib::GAS2Addr(ref)
		x10_gas_ref_t ref;

C Syntax:

	#include <x10/x10lib.h>
	void *x10_gas2addr(ref)
		x10_gas_ref_t ref;

Description:

	This method can be used to retrieve the address part of the specified
	global address reference.

Parameters:

	INPUT
	-----
	ref		Specifies the global address reference.

Return values:

	Return the address component of the GAS reference.



===============
09) ENVIRONMENT
===============


For querying and setting the X10 runtime environment.


/// GETTING RUNTIME ENVIRONMENT ///

Purpose: Query the runtime environment.

Library: libx10.a

C++ syntax:

	#include <x10/x10lib.h>
	x10_err_t x10lib::Getenv(query, ret_val)
		x10_query_t query;
		int *ret_val;

C syntax:

	#include <x10/x10lib.h>
	x10_err_t x10_getenv(query, ret_val)
		x10_query_t query;
		int *ret_val;

Parameters:

	INPUT
	-----
	query	Specifies the type of query.

	OUTPUT
	------
	ret_val	Specifies the parameter to store the result of the query.

Description:
	
	Use this method/function to query runtime settings.  Currently, it
	recognizes the following query types.

	Query Type  Description                 Return Type
	---------------------------------------------------
	PLACE_ID	query the place id			(int *)
	NUM_PLACES	query the number of places	(int *)
	POLL_SET	query the polling mode		(int *)
	NODE_NAME	query the node name			(char [MAXHOSTNAMELEN])
	NODE_ADDR	query the ip addr			(char [32])
	NODE_ID		query the host id			(int)

Return values:

	X10_OK					Indicates the method/function call completed successfully.
	X10_ERR_INIT			This method was called without initializing the X10Lib.
	X10_ERR_RET_PTR_NULL	Specified return pointer is NULL.
	X10_ERR_RET_VAL			Specified return pointer is not valid.
	X10_ERR_RET_QUERY_TYPE	Specified query type is invalid.


/// SETTING RUNTIME ENVIRONMENT ///


Purpose: Set the runtime environment.

Library: libx10.a

C++ syntax:

	#include <x10/x10lib.h>
	x10_err_t x10lib::Setenv(query, ret_val)
		x10_query_t query;
		int set_val;

C syntax:

	#include <x10/x10lib.h>
	x10_err_t x10_setenv(query, ret_val)
		x10_query_t query;
		int set_val;

Parameters:

	INPUT
	-----
	query	Specifies the type of query.
	set_val	Specifies the integer value of the parameter to set.

Description:
	
	Use this method/function to set runtime attributes.
	Currently it recognizes only the following query types.

	Query Type  Description                     Set Type
	-----------------------------------------------------
	POLL_SET 	Set the polling/interrupt mode. (int)


Return values:

	X10_OK					Indicates the method/function call completed successfully.
	X10_ERR_INIT			This method was called without initializing the X10Lib.
	X10_ERR_SET_VAL			Specified set value is not within valid range.
	X10_ERR_RET_QUERY_TYPE	Specified query type is invalid.



===================
10) ERROR MESSAGING
===================


/// RETRIEVING ERROR MESSAGE ///

Purpose: To retrieve the message associated with the specified X10 error code.

C++ Syntax:

	#include <x10/x10lib.h>
	x10_err_t x10lib::ErrMsg(err_code, buf, len)
		x10_err_t err_code;
		char *buf;
		int len;

C Syntax:

	#include <x10/x10lib.h>
	x10_err_t x10_err_msg(err_code, buf, len)
		x10_err_t err_code;
		char *buf;
		int len;

Description:

	Use this method to retrieve the string associated with the returned
	error code from any X10 call.  For the underlying communication system,
	it returns the message associated with that call.

Parameters:

	INPUT
	-----
	err_code	Specifies the returned error code.
	buf			Specifies the buffer starting address of at least
				X10_MAX_ERR_STRING size.
	len			Specifies the lengh of the provided buffer.

Return values:

	X10_OK					Indicates the method/function call completed successfully.
	X10_ERR_INIT			This method was called without initializing the X10Lib.
	X10_ERR_CODE_UNKNOWN	Specified error code is unknown.



============================
11) DEPRECATED FUNCTIONALITY
============================

/// NUMBER OF PLACES ///

Purpose: To retrieve the number of active places.

C++ Syntax:

	#include <x10/x10lib.h>
	int x10lib::numPlaces();

C Syntax:

	#include <x10/x10lib.h>
	int x10_num_places();

Description:

	Used to retrieve the number of places where the tasks are running.

Parameters:

	None

Return values:

	Returns the number of places.


/// CURRENT PLACE ///

Purpose: To retrieve the current place id.

C++ Syntax:

	#include <x10/x10lib.h>
	int x10lib::here();

C Syntax:

	#include <x10/x10lib.h>
	int x10_here()

Description:

	This method can be used to find out the current place id.

Parameters:

	None

Return Values:

	Return the active place id.




############################################################
#                                                          #
#              X10 LANGUAGE SUPPORT LAYER                  #
#                                                          #
############################################################


==========
12) FINISH
==========

The current x10 gfence implementation assumes that only one thread executes per
place.  This precludes both multiple asyncs per place as well as execution
in INTERRUPT mode.  Thus, the only mode of operation for the underlying
communication system is POLLING mode.

Under these conditions, the following invariants hold:

	(1) Only one thread (except shared memory thread) executes.
	(2) Gfence guarantees that all the data sent out before Gfence are acknowledged.
	(3) the async methods are completed inline in the header handler or the inline
		completion handler.


/// BEGIN FINISH ///


Purpose: Blocks the calling process until it receives the continue signal
		 from process 0.

Library: libx10.a

C++ Syntax:

	#include <x10/x10lib.h>
	int x10lib::FinishStart(int cs)

C Syntax:

	This is a C++ only feature.

Description:

  	Blocks the calling process until it receives the continue signal from
	the parent process (process 0).  The call returns the received continue
	signal back to the calling process.

Parameters:

	INPUT
	-----
	cs	The continue signal. The parent process will send the next jump point
		to the child processes. The child processes should wait to receive them.
  
Return values:

	0 or -1          Indicates the calling process should
                     simply wait for the CS from task 0.

       > 0           Indicates the calling process should jump
                     to the corresponding jump point in the program 
                     after the call returns. 
                    

/// END FINISH ///

Purpose:  Block the root process (process 0) until all the processes
          have reached this call. Also, collect the exception from the processes.

C++ Syntax:

	#include <x10/x10lib.h>
	x10_err_t x10lib::FinishEnd(Exception *ex)

C syntax:

	This is a C++ only feature.

Description:

	Blocks the parent process (process 0) until it receives the exception signal
	and exception value from the children. 

Parameters:

	INPUT
	-----
	ex         The exception thrown by the processes. 
  
Return values:

	X10_OK			Indicates the method/function call completed successfully.
	X10_ERR_COM 	Error from the underlying communication system.

Exceptions:
  
	Throws MutltiException in process 0.
     
Note:
	The following sequence is equivalent to a Gfence:

		FinishEnd();

   		process 0 code with no async spawns;

		FinishBegin();



============
13) SWITCHES
============


Switches are used to provide a completion detection mechanism for non-blocking
remote operations.


/// SWITCH ALLOCATION ///

Purpose: To allocate a switch object and return reference to it.

C++ Syntax:

	#include <x10/x10lib.h>
	x10_switch_t x10lib::AllocSwitch()

C Syntax:

	#include <x10/x10lib.h>
	x10_switch_t x10_alloc_switch()

Description:

	This method allocates a switch object and returns pointer to it.
	
Parameters:

	None

Return values:

	Reference to the allocated switch object.


/// SWITCH DE-ALLOCATION ///


Purpose: To deallocate the allocated switch object.

C++ Syntax:

	#include <x10/x10lib.h>
	x10_switch_t x10lib::FreeSwitch(sw)
		x10_switch_t sw;

C Syntax:

	#include <x10/x10lib.h>
	x10_switch_t x10_free_switch(sw)
		x10_switch_t sw;

Description:

	Use this method to free the previously allocated switch object.

Parameters:

	INPUT
	-----
	sw		Pointer to already allocated switch object.

Return values:

	None

/// DECREMENTING SWITCH COUNT ///

Purpose: To decrement the current switch value by one.

C++ Syntax:

	#include <x10/x10lib.h>
	x10_switch_t sw;
	(void) sw->decrement();

C Syntax:

	#include <x10/x10lib.h>
	void x10_decrement_switch(sw)
		x10_switch_t sw;

Description:

	Used to keep track of the completion of one more async activity that needs
	to waited upon.

Parameters:

	INPUT/OUTPUT
	------------
	sw	Previously allocated switch object whose value is decremented by one.

Return values:

	None


/// WAITING ON SWITCH ///

Purpose: To block the calling process until the switch saturates (i.e. reaches
		 zero).

Library: libx10.a

C++ Syntax:

	#include <x10/x10lib.h>
	x10_switch_t sw;
	(void)sw->next();

C Syntax:

	#include <x10/x10lib.h>
	void x10_next_on_switch(sw)
		x10_switch_t sw;

Description:

	Use this method to block the calling process until the switch value reaches
	zero.  The saturation of the switch indicates that all the remote activities
	spawned with this switch have terminated.

Parameters:

	INPUT
	-----
	sw	Specifies the previously allocated/inited switch on which the process
		should block.

Return values:

	None


==========
14) ASYNCS
==========

Purpose: Execute an user specified method on the remote task.

Library: libx10.a

C++ syntax:

	#include <x10/x10lib.h>
	x10_err_t x10lib::AsyncSpawnInline (dest, handler, n, args);
	x10_err_t x10lib::AsyncSpawnInline (dest, handler, arg0);
	x10_err_t x10lib::AsyncSpawnInline (dest, handler, arg0, arg1);
		x10_place_t dest;
        x10_async_handler_t handler;
        int n;
        x10_async_arg_t* args;
        x10_async_arg_t arg0;
        x10_async_arg_t arg1;

Parameters:

	INPUT
	-----
	dest	Specifies the remote node id.
	n		Specifies the number of arguments to the remote method routine.
        	handler Specifies the remote method by a unique constant number. It is
            the users responsibility to create this unique number for every
            remote method.
    args    Specifies an array of arguments. For simplicity, different version
            of asyncSpawnInline that take different number of remote method
            arguments are defined.

Description:

	Use this method/function to execute another method in remote node. The 
    function just passes the handler to the remote node and invokes
    the user defined function asyncSwitch, which has the following
    prototype.
     
    x10_err_t AsyncSwitch (async_handler_t handler, async_arg_t* args, int niter);

    The body of the asyncSwitch should invoke the remote method corresponding to
    the handler and repeat it niter times. For non-aggregate asyncs, niter is 1.
    asyncSwitch should be declared in the user program. Typically, the body of
    asyncSwitch is of the following from:

    x10_err_t AsyncSwitch (async_handler_t handler, async_arg_t* args, int niter) 
	{
	  for (int i = 0; i < niter; i ++)
		switch (handler) {
		  case 0 : 
		async0 (*args++);
		break;
		  case 1 :
		async1 (*args++, *args++)
		break;
		  ....
		}
	}

Return values:

	X10_OK			Indicates the method/function call completed successfully.
	X10_ERR_COM 	Error from the underlying communication system.

    
===============
15) AGGREGATION
===============

Purpose:  Enqueue the active messages and execute them as an aggregate
	      on the remote task. The size of the aggregate is fixed by the library.  
          Once the aggregation limit is reached, the active messages are sent
          to the destination and executed there.

Library: libx10.a

C++ Syntax:

	#include <x10/x10lib.h>
	x10_err_t x10lib::AsyncSpawnInlineAgg (dest, handler, n, args);
	x10_err_t x10lib::AsyncSpawnInlineAgg (dest, handler, arg0);
	x10_err_t x10lib::AsyncSpawnInlineAgg (dest, handler, arg0, arg1);
	x10_place_t dest;
	        x10_async_handler_t handler;
	        int n;
	        x10_async_arg_t* args;
	        x10_async_arg_t arg0;
	        x10_async_arg_t arg1;

Parameters:

	INPUT
	-----
	dest	Specifies the remote node id.
	n       Specifies the number of arguments to the remote method routine.
            handler Specifies the remote method by a unique constant number. It is
            the users responsibility to create this unique number for every
            remote method.
    args    Specifies an array of arguments. For simplicity, different version
            of asyncSpawnInlineAgg that take different number of remote method
            arguments are defined.

Description:

    The requirements are the same as asyncSpawnInline. Users should define
	asyncSwitch in his program.

Return values:

	X10_OK			Indicates the method/function call completed successfully.
	X10_ERR_COM 	Error from the underlying communication system.


/// ASYNC FLUSH ///


Purpose : Flush all the outstanding aggregated active messages. 

C++ Syntax:

	#include <x10/x10lib.h>
	x10_err_t x10lib::Asyncflush (handle, n)
        x10_async_handler_t handle;
        int n;

Parameters:
  
    INPUT
	-----
    handle  Specifies the handle of the active message to be flushed.
            It is solely the user's responsibility to provide the same
            handle as that used by asyncSpawnInlineAgg. Failure to do so
            will lead to un-predictable results.
	n		Specifies the number of arguments to the  remote method.

Description:

	Use this method/function to flush all the outstanding aggregated active messages.
    Typically, a call to a flush is performed before Gfence(). 

Return values:

	X10_OK		    Indicates the method/function call completed successfully.
	X10_ERR_COM 	Error from the underlying communication system.

=====================
16) Array Copy
=====================

/// GENERAL ARRAY COPY ///

Purpose:
	Copy a local array section to a remote array section. The array section should
	be rectangular. 

Library:
	libx10.a

C++ Syntax : 

    #include <x10/x10lib.h>	
    asyncArrayPut (vec, args, target, switch)
    lapi_vec_t* vec;
    x10_clousre_t closure;
    x10_place_t target;
    x10_switch_t switch;  
 
    asyncArrayIput (vec, args, target, switch)
    lapi_vec_t* vec;
    x10_clousre_t closure;
    x10_place_t target;
    x10_switch_t switch;   

C Syntax : 

    #include <x10/x10lib.h>	
    x10_async_array_put (vec, closure, target, switch)
    lapi_vec_t* vec;
    x10_closure_t closure;
    x10_place_t target;
    x10_switch_t switch;    

    x10_async_array_iput (vec, args, target, switch)
    lapi_vec_t* vec;
    x10_clousre_t closure;
    x10_place_t target;
    x10_switch_t switch;
  
Parameters:

	INPUT

	vec  		a generalized IO vector that contains the bases addresses & length of the vectors.
	      		Use genIOVector function call to generate an IO Vector

	closure  	a closure that describes the handler & other arguments for remote execution.

	target  	destination of the remote array.

	switch  	switch for synchronization [OPTIONAL].

Return values:

	X10_OK		SUCCESSFUL completion

	Other values	FAILUARE (see err.h for more details)       
Note :
     
     1) This method requires the presence of genArrayCopySwitch method with the following signature:

	     lapi_vec_t* genArrayCopySwitch (int handler, void* args)
		
        This method will return a pointer to an IO vector to the LAPI handler. The handler will
        use this to initiate the data transfer at the destination location.

     2) The Put & Iput versions are very similar. The latter does not wait for the operation
        to complete locally, while the former does. This implies that it is the user's responsibility
	to ensure that vec & closure are not de-allocated or re-used before a succeeding SyncGlobal 
	or SyncLocal operation.

       
/// GEN IO VECTOR ///

Purpose:
	Generate an IO vector for the given array & rectangular region.

C++ Syntax:

	#include <x10/x10lib.h>
	lapi_vec_t* genIOVector (data, rank, lda, el_size, origin, diagonal)
	void* data;
	int rank;
	int[] lda;
	size_t el_size;
	int[] origin;
	int[] diagonal;
	
Parameters:
	
	INPUT
	
	data		the base pointer of the source array

	rank		rank of the array.

	lda[rank]	an array describing the "global" stride for every dimension.
		    	lda[rank-1].

	el_size		size of every individual element in the input array.

	origin[rank]	origin of a rectangular subsection of the region of the input array.

	diagonal[rank]	diagonal of a rectangular subsection of the region of the input array.		    	

Return values:
       
       NON-NULL		A pointer to the IO vector

       NULL		Unsuccessful completion.

Notes :

	1) In the next revision, data, rank, lda and el_size will be combined in to one single
	   structure, array_info.

/// FREE IO VECTOR ///

Purpose:
	Free an IO vector

C++ Syntax:
    #include <x10/x10lib.h>
    x10_err_t freeIOVector (vec)
    lapi_vec_t* vec;

Parameters:
	INPUT
	
	vec		the IO vector to be freed
	
Return values:

       X10_OK		SUCCESSFUL completion

       Other values	UNSUCCESSFUL (see err.h for a list of error codes)
	
/// ARRAY PUT ///

Purpose:

	A specialized version of general array put that assumes that the arrays
	are 1-D and copies N bytes of contiguous data from the src to dest.

C++ Syntax :

    x10_err_t
    asyncArrayPut (src, closure, len, target, switch);
    void *src;
    x10_closure_t closure;
    size_t len;
    x10_place_t target;
    x10_switch_t switch;

    x10_err_t	 
    asyncArrayIput (src, closure, len, target, switch);
    void *src;
    x10_closure_t closure;
    size_t len;
    x10_place_t target;
    x10_switch_t switch;

Parameters:
	
	INPUT

	src		base pointer of the source array
	closure		a pointer to closure representing the destination closure (see CLOSURE)
	len		number of bytes to be copied
	target		the location of the remote array
	switch		switch for synchronization [OPTIONAL]

Return values:

       X10_OK		SUCCESSFUL completion.

       Other values	UNSUCCESSFUL (see err.h for a list of error codes)
Note :
	1)  This method requires the presence of arrayCopySwitch method with the following signature:

	     void* arrayCopySwitch (int handler, void* args)
			 
	    This method will return the base address of the destination array to the LAPI handler.
	    The handler will use this address to initiate data transfer. 

        2) The Put & Iput versions are very similar. The latter does not wait for the operation
	   to complete locally, while the former does. This implies that it is the user's responsibility
	   to ensure that src & closure are not de-allocated or re-used before a succeeding SyncGlobal 
	   or SyncLocal operation.

/// CLOSURE ///

Purpose : 
	A data type to represent all the information to be sent to the destination for successful execution
	of a remote async or aggregate async or one-sided array copy.

Usage : 
	Users should inherit from the base class Closure defined in x10lib. Closure is of the following type:
	
	struct Closure
	{	
	  Closure () :
	    len (0), handler (0) {}
	 
	  Closure (int _len, int _handler) :
	    len (_len), handler (_handler) {}
    
	  size_t len;
	  x10_async_handler_t handler;
	}

	User's should initialize the base class Closure with proper arguments -- len (in bytes) and 
	handler (a constant integer). The derived class can add other arguments to the closure
	like the base offset, region etc.

==========================
17) Reduction
==========================

/// reduce<T> ///

Purpose : To initialize  a reduction operation. 


C++ syntax:
      
	template <typename T>
	x10_err_t Reduce (inout)
	T* inout;

Parameters:
	
	INPUT

	inout - the input variable to reduce
 	
	OUTPUT

	inout - the result is over-written over the input (inout).

Return Values:

	X10_OK -  SUCCESSFUL
	
	Other values - error (See err.h for error codes)

Description:

	reduce initiates the reduction operation over scalars. The scalar is
	distributed among several places. finishReduceAll completes a reduction. 
	The reason for separate initialization and completion is to allow 
	overlapping of reduction operation. Currently, x10lib only supports reduction 
	over scalars or uniquely distributed arrays.

Note:
	A maximum of X10_MAX_REDUCE_OPS_INFLIGHT reduction operations can be overlapped. 

/// FinishReduceAll <T, OP> ///

Purpose: Complete all outstanding reduction operations

C++ Syntax:
	
	template <typename T, void OP(T&, const T&>
 	x10_err_t FinishAllReduce ()

Return Values :

	X10_OK -  	SUCCESSFUL
	
	Other values - 	UNSUCCESSFUL (See err.h for error codes)

Template Parameters:

	T - 	The type of the scalar

	OP - 	The reduction function. It has the signature void OP(T&, const T&). 
		The first argument is the output, while the second is the
		input.     

Description: 

	FinishReduceAll completes all the outstanding reduction operation. The
	result is returned to the input of the earlier redue operations at place zero. 
	A maximum of X10_MAX_REDUCE_OPS_INFLIGHT can be overlapped. All the
        earlier reduce operations should have the same reduction function. 
	
Note:
	OP should be an associative and commutative operation.


############################################################
#                                                          #
#                   ARRAY INTERFACE                        #
#                                                          #
############################################################

The following array interface is only for C++ programming language. A C
interface will be provide in the next release.

==========================
18) Points
==========================

/// Point <RANK> ///

Description : 

	Point represents any dimensional point. It supports creation of any
	dimensional point, access to value at a given dimension and checking equality of
	points.

Definition :
	
	Defined in <x10/point.h>

Template Parameters:

	RANK	dimension of the point, a non-zero integer (0 < RANK < X10_MAX_RANK)	

Constructor:
	
	Point<RANK>(values)	values is an array of integer of size RANK
Members : 

 	P1.isEqual (P2)		check if two points P1 & P2 are equal

	P.value (i)		return the value at dimension i


==========================
19) Regions
==========================

/// Region <RANK> ///

Description :

	Region is generalization of index space. It represents the x10 region
	construct with operations like creation, union, intersection and 
	difference. Region is an abstract class. 

Definition :
	
	Defined in <x10/region.h>

Template Parameters:

	RANK	dimension of the region, a non-zero integer (0 < RANK < X10_MAX_RANK)

Constructor :

	Region is an abstract class
	
Members :

	R.card()		size (i.e. no of points) of the region R. 
	
	R1.union (R2)		compute the union of two regions R1 and R2
	
	R1.intersect (R2)	compute the intersection of two regions R1 and R2
	
	R1.diff (R2)		compute the difference of two regions R1 and R2

	R.contains (p)		check if Point P is contained in region R

	R.ord (p)		compute the linear ordinal of point p of region R

	R.coord (i)		compute the co-ordinate point of an ordinal of region R


Note :
	1. Regions with statically unknown RANK will be supported in next release

///RectangularRegion<RANK>///

Description :

	RectangualarRegion specifies a rectilinear region of RANK dimensions.
	a rectangular region is specified by its origin and diagonal. An optional step
	argument can be specified for every dimension. Origin, diagonal and steps are
	all Point variables of the rank=RANK. A region includes all the points
	in the "closed" range [o, d, s] (i.e. it "might" include the end-points o and d)

Definition :
	
	Defined in <x10/rectangular_region.h>

Template Parameters:

	RANK	dimension of the region, a non-zero integer (0 < RANK < X10_MAX_RANK)

Constructor :

	RectangularRegion<RANK> (d)		creates a 0-base region of size d with step 1

	RectangularRegion<Rank> (o, d)		creates a o-based region of size d - o with step 2

	RectangularRegion<RANK> (o, d, s) 	creates an o-based region of size (d - o) / s with step s

Members :

	All the members of Region<RANK>

	R.origin()	returns the origin of the region

	R.diagonal()	returns the diagonal of the region

	R.step()	returns the step of the region

Note :
	1. union, intersection and diff are not implemented in this release

==========================
20) Region Iterators
==========================

/// for_local iterators ///

Description :

	Iterators are macros defined in x10lib that iterates over each point
	of a given region.

Definition :
	
	Defined in <x10/iter.h>

Syntax :

	for_local_1d (I, :, R)			binds [I] to each point in 1D region R

	for_local_2d (I, J, :, R)		binds [I, J] to each point in 2D region R 

	for_local_3d (I, J, K, :, R)		binds [I, J, K] to each point in 3D region R

	for_local_2d_upper (I, J, :, R)		binds [I, J] to upper triangular section of 2D region R

	for_local_2d_lower (I, J, :, R)		binds [I, J] to lower triangular section of 2D region R

	for_local_2d_diagonal (I, J, :, R)	binds [I, J] to diagonal section of 2D region R

Note :
	1. The iterators iterate over the points in lexicographic order. 

	2. Iterators for more dimensions up to a maximum of X10_MAX_RANK will
	be provided in the next release.  A lexicographic iteration over all 
	the points in a region of any RANK order can be realized as follows: 

		for (int i = 0; i < R.card(); ++i)  cout << R.coord (i) << endl;

	Such a scheme may be inefficient.  For efficient iteration over any
	region, use "foreach" iterator.

	3. The penultimate argument of a "for" macro is ":". In reality, 
	this argument is a dummy argument for the macro and it can be any combination
	of key board characters. But, we strongly suggest to use ":" for clarity and
	to reflect the X10 syntax for region iteration.


/// foreach<RANK, F> ///

Description : iterate over all points in a region and apply a function (F)
	      with point as its input.

Definition :
	
	Defined in <x10/iter.h>

Syntax :
	
	foreach<RANK, F> (Region<RANK>*)

Note :
	1. F should be of type void (*) (Point<RANK>)

	2. F is invoked for every point in the region R, with the point as its input



==========================
21) Distribution
==========================

/// Dist<RANK> ///

Description: 	Distribution specifies a mapping of points in a region to a
set of places. 

Definition:
		Defined in <x10/dist.h>

Template Parameters:
	
		RANK			dimension of the distribution, a non-zero integer
				 	(0 < RANK < X10_MAX_RANK)

Construction:

		This is an abstract class

Members :
		D.region()		returns the  underlying region

		D.places()		returns the set of places

		D.nplaces()		returns the cardinality of the set of places
	
		D.place(P)		returns the place of Point P in distribution D

		D.restriction(p)	returns the range restriction of D at place p

		D1.union(D2)		returns the dis-joint union of D1 and D2

		D1.overlay (D2)		returns the asymmetric union of D1 and D2

		D1.intersect (D2)	returns the intersection of D1 and D2

		D1.diff (D2)		returns the difference of D1 and D2

Note :

	1. union, overlay, intersect and diff are not implemented in this release.

/// UniqueDist ///

Description : Returns an unique distribution  of region [0:pi-1] distributed among pi places

Definition :
		Defined in <x10/dist.h>

Construction :

		UniqueDist ()

Members :
		All the members of Dist

Note :
		According to x10 specification, Unique distributions are always 1-dimensional


/// ConstDist<RANK> ////

Description : Returns a constant distribution of a region R on place p

Definition :
		Defined in <x10/dist.h>

Construction :

		ConstDist<RANK> (Region<RANK>*, x10_place_t*)

Members :
		All the members of Dist

/// BlockDist <RANK> ///

Description :	Returns a block distribution of a region R, evenly distributed among a set of places 

Definition :

		Defined in <x10/dist.h>

Construction :

		BlockDist<RANK> (Region<RANK>*, x10_place_t*, int)

Members :
		All the members of Dist

=====================
22) Arrays
=====================

/// LocalArray <T, RANK> ///

Description : 	Local arrays are arrays that are created locally in every place independently. 
		Local arrays have an id (handle), that is globally unique over all the places. 
		This handle is used in remote asyncs to refer to the local section of a 
		"logical" distributed array.

Definition :
		Defined in <x10/local_array.h>

Construction :

		LocalArray <T, RANK> (Region<RANK>*, int handle)
Members :

		A.raw (P)		returns the address of  an element at point P in array A

		A.elementAt (P)		returns the value of an element at point P in array A
					A.raw (P) == &A.elementAt(P)

		A.region()		returns the underlying region of array A

		A.handle()		returns the unique id of the array
		
/// DistArray<T, RANK> ///

Description :   DistArrays are distributed arrays with an unique handle.
		Distributed arrays are created at a parent place (e.g. place zero) by
		initializing a section of the distributed array (i.e. a LocalArray) in  every
		place of the distribution. 

Definition :
		Defined in <x10/dist_array.h>

Construction :

		MakeDistArray <T, RANK> (Dist<RANK>*, int handle) (static method)

Deletion :

		FreeDistArray (DistArray<T, RANK>*) (static method)
Members :

		A.dist()		returns the distribution of the array A

		A.handle()		returns the handle of array A
