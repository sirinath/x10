====The port of the Berkeley UPC implementation (a hybrid of X10 and C)====

  This is the X10 port of the C/MPI implementation of NAS FT Benchmark in the Berkeley UPC FT suite. In our implementation, the allocation of distributed working arrays, the synchronization, and the communication are implemented at the X10 level, whereas the other functionalities are still implemented using the original c codes, such as the random number generator, the index transforms and the interface with fftw3. 

  We use the encapsulation (fragmented) approach to implement the distributed arrays and try to adopt the same format of the original C arrays (padding and pointer shifting to avoid cache thrashing). Note that the pointer to each 1D complex array in the C implementation is aligned with the cache line size at the application level, however, this functionality has to be performed by the X10 compiler which does not support it at this moment. One difference between the X10 local (double) arrays and the C local (complex) arrays is that the first are indexed by  logical global index, whereas the second by local index starting from zero. When a C array index is transformed to the corresponding X10 array index, it has to be multiplied by two and added by the starting index of this X10 array.

  MPI two-sided communication is replaced with X10's one-sided communication through array copying. The global barrier is matched with X10's clock (next statement). An interface is introduced for calling C functions from X10 (Java). For general information about writing hybrid X10 and C codes, please refer to the X10 wiki page at 
	http://orquesta.watson.ibm.com/mediawiki/index.php/How_to_get_Hybrid_X10_Running.

  Data structures allocated by the C codes are in the same memory space as JVM is, that is, they are "global" to each X10 place in the current implementation of X10c that generates Java code. Thread safety is a concern when accessing these data structures from X10. There are two versions of fft_fftw3: one allocates a separate copy of fftw3 plans for each place, while the other uses a single copy of fftw3 plans for all the places (the format of ffts performed at each place is the same.). To use the first version, set  MAKE_FFTW_THREADSAFE to be 1 in "fft_fftw3.c" and MAKE_FFTW_THREADSAFE to be true in "Ft.x10". Thread safety is realized by using the pthreads library.
 
To compile and run the code, for example, please follow the following steps:
   1) x10c Ft.x10 (Add appropriate x10c options if needed such as -BAD_PLACE_RUNTIME_CHECK=false)
   2) make 
   3) x10  -J-mx2000m -J-ms2000m -libpath . -NUMBER_OF_LOCAL_PLACES=4 -INIT_THREADS_PER_PLACE=1 
  	-PRELOAD_CLASSES=true Ft -w

Please note that to run the code in cygwin environment, one needs first to uncomment the first System.load statment in "Ft.x10". Then, one needs to set MAKE_FFTW_THREADSAFE accordingly in fft-fftw3.c and Ft.x10 as described above. Before running Makefile, one needs to update the location of fftw3 and/or pthreads libraries.

  The output looks like

  	NPB CLASS W 128x128x32 6 iterations
  	IBM X10 NAS FT: class W (NPB CLASS W 128x128x32 6 iterations)
  	Iter = 1 checksum_real = 567.3612178943621 checksum_imag = 529.3246849175001
 	Iter = 2 checksum_real = 563.1436885271294 checksum_imag = 528.214998662905
  	Iter = 3 checksum_real = 559.4024089970093 checksum_imag = 527.0996558037011
  	Iter = 4 checksum_real = 556.0698047020239 checksum_imag = 526.0027904925023
  	Iter = 5 checksum_real = 553.089899124982 checksum_imag = 524.9400845632628
  	Iter = 6 checksum_real = 550.4159734538397 checksum_imag = 523.9212247086305
  	The wall clock time is 633.3439149856567
  	Result verification successful
 
  Related files: Ft.x10 Ft.c Ft.h fft_fftw3 c_randdp Makefile, FtStatic.x10, FtStatic.c
  Note that FtStatic.X10 a variation of Ft.x10 to be used by x10c++ which generates C++
	codes running with lapi. The X10 code compiled with x10c++ is expected to have
	better performance.
  Author: Tong Wen @ IBM Research
  Date:   Nov 2007
  TODO: In cygwin environment, we still have linking problems. The runtime errors are recorded in
	RuntimeErrors.txt. x10.lang.Runtime.arrayCopy is not working which generates wrong result.
 	
