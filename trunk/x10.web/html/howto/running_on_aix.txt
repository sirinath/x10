How to run on AIX (rios2.watson.ibm.com)
=========================================

Kemal says:

If you submit a problem through the 'helpnow' sign on the top of the w3.ibm.com web page 
(select operating systems/aix as the category of the problem) they are usually 
pretty responsive on weekends. 


Unfortunately, Eclipse doesnt run on AIX. (At least I dont know how to get it to :-(.)

1. Make sure you have an Agora id.
2. Make sure you have a GSA id.
3. ssh into rios2, then execute gsa_login to get ur GSA directory mounted.
4. Execute (on bash): export CVSROOT=:ext:<yourid>@quillback.cs.purdue.edu:/home/ibmcvs
5. Execute (on bash): export CVS_RSH=ssh
6. Copy your ssh private key to ~/.ssh/, so that CVS will automatically log you into the Purdue server.
7. Execute (on bash): 'cvs co x10', or 'cvs upd -dPA' in the x10 directory (as appropriate).
8. Now you need to build. Use ant to build it. Ensure you have ant on your classpath, if necessary download it from www.apache.org.
9. Go to the x10 home directory and execute (bash): ant clobber all
(This will use the information in build.xml to (re)build x10.)
10. Ensure that x10/bin is on your classpath, this gives you testScript, x10 and x10c commands.
11. Execute (on bash): export X10_PLATFORM=aix_ppc
(this is used for setting -Djava.library.path by the x10 command)

How to debug deadlocks in the X10 runtime.
============================================

rios2 is an AIX multiprocessor, and the JVM uses native threads. 
So race conditions often manifest themselves on rios2, whereas they may not
manifest themselves under Cygwin/Windows.

If you suspect a deadlock, go to another shell, find out the processid of
the JVM running ur X10 program, and execute: kill -3 <pid>

This sends a QUIT signal to the JVM, which responds by printing out a dump file
and terminating.

The dump file will tell you will contain an assertion that there is a deadlock 
(if there is one). In fact it will tell you which threads are in the deadlock loop.
Later in the dump file you will get a dump of the stack of each thread, so u can find
out precisely which code was executing at the time of the deadlock. 

