'''Regions'''

A region is a set of indices (called points), as in ZPL. Each region R has a constant rank, R.rank, which is an integer >=0. (The null region, [], has rank 0.) 

For instance

   enum   E = 0..100;
   region R = [0..99, -1..4];   // each bound of a dimension may be specified separately
   region R = [E, E];           // represents a square region.
   region R = [100, 100];       // same region as above.
   region W = [Week, Weekday];  // a representation for 52*7 days.
   region Null = [];            // represents  the empty region
   region AandB = A && B;       // represents the intersection of two regions
   region AOrB = A || B;        // represents the union of two regions

A region may be constructed using a comma-separated list of XtenEnums within square brackets, as above. For convenience we allow an integer n to stand for the enumeration 1..n. 

Various operators are provided on regions. These allow the programmer to express sparse as well as dense regions.

Region variables can be declared and used within user programs. They are implicitly final since they can be used within type expressions (and hence must not take on different values at runtime.)

All the points in a region are totally ordered lexicographically. Thus the points of a region R=[1..2,1..2] are ordered as (1,1), (1,2), (2,1), (2,2).

A region is said to be convex if it is of the form [T1,..., Tk] for some enumeration Ti. Such a region satisfies the property that if two points p1 and p2 are in the region, then so is every point p2 between them. (Note that || may produce non-convex regions from convex regions, e.g. [1,1] || [3,3].) 

For each region R, the convex closure of R is the smallest convex region enclosing R.  For each integer i less than R.rank, the term R.i represents the enumeration in the ith dimension of the convex closure of R. It may be used in a type expression wherever an enumeration may be used.

''Operations on Regions''

Let R be a region. A subset of R is also called a sub-region. 

Let R1 and R2 be two regions.

R1 && R2 is the intersection of R1 and R2.

R1 || R2 is defined only if R1 and R2 have no point in common, and represents the union of the two.

R1 - R2 is the set difference of R1 and R2.

----
Todo

* Need to determine if regions can be passed to and returned from methods.
* Can objects have region fields?
* Need to determine if X10 control constructs already provide the nesting of regions of ZPL.
* Need to determine if directions (and "of", wrap, reflect) make sense and should be included in X10.
* Need to add translations (ZPL @). Check whether they are widely useful.
* Need to determine if index<d> arrays are useful enough to include them.
* Need to introduce reduce and scan operations on regions, and allow the user to define them.t p2 between them. (Note that || may produce non-convex regions from convex regions, e.g. [1,1] || [3,3].) 

For each region R, the convex closure of R is the smallest convex region enclosing R.  For each integer i less than R.rank, the term R.i represents the enumeration in the ith dimension of the convex closure of R. It may be used in a type expression wherever an enumeration may be used.
