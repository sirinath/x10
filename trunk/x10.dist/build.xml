<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [<!ENTITY buildfile SYSTEM "file:./build-user.xml">]>
<project name="x10.dist" default="dist" basedir=".">
    &buildfile;
    <property name="x10.home" value="${basedir}/.."/>
    <property name="builddir" value="classes"/>
    <property name="bin" location="${basedir}/bin"/>
    <property name="etc" location="${basedir}/etc"/>
    <property name="incdir" location="${basedir}/include"/>
    <property name="lib" location="${basedir}/lib"/>
    <property name="lpg.jar" value="lpg.jar"/>
    <property name="lpg.url" value="http://easynews.dl.sourceforge.net/sourceforge/lpg"/>
    <property name="lpg.jar.url" value="${lpg.url}/lpg2.jar"/>
    <property name="polyglot.jar" value="polyglot3.jar"/>
    <property name="polyglot.url" value="http://www.cs.cornell.edu/Projects/polyglot/eclipseUpdates/plugins"/>
    <property name="polyglot.jar.url" value="${polyglot.url}/polyglot3_latest.jar"/>
    <property name="x10.constraints.location" location="${x10.home}/x10.constraints"/>
    <property name="constraints.jar" value="x10constraints.jar"/>
    <property name="x10.common.location" location="${x10.home}/x10.common.17"/>
    <property name="common.jar" value="x10common.jar"/>
    <property name="x10.compiler.location" location="${x10.home}/x10.compiler.p3"/>
    <property name="compiler.jar" value="x10c.jar"/>
    <property name="config" value="standard.cfg"/>
    <property name="x10.runtime.location" location="${x10.home}/x10.runtime.17"/>
    <property name="runtime.jar" value="x10.jar"/>
    <property name="x10.tests.location" location="${x10.home}/x10.tests"/>
    <path id="project.classpath"/>
    <!-- get the environment variables -->
    <property environment="env"/>

    <target name="init">
        <tstamp/>
        <condition property="local.polyglot.jar" value="${env.LOCAL_POLYGLOT_JAR}">
            <isset property="env.LOCAL_POLYGLOT_JAR"/>
        </condition>
        <condition property="local.lpg.jar" value="${env.LOCAL_LPG_JAR}">
            <isset property="env.LOCAL_LPG_JAR"/>
        </condition>
    </target>

    <target name="clean">
        <delete>
            <fileset dir="${bin}">
                <include name="defs"/>
                <include name="setupX10"/>
                <include name="x10"/>
                <include name="x10c"/>
            </fileset>
        </delete>
    </target>

    <target name="distclean" depends="clean">
        <delete dir="${etc}" />
	<mkdir dir="${etc}" />	
        <delete dir="${incdir}" />
	<mkdir dir="${incdir}" />	
        <delete dir="${lib}" />
	<mkdir dir="${lib}" />	
        <ant antfile="${x10.constraints.location}/build.xml" target="clean" inheritAll="false" dir="${x10.constraints.location}"/>
        <ant antfile="${x10.common.location}/build.xml" target="clean" inheritAll="false" dir="${x10.common.location}"/>
        <ant antfile="${x10.runtime.location}/build.xml" target="clean" inheritAll="false" dir="${x10.runtime.location}"/>
        <ant antfile="${x10.compiler.location}/build.xml" target="clean" inheritAll="false" dir="${x10.compiler.location}"/>
    </target>

    <target name="dist-java" depends="init,build,common-jar,constraints-jar,runtime-java,compiler-jar"/>
    <target name="dist-cpp" depends="dist-java,runtime-cpp"/>
    <target name="dist" depends="dist-java,dist-cpp"/>

    <target name="lpg-jar" depends="init,lpg-local-jar" unless="local.lpg.jar">
        <mkdir dir="${lib}"/>
        <get usetimestamp="true" ignoreerrors="true" src="${lpg.jar.url}" dest="${lib}/${lpg.jar}"/>
        <available property="lpg.jar.present" file="${lib}/${lpg.jar}"/>
        <fail message="Unable to get ${lpg.jar}" unless="lpg.jar.present"/>
    </target>
    <target name="lpg-local-jar" depends="init" if="local.lpg.jar">
        <mkdir dir="${lib}"/>
        <copy file="${local.lpg.jar}" tofile="${lib}/${lpg.jar}"/>
        <available property="lpg.jar.present" file="${lib}/${lpg.jar}"/>
        <fail message="Unable to find ${lpg.jar}" unless="lpg.jar.present"/>
    </target>
    <target name="polyglot-jar" depends="init,polyglot-local-jar" unless="local.polyglot.jar">
        <mkdir dir="${lib}"/>
        <get usetimestamp="true" ignoreerrors="true" src="${polyglot.jar.url}" dest="${lib}/${polyglot.jar}"/>
        <available property="polyglot.jar.present" file="${lib}/${polyglot.jar}"/>
        <fail message="Unable to get ${polyglot.jar}" unless="polyglot.jar.present"/>
    </target>
    <target name="polyglot-local-jar" depends="init" if="local.polyglot.jar">
        <mkdir dir="${lib}"/>
        <copy file="${local.polyglot.jar}" tofile="${lib}/${polyglot.jar}"/>
        <available property="polyglot.jar.present" file="${lib}/${polyglot.jar}"/>
        <fail message="Unable to find ${polyglot.jar}" unless="polyglot.jar.present"/>
    </target>

    <target name="build" depends="init,bin,etc,lpg-jar,polyglot-jar">
        <echo message="${ant.project.name}: ${ant.file}"/>
    </target>

    <target name="runtime-java" depends="init,common-jar,constraints-jar">
        <ant antfile="${x10.runtime.location}/build.xml" target="dist-java" inheritAll="false" dir="${x10.runtime.location}"/>
        <mkdir dir="${lib}"/>
        <copy todir="${lib}">
            <fileset dir="${x10.runtime.location}/${builddir}" includes="${runtime.jar}"/>
        </copy>
    </target>

    <target name="runtime-cpp" depends="init">
        <ant antfile="${x10.runtime.location}/build.xml" target="dist-cpp" inheritAll="false" dir="${x10.runtime.location}"/>
    </target>

    <target name="constraints-jar" depends="init">
        <ant antfile="${x10.constraints.location}/build.xml" target="build" inheritAll="false" dir="${x10.constraints.location}"/>
        <!--
        <ant antfile="${x10.constraints.location}/build.xml" target="jar" inheritAll="false" dir="${x10.constraints.location}"/>
        <mkdir dir="${lib}"/>
        <copy todir="${lib}">
            <fileset dir="${x10.constraints.location}/${builddir}" includes="${constraints.jar}"/>
        </copy>
        -->
    </target>

    <target name="common-jar" depends="init">
        <ant antfile="${x10.common.location}/build.xml" target="build" inheritAll="false" dir="${x10.common.location}"/>
        <!--
        <ant antfile="${x10.common.location}/build.xml" target="jar" inheritAll="false" dir="${x10.common.location}"/>
        <mkdir dir="${lib}"/>
        <copy todir="${lib}">
            <fileset dir="${x10.common.location}/${builddir}" includes="${common.jar}"/>
        </copy>
        -->
    </target>

    <target name="compiler-jar" depends="init,common-jar,constraints-jar">
        <ant antfile="${x10.compiler.location}/build.xml" target="jar" inheritAll="false" dir="${x10.compiler.location}"/>
        <mkdir dir="${lib}"/>
        <copy todir="${lib}">
            <fileset dir="${x10.compiler.location}/${builddir}" includes="${compiler.jar}"/>
        </copy>
    </target>

    <target name="bin"
            description="configure bin directory"
            depends="bin-deps"
            unless="bin.up-to-date">
        <antcall target="setupX10"/>
        <antcall target="x10"/>
        <antcall target="x10c"/>
    </target>

    <target name="etc"
            description="configure etc directory"
            depends="etc-deps"
            unless="etc.up-to-date">
        <antcall target="config"/>
    </target>

    <target name="etc-deps">
        <condition property="etc.up-to-date">
            <!-- Cannot simply say <true/> -->
            <istrue value="true"/>
        </condition>
    </target>

    <target name="bin-deps">
        <uptodate property="setupX10.up-to-date" targetfile="${bin}/setupX10">
            <srcfiles file="${ant.file}"/>
            <srcfiles file="${bin}/setupX10.in"/>
        </uptodate>
        <uptodate property="x10.up-to-date" targetfile="${bin}/x10">
            <srcfiles file="${ant.file}"/>
            <srcfiles file="${bin}/x10.in"/>
        </uptodate>
        <uptodate property="x10c.up-to-date" targetfile="${bin}/x10c">
            <srcfiles file="${ant.file}"/>
            <srcfiles file="${bin}/x10c.in"/>
        </uptodate>
        <condition property="bin.up-to-date">
            <and>
                <isset property="setupX10.up-to-date"/>
                <isset property="x10.up-to-date"/>
                <isset property="x10c.up-to-date"/>
            </and>
        </condition>
    </target>

    <target name="config"
            description="creates the default config file">
        <mkdir dir="${etc}"/>
        <copy todir="${etc}">
            <fileset dir="${x10.compiler.location}/etc" includes="${config}"/>
        </copy>
    </target>

    <target name="defs-deps">
        <condition property="defs.up-to-date">
            <uptodate targetfile="${bin}/defs" srcfile="${ant.file}"/>
        </condition>
    </target>

    <target name="find-java">
        <echo message="JAVA_HOME = '${env.JAVA_HOME}'"/>
        <echo message="java.home = '${java.home}'"/>
        <!-- First check in $JAVA_HOME/bin -->
        <condition property="java.executable"
                   value="${env.JAVA_HOME}${file.separator}bin${file.separator}java">
            <or>
                <available file="${env.JAVA_HOME}${file.separator}bin${file.separator}java"/>
                <available file="${env.JAVA_HOME}${file.separator}bin${file.separator}java.exe"/>
            </or>
        </condition>
        <!-- Now check in ${java.home}/bin -->
        <condition property="java.executable"
                   value="${java.home}${file.separator}bin${file.separator}java">
            <and>
                <not>
                    <isset property="java.executable"/>
                </not>
                <or>
                    <available file="${java.home}${file.separator}bin${file.separator}java"/>
                    <available file="${java.home}${file.separator}bin${file.separator}java.exe"/>
                </or>
            </and>
        </condition>
        <fail message="Could not find the java executable" unless="java.executable"/>
        <echo message="JAVA = '${java.executable}'"/>
    </target>

    <target name="executable-defs" depends="find-java,defs-deps" unless="defs.up-to-date"
            description="creates a file containing common environment variable definitions">
        <echo message="Creating ${bin}/defs"/>
        <echo message="FILE_SEP = '${file.separator}'"/>
        <echo message="PATH_SEP = '${path.separator}'"/>
        <echo message="X10_PLATFORM = '${env.X10_PLATFORM}'"/>
        <echo message="TOP = '${basedir}'"/>
        <echo file="${bin}/defs" append="no">#!/bin/bash
# DO NOT EDIT - This file was automatically generated.

#JAVA='${java.executable}'
[ -n "$JAVA_HOME" ] || JAVA_HOME='${env.JAVA_HOME}'
JRE_HOME='${java.home}'
#FILE_SEP='${file.separator}'
#PATH_SEP='${path.separator}'
#CONFIG_FILE='${config}'
POLYGLOT_JAR='${polyglot.jar}'
LPG_JAR='${lpg.jar}'
POLYGLOT_URL='${polyglot.jar.url}'
LPG_URL='${lpg.jar.url}'

UNAME=`uname -s -p | sed -e 's/ /,/g'`
FILE_SEP='/'; if [[ "$UNAME" = CYGWIN* ]]; then FILE_SEP='\\'; fi
PATH_SEP=':'; if [[ "$UNAME" = CYGWIN* ]]; then PATH_SEP=';'; fi
[ -n "$X10_PLATFORM" ] || \
case "$UNAME" in
  CYGWIN*) export X10_PLATFORM='win32_x86';;
  Linux,*) export X10_PLATFORM='linux_x86';;
  AIX,*) export X10_PLATFORM='aix_ppc';;
  Darwin,i386) export X10_PLATFORM='macosx_x86';;
  Darwin,powerpc) export X10_PLATFORM='macosx_ppc';;
  *) echo "Unrecognized platform: '$UNAME'"; exit 1;;
esac
# FIXME: the above assumes that Cygwin==win32 and Linux==x86 and AIX==ppc

prog=$(readlink $0)
if [ "$prog" = "" ]; then prog="$0"; fi
TOP="$(cd "$(dirname $prog)/.." &amp;&amp; pwd)"
if [[ "$UNAME" = CYGWIN* ]]; then TOP="$(cygpath -aw "$TOP")"; fi

if [ -n "$JAVA_HOME" -a -e "$JAVA_HOME/bin/java" ]; then
    JAVA="$JAVA_HOME/bin/java"
elif [ -n "$JRE_HOME" -a -e "$JRE_HOME/bin/java" ]; then
    JAVA="$JRE_HOME/bin/java"
else
    echo "JAVA_HOME ($JAVA_HOME) is not pointing to a JRE or a JDK"
    exit 1
fi
if [[ "$UNAME" = CYGWIN* ]]; then JAVA="$(cygpath -au "$JAVA")"; fi
if [[ "$UNAME" = CYGWIN* ]]; then JAVA_HOME="$(cygpath -aw "$JAVA_HOME")"; fi

</echo>
    </target>

    <target name="setupX10" unless="setupX10.up-to-date"
            depends="executable-defs"
            description="creates a configuration script for x10">
        <echo message="Creating ${bin}/setupX10"/>
        <concat destfile="${bin}/setupX10" append="no">
            <filelist dir="${bin}" files="defs"/>
        </concat>
        <concat destfile="${bin}/setupX10" append="yes">
            <filelist dir="${bin}" files="setupX10.in"/>
        </concat>

        <chmod perm="+x" file="${bin}/x10"/>

        <delete file="${bin}/defs"/>
    </target>

    <target name="x10c" unless="x10c.up-to-date"
            depends="executable-defs"
            description="creates the executable script x10c">
        <echo message="Creating ${bin}/x10c"/>
        <concat destfile="${bin}/x10c" append="no">
            <filelist dir="${bin}" files="defs"/>
        </concat>
        <concat destfile="${bin}/x10c" append="yes">
            <filelist dir="${bin}" files="x10c.in"/>
        </concat>

        <chmod perm="+x" file="${bin}/x10c"/>

        <delete file="${bin}/defs"/>
    </target>

    <target name="x10" unless="x10.up-to-date"
            depends="executable-defs"
            description="creates the executable script x10">
        <echo message="Creating ${bin}/x10"/>
        <concat destfile="${bin}/x10" append="no">
            <filelist dir="${bin}" files="defs"/>
        </concat>
        <concat destfile="${bin}/x10" append="yes">
            <filelist dir="${bin}" files="x10.in"/>
        </concat>

        <chmod perm="+x" file="${bin}/x10"/>

        <delete file="${bin}/defs"/>
    </target>

    <!-- the following lines have only ever been tested on AIX -->
    <!-- they build the LAPI support library -->
    <target name="buildLAPISupportTask">
        <javac srcdir="${src}/lapi_support" destdir="${src}/lapi_support"/>
    </target>

    <target name="declareLAPISupportTask" depends="buildLAPISupportTask">
        <taskdef name="buildLAPISupport"
                 classname="LAPISupportantTask"
                 classpath="${src}/lapi_support"/>
    </target>

    <target name="lapi-support" depends="declareLAPISupportTask">
        <buildLAPISupport srcdir="${src}/lapi_support" classes="${builddir}" bindir="${bin}">
        </buildLAPISupport>
    </target>
    <!-- the preceding lines have only ever been tested on AIX -->

    <target name="zip-version" depends="init" unless="zip.version">
        <property name="zip.version" value="${DSTAMP}-${TSTAMP}"/>
    </target>
    <target name="src-zip-version" depends="init,zip-version" unless="src.zip.version">
        <property name="src.zip.version" value="${zip.version}-src"/>
    </target>
    <target name="test-zip-version" depends="init,zip-version" unless="test.zip.version">
        <property name="test.zip.version" value="${zip.version}-testsuite"/>
    </target>
    <target name="zip-location" depends="init" unless="zip.location">
        <property name="zip.location" value="${x10.home}"/>
    </target>
    <target name="src-zip-location" depends="init,zip-location" unless="src.zip.location">
        <property name="src.zip.location" value="${zip.location}"/>
    </target>
    <target name="test-zip-location" depends="init,zip-location" unless="test.zip.location">
        <property name="test.zip.location" value="${zip.location}"/>
    </target>
    <target name="set-version" depends="init,zip-version,src-zip-version,test-zip-version"/>
    <target name="set-zip-location" depends="init,zip-location,src-zip-location,test-zip-location"/>
    <target name="zip" depends="set-version,set-zip-location,dist">
        <zip destfile="${zip.location}/x10-${zip.version}.zip">
            <zipfileset prefix="" dir="${basedir}" includes="epl-v10.html,RELEASE.NOTES,INSTALL"/>
            <zipfileset prefix="bin" dir="${basedir}/bin" includes="setupX10,x10,x10c"/>
            <zipfileset prefix="doc" dir="${basedir}/doc" excludes="releng/**,**/.*.swp"/>
            <zipfileset prefix="etc" dir="${etc}" includes="${config}"/>
            <zipfileset prefix="lib" dir="${lib}" includes="*.jar"/>
        </zip>
    </target>
    <target name="src-zip" depends="srczip"/>
    <target name="srczip" depends="set-version,set-zip-location,build">
        <zip destfile="${src.zip.location}/x10-${src.zip.version}.zip">
            <zipfileset prefix="" dir="${basedir}" includes="epl-v10.html,RELEASE.NOTES,BUILD"/>
            <zipfileset prefix="" dir="${x10.tests.location}" includes="TESTING"/>
            <zipfileset prefix="x10.dist" dir="${basedir}" excludes="releng/**,**/.*.swp,lib/**,etc/**" includes=".launchConfigs/*,.classpath,.project,README,INSTALL,build*,exportPlugin.xml,bin/*.in,lib/${polyglot.jar},lib/${lpg.jar}"/>
            <zipfileset prefix="x10.compiler.p3" dir="${x10.compiler.location}" excludes="releng/**,**/.*.swp,classes/**"/>
            <zipfileset prefix="x10.runtime.17" dir="${x10.runtime.location}" excludes="releng/**,**/.*.swp,classes/**"/>
            <zipfileset prefix="x10.constraints" dir="${x10.constraints.location}" excludes="releng/**,**/.*.swp,classes/**"/>
            <zipfileset prefix="x10.common.17" dir="${x10.common.location}" excludes="releng/**,**/.*.swp,classes/**"/>
            <zipfileset prefix="x10.tests" dir="${x10.tests.location}" excludes="releng/**,**/.*.swp,lib/**,etc/**" includes="build*,README,bin/*.in,bin/testScript*,bin/newpgrp,bin/listFailures,examples/README,**/*.x10,**/.ThisIsAnX10TestDirectory"/>
        </zip>
    </target>
    <target name="test-zip" depends="testzip"/>
    <target name="testzip" depends="set-version,set-zip-location,build">
        <zip destfile="${test.zip.location}/x10-${test.zip.version}.zip">
            <zipfileset fullpath="TESTS-README" dir="${x10.tests.location}" includes="README"/>
            <zipfileset prefix="" dir="${basedir}" includes="epl-v10.html"/>
            <zipfileset prefix="" dir="${x10.tests.location}" includes="projectList.txt"/>
            <zipfileset prefix="" dir="${x10.tests.location}" excludes="releng/**,**/.*.swp,lib/**,etc/**" includes="build*,bin/*.in,bin/testScript*,bin/newpgrp,bin/listFailures,examples/README,**/*.x10,**/.ThisIsAnX10TestDirectory"/>
            <!--<zipfileset prefix="" dir="${x10.tests.location}" excludes="releng/**,**/.*.swp,lib/**,etc/**" includes="examples/Constructs/Extern/*Impl.c*"/> TODO-->
        </zip>
    </target>
    <!--
      To build a zip with a specific version (VER), invoke the target below as
         ant -Dzip.version=VER zips
    -->
    <target name="zips" depends="zip,srczip,testzip"/>

</project>
