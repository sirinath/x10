// SYNOPSIS: #0.main(...)

extern "C" {
    int main(int ac, char **av) {
        Rail<x10aux::ref<String> >* args = x10aux::convert_args(ac, av);
##ifndef NO_EXCEPTIONS
        try {
##endif
        if (x10aux::__here__ == 0) {
            x10aux::general_finish_start();
            #0::main(args);
            x10aux::general_finish_end();
        } else {
            x10aux::general_wait();
        }
##ifndef NO_EXCEPTIONS
        } catch(int exitCode) {
            x10aux::exitCode = exitCode;
        } catch(x10aux::__ref& e) {
            // Assume that only throwables can be thrown
            x10aux::ref<Throwable> &e_ = static_cast<x10aux::ref<Throwable>&>(e);
            fprintf(stderr, "At place %d: ", (int)x10aux::__here__);
            fprintf(stderr, "Uncaught exception of type: %s\n", e_->_type()->name().c_str());
            fprintf(stderr, "%s\n", e_->toString()->c_str());
            x10aux::ref<ValRail<x10aux::ref<String> > > trace = e_->getStackTrace();
            x10aux::ref<Iterator<x10aux::ref<String> > > it = trace->iterator();
            while (it->hasNext()) {
                fprintf(stderr, "        at %s\n", it->next()->c_str());
            }
            x10aux::exitCode = 1;
        } catch(...) {
            fprintf(stderr, "%d: Caught exception\n", (int)x10aux::__here__);
            x10aux::exitCode = 1;
        }
##endif
        x10aux::free_args(args);
        return x10aux::exitCode;
    }
}

// the original app-main method

