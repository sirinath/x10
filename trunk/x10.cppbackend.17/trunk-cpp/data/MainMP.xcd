// SYNOPSIS: #0.main(...)

extern "C" {
    void __pgasrt_tsp_barrier(int,int);
    int main(int ac, char **av) {
        x10aux::ref<Rail<x10aux::ref<String> > > args = x10aux::convert_args(ac, av);
##ifndef NO_EXCEPTIONS
        try {
##endif
            __pgasrt_tsp_barrier(0,1);
            x10aux::InitDispatcher::runInitializers();
            (new (x10aux::alloc<VoidFun_0_0>(sizeof(x10aux::BootStrapClosure)))
                x10aux::BootStrapClosure(#0::main,args))->apply();
/*
            x10::runtime::Runtime::start( (x10aux::ref<x10aux::BootStrapClosure>)
                new (x10aux::alloc<VoidFun_0_0>(sizeof(x10aux::BootStrapClosure)))
                    x10aux::BootStrapClosure(#0::main,args)  );
*/

##ifndef NO_EXCEPTIONS
        } catch(int exitCode) {
            x10aux::exitCode = exitCode;
        } catch(x10aux::__ref& e) {
            // Assume that only throwables can be thrown
            x10aux::ref<Throwable> &e_ = static_cast<x10aux::ref<Throwable>&>(e);
            fprintf(stderr, "Uncaught exception at place %d of type: %s\n",
                                (int)x10_here(), e_->_type()->name().c_str());
            fprintf(stderr, "%s\n", e_->toString()->c_str());
            x10aux::ref<ValRail<x10aux::ref<String> > > trace = e_->getStackTrace();
            x10aux::ref<Iterator<x10aux::ref<String> > > it = trace->iterator();
            while (it->hasNext()) {
                fprintf(stderr, "        at %s\n", it->next()->c_str());
            }
            x10aux::exitCode = 1;
        } catch(...) {
            fprintf(stderr, "Caught unrecognised exception at place %d\n", (int)x10_here());
            x10aux::exitCode = 1;
        }
##endif
        x10aux::free_args(args);
        return x10aux::exitCode;
    }
}


// the original app-main method

