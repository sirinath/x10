UNAME=`uname -s`
FILE_SEP='/'; if [[ "$UNAME" = CYGWIN* ]]; then FILE_SEP='\'; fi
PATH_SEP=':'; if [[ "$UNAME" = CYGWIN* ]]; then PATH_SEP=';'; fi
[ -n "$X10_PLATFORM" ] || \
case "$UNAME" in
  CYGWIN*) X10_PLATFORM='win32_x86';;
  Linux) X10_PLATFORM='linux_x86';;
  *) echo "Unrecognized platform: '$UNAME'"; exit 1;;
esac

TOP="$(cd "$(dirname $0)/.." && pwd)"
if [[ "$UNAME" = CYGWIN* ]]; then TOP="$(cygpath -aw "$TOP")"; fi

help=""
time=""
verbose=""
extra_cp=""
extra_lib=""
mx=""
defs=""
java_args=""
args=""

parse=true
while [ -n "$1" ]; do
    if [ -z "$parse" ]; then
        args="$args '$1'"
        shift
        continue
    fi
    case "$1" in
        -h|-help|--help) help="1"; break;;
        -v|-verbose|--verbose) verbose="1";;
        -t|-time) time="time ";;
        -mx) shift; mx="$1";;
        -D*) defs="${defs} $1";;
        -classpath|-cp) shift; extra_cp="$1";;
        -libpath) shift; extra_lib="$1";;
        -J*) java_args="${java_args} '${1##-J}'";;
        --) parse=;;
        *) args="$args '$1'";;
    esac
    shift
done

if [ -n "$help" -o -z "$args" ]; then
    cat << EOF
Usage: x10 [options] <main-class> [arg0 arg1 ...]
where [options] includes:
    -t -time                 display execution time
    -v -verbose --verbose    print verbose debugging information
    -h -help --help          print this message
    -mx <size>               set max heap size, e.g., -mx 200M
    -classpath <path>        search path for class files
    -libpath <path>          search path for native libraries
    -J<arg>                  pass <arg> to java.
        e.g., use -J-verbose to make java execution verbose.

X10 configuration:
    -NUMBER_OF_LOCAL_PLACES=<int>  number of places (default 4)
    -LOAD=<shared-lib>             load specified shared library
    -SAMPLING_FREQUENCY_MS=<int>   default 50ms
    -DUMP_STATS_ON_EXIT=<bool>     print statistics on exit
    -STATISTICS_DISABLE=<stats>    disable selected runtime statistics
                                   currently supported: all, none
EOF
    exit 1
fi

if [ -n "$JAVA_HOME" -a -e "$JAVA_HOME/bin/java" ]; then
    JAVA="$JAVA_HOME/bin/java"
elif [ -n "$JRE_HOME" -a -e "$JRE_HOME/bin/java" ]; then
    JAVA="$JRE_HOME/bin/java"
else
    echo "JAVA_HOME ($JAVA_HOME) is not pointing to a JRE or a JDK"
    exit 1
fi
if [[ "$UNAME" = CYGWIN* ]]; then JAVA="$(cygpath -au "$JAVA")"; fi
if [[ "$UNAME" = CYGWIN* ]]; then JAVA_HOME="$(cygpath -aw "$JAVA_HOME")"; fi

LIB_DIR="${TOP}${FILE_SEP}lib"

## FIXME vv: hack!
classpath="${TOP}${FILE_SEP}..${FILE_SEP}x10.runtime${FILE_SEP}classes${PATH_SEP}"
## FIXME ^^
classpath=".${PATH_SEP}${classpath}${LIB_DIR}${FILE_SEP}x10.jar"

if [ -n "$extra_cp" ]; then
   classpath="$extra_cp${PATH_SEP}$classpath"
fi

externpath="${TOP}${FILE_SEP}lib${FILE_SEP}${X10_PLATFORM}"
if [ -n "$extra_lib" ]; then
   externpath="$extra_lib${PATH_SEP}$externpath"
fi

java_args="-Djava.library.path=\"$externpath\" -ea -classpath \"$classpath\" ${java_args}"

if [ -n "$mx" ]; then
   java_args="-Xmx$mx $java_args"
fi
java_args="${java_args} ${defs}"

command="\"$JAVA\" $java_args x10.lang.Runtime $args"

[ -n "$verbose" ] && echo "$command"

eval "$time$command"
exit $?

