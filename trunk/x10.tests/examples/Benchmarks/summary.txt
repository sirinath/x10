on snakehead 2008/11/19

1. Place checking is very expensive: 60x-800x performance penalty
   relative to X10 code without place checking. (See x10-opt-java vs
   x10-dbg-java.)

2. Basic X10 method calls are as good as Java. (SeqMethodCall1)

3. X10 Rails are 4-5x more expensive than Java arrays. (SeqRail1)

4. Dead simple array-like X10 code is 15x worse than the
   hand-translation into Java. (SeqPseudoArray1)

5. Actual X10 Arrays are an additional 2x slower (possibly due to
   bounds checking combined w/ boxing/unboxing?). TODO: try with
   bounds-checking turned off. (SeqMatMultAdd1a).

6. Using "for ((i,j):Point in r)" loops is an additional 2x more
   expensive than traditional C/Java loops. Likely due to unnecessary
   allocation of Point. (SeqMatMultAdd2a)


--- SeqMethodCall1
java                 169 Mop/s
x10-opt-java         162 Mop/s =java/1.0
x10-dbg-java         199 kop/s =java/848.8 =x10-opt-java/812.3

--- SeqRail1
java                 282 Mop/s
x10-opt-java         62.4 Mop/s =java/4.5
x10-dbg-java         165 kop/s =java/1714.5 =x10-opt-java/378.9

--- SeqPseudoArray1
java                 163 Mop/s
x10-opt-java         11.1 Mop/s =java/14.7

--- SeqMatMultAdd1a
java                 98.1 Mop/s
x10-opt-java         3.17 Mop/s =java/31.0
x10-dbg-java         51.4 kop/s =java/1911.2 =x10-opt-java/61.7

--- SeqMatMultAdd1b
java                 98.1 Mop/s
x10-opt-java         1.61 Mop/s =java/61.1


