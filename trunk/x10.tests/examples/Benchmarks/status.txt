------- KEY ISSUES:

Parallel UTS is 35x slower than sequential UTS with Java back
end. (Parallel version does not yet work with C++ back end). Probably
due to excessive memory allocation.

Using generic classes vs non-generic costs 30x in peformance with C++
back end. Probably due to 16 extra method calls per update (=apply/set
pair) in generic vs non-generic.

Rail access is 7x slower than hand-coded with Java back end. Likely
due to boxing.

Sequential UTS is 4.5x slower than hand-coded with C++ back end.

Rail access is 2x slower than hand-coded with C++ back-end. 

Wrapping rail access in a minimal array-like class (with apply and
set) costs 2x in peformance with both Java and C++ back end.

C++ back-end is faster than Java back-end for the simple tests (rail,
non-generic pseudo-array), slower for the more complex tests (generic
array, sequential UTS).

------- PERFORMANCE DATA:

                    cpp-opt        x10-cpp-opt    java-opt       x10-java-opt

SeqRail2            a: 261  Mop/s  b: 117  Mop/s  c: 243  Mop/s  d: 34.6 Mop/s
SeqPseudoArray2a    e: 259  Mop/s  f: 62.2 Mop/s  g: 242  Mop/s  h: 19.6 Mop/s
SeqPseudoArray2b                   i: 2.16 Mop/s                 j: 20.7 Mop/s
SeqArray2                          k: 2.09 Mop/s                 l: 7.08 Mop/s

SeqUTSBin1          m: 7.15 Mop/s  n: 1.60 Mop/s  o: 9.74 Mop/s  p: 7.05 Mop/s
ParUTSBin1                                                       q: 197  kop/s

------- COMPARISONS:

C++ back end relative to hand-coded
    rail access                  2.2x slower (a/b)
    non-generic pseudo-array     4.2x slower (e/f)
    generic pseudo-array       120.2x slower (e/i)
    array                      124.0x slower (e/k)
    sequential UTS               4.5x slower (m/n)

Java back end relative to hand-coded
    rail access                  7.0x slower (c/d)
    non-generic pseudo-array    12.3x slower (g/h)
    generic pseudo-array        11.7x slower (g/j)
    array                       34.1x slower (g/l)
    sequential UTS               1.4x slower (o/p)

C++ back end relative to Java back end
    rail access                  3.4x faster (b/d)
    non-generic pseudo-array     3.2x faster (f/h)
    generic pseudo-array         9.6x slower (j/i)
    array                        3.4x slower (l/k)
    sequential UTS               4.4x slower (p/n)

C++ generic vs non-generic      28.9x slower (f/i)

UTS parallel vs sequential      35.9x slower (p/q)

------- COLUMNS:

cpp-opt       hand coded C++, compiled g++ -O3

x10-cpp-opt   X10 with C++ back end, compiled g++ -O3 with checking off

java-opt      hand coded Java

x10-java-opt  X10 with Java back end, checking off

------- ROWS (TESTS):

The first four tests are grouped together because they do essentially
the same work (from the application perspective) and so should ideally
perform the same.

SeqRail2

    Basic rail performance test. Allocate a rail, assign values to
    each element, read it back. Test is written to simulate treating
    the rail as a 2-d array in order (nested loop with index
    calculation) to facilitate comparisons with array performance
    tests SeqPseudoArray2{a,b} and SeqArray2

SeqPseudoArray2a

    Does the same work as SeqRail2, but wrapped in a class with an
    apply and set method to simulate the "best possible" X10 code for
    a 2-d double (non-generic) array class.

SeqPseudoArray2b

    Like SeqPseudoArray2a, but generic instead of double.

SeqArray2

    The actual x10.lang.Array code.

SeqUTSBin1

    Sequential version of an the Unbalanced Tree Search
    benchmark. Recursively visits nodes of a randomly generated tree.

ParUTSBin1

    Parallel version of an the Unbalanced Tree Search
    benchmark. Recursively visits nodes of a randomly generated tree.
