package x10.parser;

public class X10Lexerprs implements com.ibm.lpg.ParseTable, X10Lexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,3,3,1,1,1,1,5,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,3,
            2,2,3,1,3,2,2,3,3,2,
            1,2,2,2,3,3,2,3,2,2,
            0,1,2,2,2,0,2,1,2,1,
            2,2,2,3,2,3,3,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,2,3,1,1,1,1,1,1,
            1,1,1,1,1,2,1,2,2,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,6,2,1,1,1,1,1,
            1,1,6,2,2,2,2,2,2,2,
            2,2,1,2,2,3
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,21,21,22,23,23,23,
            23,24,24,24,24,24,24,24,25,25,
            25,25,26,26,27,27,19,19,7,7,
            30,30,32,32,32,12,12,12,10,10,
            10,10,10,4,4,4,4,4,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,6,6,6,6,6,6,
            6,6,6,6,6,6,6,6,6,6,
            6,6,6,6,6,6,6,6,6,6,
            1,1,1,1,1,1,1,1,1,1,
            11,11,11,11,11,11,11,11,3,3,
            3,3,3,3,3,3,3,3,3,3,
            2,2,35,35,35,8,8,9,9,31,
            31,14,14,29,29,28,28,18,18,18,
            36,36,36,36,36,36,36,36,36,36,
            36,36,36,36,36,36,36,36,36,36,
            36,36,36,36,36,36,36,36,36,15,
            15,15,15,15,15,15,15,15,15,15,
            15,15,15,15,15,15,15,15,15,15,
            15,15,15,15,15,15,15,37,37,37,
            37,37,37,37,37,37,37,37,37,37,
            37,37,37,37,37,37,37,37,37,37,
            37,37,37,37,37,38,38,38,38,38,
            38,38,38,38,38,38,38,38,38,38,
            38,38,38,38,38,38,38,38,38,38,
            38,38,38,13,13,13,13,41,41,33,
            33,33,33,33,33,33,33,34,34,34,
            34,34,34,34,34,34,20,20,20,20,
            20,20,20,20,20,16,16,16,16,16,
            16,16,16,17,17,17,39,408,537,941,
            607,536,536,536,447,610,199,538,634,198,
            198,198,98,998,360,365,58,65,359,5,
            6,7,1,70,440,417,70,70,70,454,
            56,405,70,1035,412,70,353,70,510,534,
            412,200,534,534,534,308,77,1006,419,77,
            77,77,1074,79,534,59,66,1166,534,103,
            68,77,944,68,68,68,382,196,1168,68,
            1024,474,68,467,68,1167,534,474,1171,77,
            205,75,77,1170,75,75,75,926,79,686,
            480,480,480,1172,988,60,67,344,1173,407,
            1176,430,57,64,449,1177,368,1046,430,710,
            484,484,484,75,1113,79,75,1169,520,480,
            734,81,81,81,758,492,492,492,782,496,
            496,496,806,500,500,500,830,504,504,504,
            854,343,343,343,878,508,508,508,902,334,
            334,334,1063,524,1091,526,1102,532,979,524,
            1157,526,958,532,1124,79,1135,79,977,335,
            1178,184,1146,79,728,507,872,989,964,776,
            824,896,1174,1182,1183,1184,1185,549,549
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,0,98,99,
            100,101,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,0,
            98,99,100,101,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,95,
            96,0,98,99,0,0,102,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,75,76,77,78,79,80,81,82,
            83,84,85,86,87,88,89,90,91,92,
            93,94,95,96,0,98,99,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,75,76,0,78,79,80,81,82,
            83,84,85,86,87,88,89,90,91,92,
            93,94,95,96,0,0,0,100,101,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,27,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,73,74,75,76,77,78,79,80,
            81,82,83,84,85,86,87,88,89,90,
            91,92,93,94,95,96,0,98,99,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,0,19,20,
            21,22,23,0,25,26,0,28,29,30,
            31,32,33,0,11,12,13,14,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,0,0,75,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,97,19,20,21,22,23,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,0,19,20,
            21,22,23,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,24,19,20,21,22,23,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,0,19,20,21,22,
            23,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,24,
            19,20,21,22,23,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,0,19,20,21,22,23,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,24,19,20,
            21,22,23,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,0,19,20,21,22,23,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,0,19,20,21,22,
            23,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,24,
            19,20,21,22,23,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            0,16,17,0,1,2,3,4,5,6,
            7,8,27,0,11,0,0,0,15,0,
            0,0,0,0,0,25,26,24,97,0,
            0,28,29,30,31,18,0,34,0,1,
            2,3,4,5,6,7,8,0,0,11,
            0,0,35,15,18,0,0,0,11,12,
            13,14,24,16,17,0,28,29,30,31,
            0,0,34,25,26,18,11,12,13,14,
            77,0,97,0,1,2,3,4,5,6,
            7,8,9,10,0,1,2,3,4,5,
            6,7,8,9,10,0,1,2,3,4,
            5,6,7,8,0,77,80,81,35,36,
            97,27,0,1,2,3,4,5,6,7,
            8,9,10,0,1,2,3,4,5,6,
            7,8,9,10,0,97,0,0,0,27,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,0,1,2,3,4,5,6,7,
            8,9,10,0,1,2,3,4,5,6,
            7,8,9,10,0,1,2,3,4,5,
            6,7,8,9,10,0,1,2,3,4,
            5,6,7,8,9,10,0,1,2,3,
            4,5,6,7,8,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,18,18,18,18,18,
            18,25,26,18,18,18,0,24,32,33,
            0,0,37,38,36,24,24,24,24,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,73,0,
            0,0,0,74,0,78,76,79,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,97,0,100,101,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            549,619,619,619,619,619,619,619,619,619,
            619,619,619,619,619,619,619,619,619,619,
            619,619,619,619,619,619,619,619,619,619,
            619,619,619,619,619,619,619,619,619,619,
            619,619,619,619,619,619,619,619,619,619,
            619,619,619,619,619,619,619,619,619,619,
            619,619,619,619,619,619,619,619,619,619,
            619,619,619,619,619,619,619,619,619,619,
            618,419,619,619,619,619,619,619,619,619,
            619,619,619,619,619,619,619,76,619,619,
            619,619,549,617,617,617,617,617,617,617,
            617,617,617,617,617,617,617,617,617,617,
            617,617,617,617,617,617,617,617,617,617,
            617,617,617,617,617,617,617,617,617,617,
            617,617,617,617,617,617,617,617,617,617,
            617,617,617,617,617,617,617,617,617,617,
            617,617,617,617,617,617,617,617,617,617,
            617,617,617,617,617,617,617,617,617,617,
            617,617,557,622,617,617,617,617,617,617,
            617,617,617,617,617,617,617,617,617,71,
            617,617,617,617,9,624,624,624,624,624,
            624,624,624,624,624,624,624,624,624,624,
            624,624,624,624,624,624,624,624,624,624,
            624,624,624,624,624,624,624,624,624,624,
            624,624,624,624,624,624,624,624,624,624,
            624,624,624,624,624,624,624,624,624,624,
            624,624,624,624,624,624,624,624,624,624,
            624,624,624,624,624,624,624,624,624,624,
            624,624,624,624,624,624,624,624,624,624,
            624,624,624,624,624,624,624,624,624,624,
            624,549,624,624,549,549,624,549,626,626,
            626,626,626,626,626,626,626,626,626,626,
            626,626,626,626,626,626,626,626,626,626,
            626,626,626,626,626,626,626,626,626,626,
            626,551,626,626,626,626,626,626,626,626,
            626,626,626,626,626,626,626,626,626,626,
            626,626,626,626,626,626,626,626,626,626,
            626,626,626,626,626,626,626,626,626,626,
            626,626,626,626,518,626,626,626,626,626,
            626,626,626,626,626,626,626,626,626,626,
            626,626,626,626,549,626,626,549,435,537,
            537,537,537,537,537,537,537,537,536,536,
            536,536,536,536,536,460,536,536,536,536,
            536,398,536,536,393,536,536,536,536,536,
            536,372,522,477,538,538,536,536,536,536,
            536,536,536,536,536,536,536,536,536,536,
            536,536,536,536,536,536,536,536,536,536,
            536,536,536,536,536,536,536,536,536,536,
            538,443,536,438,549,428,576,528,465,453,
            373,584,572,458,568,569,581,582,579,580,
            583,567,564,565,549,549,354,538,538,549,
            534,534,534,534,534,534,534,534,534,534,
            534,534,534,534,534,534,534,534,534,534,
            534,534,534,602,534,534,534,534,534,534,
            534,534,534,534,534,534,534,534,534,534,
            534,534,534,534,534,534,534,534,534,534,
            534,534,534,534,534,534,534,534,534,534,
            534,534,534,534,534,534,534,534,534,534,
            534,534,534,534,534,534,422,534,534,534,
            534,534,534,534,534,534,534,534,534,534,
            534,534,534,534,534,534,549,534,534,1,
            748,748,748,748,748,748,748,748,748,748,
            747,747,747,747,747,747,747,549,747,747,
            747,747,747,62,747,747,549,747,747,747,
            747,747,747,549,607,614,614,607,747,747,
            747,747,747,747,747,747,747,747,747,747,
            747,747,747,747,747,747,747,747,747,747,
            747,747,747,747,747,747,747,747,747,747,
            747,747,549,549,747,549,480,480,480,480,
            480,480,480,480,480,480,480,480,480,480,
            480,480,480,548,480,480,480,480,480,549,
            484,484,484,484,484,484,484,484,484,484,
            484,484,484,484,484,484,484,549,484,484,
            484,484,484,55,630,630,630,630,630,630,
            630,630,630,630,630,630,630,630,630,630,
            630,552,630,630,630,630,630,549,492,492,
            492,492,492,492,492,492,492,492,492,492,
            492,492,492,492,492,160,492,492,492,492,
            492,549,496,496,496,496,496,496,496,496,
            496,496,496,496,496,496,496,496,496,182,
            496,496,496,496,496,549,500,500,500,500,
            500,500,500,500,500,500,500,500,500,500,
            500,500,500,161,500,500,500,500,500,549,
            504,504,504,504,504,504,504,504,504,504,
            504,504,504,504,504,504,504,182,504,504,
            504,504,504,549,892,892,892,892,892,892,
            892,892,892,892,892,892,892,892,892,892,
            892,197,892,892,892,892,892,549,508,508,
            508,508,508,508,508,508,508,508,508,508,
            508,508,508,508,508,162,508,508,508,508,
            508,549,883,883,883,883,883,883,883,883,
            883,883,883,883,883,883,883,883,883,182,
            883,883,883,883,883,54,628,628,628,628,
            628,628,628,628,628,628,609,616,616,609,
            4,430,430,549,539,540,541,542,543,544,
            545,546,512,549,897,549,549,11,894,549,
            549,549,549,195,549,605,605,900,1,549,
            549,896,898,895,469,591,14,899,549,884,
            884,884,884,884,884,884,884,7,78,897,
            549,549,585,894,594,549,549,29,606,613,
            613,606,900,430,430,63,896,898,895,488,
            549,549,899,54,54,589,608,615,615,608,
            901,549,4,549,474,474,474,474,474,474,
            474,474,474,474,28,412,412,412,412,412,
            412,412,412,412,412,182,520,520,520,520,
            520,520,520,520,549,901,623,401,516,514,
            10,535,83,524,524,524,524,524,524,524,
            524,524,524,82,628,628,628,628,628,628,
            628,628,628,628,549,4,549,549,549,905,
            549,526,526,526,526,526,526,526,526,526,
            526,549,532,532,532,532,532,532,532,532,
            532,532,85,628,628,628,628,628,628,628,
            628,628,628,84,628,628,628,628,628,628,
            628,628,628,628,87,628,628,628,628,628,
            628,628,628,628,628,86,628,628,628,628,
            628,628,628,628,628,628,183,733,733,733,
            733,733,733,733,733,10,78,26,12,24,
            25,22,21,163,549,17,13,41,549,549,
            549,164,165,166,167,588,592,596,595,598,
            597,54,54,587,593,599,549,182,449,449,
            549,549,745,745,586,182,182,182,182,549,
            549,549,549,549,549,549,549,549,549,549,
            549,549,549,549,549,549,549,549,549,549,
            549,549,549,549,549,549,549,549,745,549,
            549,549,549,600,549,530,601,904,549,549,
            549,549,549,549,549,549,549,549,549,549,
            549,549,549,4,549,745,745
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 66,
           NT_OFFSET         = 102,
           LA_STATE_OFFSET   = 905,
           MAX_LA            = 1,
           NUM_RULES         = 356,
           NUM_NONTERMINALS  = 41,
           NUM_SYMBOLS       = 143,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 357,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 97,
           EOLT_SYMBOL       = 103,
           ACCEPT_ACTION     = 548,
           ERROR_ACTION      = 549;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
