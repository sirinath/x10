

package x10.parser;

import com.ibm.lpg.*;

class X10Lexerprs implements ParseTable, X10Lexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,3,3,1,1,1,1,5,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,3,
            2,2,3,1,3,2,1,2,2,3,
            2,3,2,2,3,3,2,3,2,2,
            0,1,2,2,2,0,2,1,2,1,
            2,2,2,3,2,3,3,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,2,3,4,1,2,3,1,1,
            1,1,1,1,1,1,1,1,1,2,
            1,2,2,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,2,2,1,1,1,
            1,1,3,2,2,2,2,2,2,2,
            2,2,1,2,2,3
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,21,21,22,23,23,23,
            23,23,23,23,24,24,24,24,25,25,
            25,25,26,26,27,27,19,19,5,5,
            30,30,32,32,32,12,12,12,10,10,
            10,10,10,2,2,2,2,2,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            1,1,1,1,1,1,1,1,1,1,
            11,11,11,11,11,11,11,11,7,7,
            7,7,7,7,7,7,7,7,7,7,
            6,6,35,35,35,35,36,36,36,8,
            8,9,9,31,31,14,14,29,29,28,
            28,18,18,18,37,37,37,37,37,37,
            37,37,37,37,37,37,37,37,37,37,
            37,37,37,37,37,37,37,37,37,37,
            37,37,37,15,15,15,15,15,15,15,
            15,15,15,15,15,15,15,15,15,15,
            15,15,15,15,15,15,15,15,15,15,
            15,38,38,38,38,38,38,38,38,38,
            38,38,38,38,38,38,38,38,38,38,
            38,38,38,38,38,38,38,38,38,39,
            39,39,39,39,39,39,39,39,39,39,
            39,39,39,39,39,39,39,39,39,39,
            39,39,39,39,39,39,39,13,13,13,
            13,42,42,33,33,33,33,33,33,33,
            33,34,34,34,34,34,34,34,20,20,
            20,20,20,20,20,16,16,16,16,16,
            16,16,16,17,17,17,40,308,522,521,
            521,521,387,1066,988,79,876,523,610,203,
            202,202,202,200,366,368,734,81,449,5,
            6,7,81,81,411,363,847,834,79,438,
            1,70,70,70,70,63,67,353,1096,481,
            70,477,859,70,96,70,510,519,519,519,
            519,205,75,75,75,75,427,410,77,77,
            77,77,519,417,911,862,519,103,68,68,
            68,68,880,77,949,364,432,68,1065,364,
            68,1098,68,505,75,519,58,64,75,696,
            476,77,477,684,376,77,709,533,1099,376,
            376,344,464,532,759,466,784,468,809,185,
            466,466,468,468,185,185,1071,938,501,1069,
            56,1077,501,376,60,65,198,960,503,62,
            66,343,503,999,506,1010,512,1100,506,897,
            512,1021,79,1032,79,915,1043,79,453,1104,
            337,390,1054,79,858,1097,188,1090,1105,877,
            851,975,1089,977,895,1107,1108,1116,1121,1122,
            1123,1124,1126,1127,536,536
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,0,96,97,98,99,
            100,101,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,0,96,97,
            98,99,100,101,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,0,
            96,97,98,99,0,0,102,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,0,76,77,78,79,80,81,82,
            83,84,85,86,87,88,89,90,91,92,
            93,94,0,96,97,0,0,100,101,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,73,74,75,76,77,78,79,80,
            81,82,83,84,85,86,87,88,89,90,
            91,92,93,94,0,0,0,98,99,0,
            1,2,3,4,5,6,7,8,9,10,
            11,0,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,73,74,75,76,77,78,79,80,
            81,82,83,84,85,86,87,88,89,90,
            91,92,93,94,0,0,0,98,99,0,
            1,2,3,4,5,6,7,8,9,10,
            11,0,0,14,15,16,17,18,19,20,
            21,22,23,24,25,26,0,28,29,30,
            31,32,33,0,0,0,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            0,0,73,0,1,2,3,4,5,6,
            7,8,9,10,11,0,0,14,15,16,
            17,18,19,20,21,22,23,24,0,1,
            2,3,4,5,6,7,8,9,10,11,
            25,26,14,15,16,17,18,19,20,21,
            22,23,24,0,1,2,3,4,5,6,
            7,8,9,10,11,0,0,14,15,16,
            17,18,19,20,21,22,23,24,0,1,
            2,3,4,5,6,7,8,9,10,11,
            0,0,14,15,16,17,18,19,20,21,
            22,23,24,0,1,2,3,4,5,6,
            7,8,9,10,11,0,0,14,15,16,
            17,18,19,20,21,22,23,24,0,1,
            2,3,4,5,6,7,8,9,10,11,
            0,0,14,15,16,17,18,19,20,21,
            22,23,24,0,1,2,3,4,5,6,
            7,8,9,10,11,0,0,14,15,16,
            0,18,19,0,0,0,0,0,0,13,
            27,0,1,2,3,4,5,6,7,8,
            13,13,11,12,0,0,0,27,17,0,
            1,2,3,4,5,6,7,8,12,28,
            29,30,31,36,0,34,0,1,2,3,
            4,5,6,7,8,0,12,11,12,0,
            0,0,0,17,0,1,2,3,4,5,
            6,7,8,13,28,29,30,31,95,0,
            34,0,74,0,77,0,75,0,1,2,
            3,4,5,6,7,8,9,10,0,1,
            2,3,4,5,6,7,8,9,10,0,
            1,2,3,4,5,6,7,8,9,10,
            95,75,35,36,0,27,0,0,0,0,
            0,0,72,0,0,0,27,0,1,2,
            3,4,5,6,7,8,9,10,0,1,
            2,3,4,5,6,7,8,9,10,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,0,1,2,3,4,5,6,7,
            8,9,10,0,1,2,3,4,5,6,
            7,8,9,10,0,0,0,0,0,95,
            0,95,0,0,0,11,0,0,14,15,
            16,11,18,19,14,15,16,11,0,0,
            14,15,16,25,26,0,0,0,0,0,
            32,33,13,0,0,0,0,0,13,13,
            13,13,13,25,26,0,13,13,12,12,
            0,0,0,0,0,0,0,12,0,0,
            0,35,12,12,12,12,71,12,12,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,96,97,95,0,100,101,78,79,0,
            0,76,0,0,0,0,0,0,0,0,
            0,0,0,95,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            536,606,606,606,606,606,606,606,606,606,
            606,606,606,606,606,606,606,606,606,606,
            606,606,606,606,606,606,606,606,606,606,
            606,606,606,606,606,606,606,606,606,606,
            606,606,606,606,606,606,606,606,606,606,
            606,606,606,606,606,606,606,606,606,606,
            606,606,606,606,606,606,606,606,606,606,
            606,606,606,606,606,606,606,606,605,427,
            606,606,606,606,606,606,606,606,606,606,
            606,606,606,606,606,76,606,606,606,606,
            606,606,536,604,604,604,604,604,604,604,
            604,604,604,604,604,604,604,604,604,604,
            604,604,604,604,604,604,604,604,604,604,
            604,604,604,604,604,604,604,604,604,604,
            604,604,604,604,604,604,604,604,604,604,
            604,604,604,604,604,604,604,604,604,604,
            604,604,604,604,604,604,604,604,604,604,
            604,604,604,604,604,604,604,604,604,604,
            544,609,604,604,604,604,604,604,604,604,
            604,604,604,604,604,604,604,71,604,604,
            604,604,604,604,9,611,611,611,611,611,
            611,611,611,611,611,611,611,611,611,611,
            611,611,611,611,611,611,611,611,611,611,
            611,611,611,611,611,611,611,611,611,611,
            611,611,611,611,611,611,611,611,611,611,
            611,611,611,611,611,611,611,611,611,611,
            611,611,611,611,611,611,611,611,611,611,
            611,611,611,611,611,611,611,611,611,611,
            611,611,611,611,611,611,611,611,611,611,
            611,611,611,611,611,611,611,611,611,536,
            611,611,611,611,536,536,611,536,479,522,
            522,522,522,522,522,522,522,522,521,406,
            497,521,521,521,521,521,521,521,521,521,
            521,521,521,521,434,521,521,521,521,521,
            521,404,515,514,521,521,521,521,521,521,
            521,521,521,521,521,521,521,521,521,521,
            521,521,521,521,521,521,521,521,521,521,
            521,521,521,521,521,521,521,521,523,424,
            521,402,536,398,563,517,509,441,386,571,
            559,458,555,556,568,569,566,567,570,554,
            551,552,536,523,523,536,536,523,523,536,
            613,613,613,613,613,613,613,613,613,613,
            613,613,613,613,613,613,613,613,613,613,
            613,613,613,613,613,613,613,613,613,613,
            613,613,613,538,613,613,613,613,613,613,
            613,613,613,613,613,613,613,613,613,613,
            613,613,613,613,613,613,613,613,613,613,
            613,613,613,613,613,613,613,613,613,613,
            613,613,613,613,499,613,613,613,613,613,
            613,613,613,613,613,613,613,613,613,613,
            613,613,613,613,536,536,536,613,613,536,
            519,519,519,519,519,519,519,519,519,519,
            519,536,519,519,519,519,519,519,519,519,
            519,519,519,519,519,519,519,519,519,519,
            519,519,519,519,519,519,519,519,519,519,
            519,519,519,519,519,519,519,519,519,519,
            519,519,519,519,519,519,519,519,519,519,
            519,519,519,519,519,519,519,519,519,519,
            519,519,519,519,425,519,519,519,519,519,
            519,519,519,519,519,519,519,519,519,519,
            519,519,519,519,536,536,536,519,519,1,
            739,739,739,739,739,739,739,739,739,739,
            738,536,536,738,738,738,738,738,738,738,
            738,738,738,738,738,738,536,738,738,738,
            738,738,738,536,536,536,738,738,738,738,
            738,738,738,738,738,738,738,738,738,738,
            738,738,738,738,738,738,738,738,738,738,
            738,738,738,738,738,738,738,738,738,738,
            536,536,738,536,376,376,376,376,376,376,
            376,376,376,376,376,4,536,376,376,376,
            376,376,376,376,376,376,376,376,536,533,
            533,533,533,533,533,533,533,533,533,532,
            592,592,532,532,532,532,532,532,532,532,
            532,532,532,55,617,617,617,617,617,617,
            617,617,617,617,617,536,536,617,617,617,
            617,617,617,617,617,617,617,617,182,466,
            466,466,466,466,466,466,466,466,466,466,
            536,536,466,466,466,466,466,466,466,466,
            466,466,466,183,468,468,468,468,468,468,
            468,468,468,468,468,536,536,468,468,468,
            468,468,468,468,468,468,468,468,184,721,
            721,721,721,721,721,721,721,721,721,721,
            536,536,721,721,721,721,721,721,721,721,
            721,721,721,54,615,615,615,615,615,615,
            615,615,615,615,599,536,29,603,603,599,
            354,477,477,536,536,536,536,12,25,576,
            487,536,524,525,526,527,528,529,530,531,
            579,582,884,887,536,536,536,589,881,186,
            505,505,505,505,505,505,505,505,539,883,
            885,882,456,573,160,886,536,873,873,873,
            873,873,873,873,873,536,186,884,887,536,
            24,536,536,881,187,724,724,724,724,724,
            724,724,724,583,883,885,882,872,4,536,
            886,536,588,536,891,536,888,536,501,501,
            501,501,501,501,501,501,501,501,28,364,
            364,364,364,364,364,364,364,364,364,83,
            503,503,503,503,503,503,503,503,503,503,
            535,888,495,493,201,520,199,536,536,536,
            536,536,587,536,536,536,892,82,615,615,
            615,615,615,615,615,615,615,615,536,506,
            506,506,506,506,506,506,506,506,506,536,
            512,512,512,512,512,512,512,512,512,512,
            85,615,615,615,615,615,615,615,615,615,
            615,84,615,615,615,615,615,615,615,615,
            615,615,87,615,615,615,615,615,615,615,
            615,615,615,86,615,615,615,615,615,615,
            615,615,615,615,6,10,536,536,78,1,
            59,10,536,536,536,594,61,536,600,600,
            594,596,477,477,601,601,596,598,78,14,
            602,602,598,54,54,26,11,22,21,17,
            453,453,581,13,41,536,161,162,575,578,
            585,584,574,54,54,163,580,586,186,186,
            164,165,166,167,536,181,180,186,536,536,
            536,572,186,186,186,186,736,182,182,536,
            536,536,536,536,536,536,536,536,536,536,
            536,536,536,536,536,536,536,536,536,536,
            536,736,736,4,536,736,736,610,486,536,
            536,518,536,536,536,536,536,536,536,536,
            536,536,536,4
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 64,
           NT_OFFSET         = 102,
           LA_STATE_OFFSET   = 892,
           MAX_LA            = 1,
           NUM_RULES         = 356,
           NUM_NONTERMINALS  = 42,
           NUM_SYMBOLS       = 144,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 357,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 95,
           EOLT_SYMBOL       = 103,
           ACCEPT_ACTION     = 535,
           ERROR_ACTION      = 536;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
