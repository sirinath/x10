<project name="x10.polyglot" default="compile" basedir=".">
	<description>
	  Polyglot build file
	</description>

	<!-- set global properties for this build -->

	<!-- source directory -->
	<property name="src" location="${basedir}/src" />

	<!-- directory for class file targets -->
	<property name="classes" location="${basedir}/classes" />

	<!-- directory for jar files -->
	<property name="lib" location="${basedir}/lib" />

	<!-- classpath to use when compiling polyglot -->
	<path id="standard.classpath">
		<pathelement location="${classes}" />
	</path>

	<target name="configure-version" unless="jl.version">
		<property file="${basedir}/build.properties" prefix="jl" />
		<property name="jl.version" value="${jl.version.major}.${jl.version.minor}.${jl.version.patch}" />
	</target>

	<target name="configure-buildstring" depends="configure-version" unless="jl.version.build">
		<tstamp>
			<format property="now" pattern="yyyy-MM-dd HH:mm:ss" />
		</tstamp>
		<property name="jl.version.build" value="${jl.version} (${now})" />
	</target>

	<target name="configure" description="Check the build configuration" depends="configure-buildstring" unless="configure.up-to-date">
		<echo message="java version is ${java.version}" />
		<echo message="current directory is ${user.dir}" />
		<echo message="Java home directory is ${java.home}" />
		<echo message="Polyglot version is ${jl.version.build}" />
		<property name="configure.up-to-date" value="true" />
	</target>

	<!-- initialize the build -->
	<target name="init" depends="configure">
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the build directory structure used by compile -->
		<antcall target="mkdirs" />
	</target>
	
	<target name="mkdirs">
		<mkdir dir="${classes}" />
		<mkdir dir="${lib}" />
	</target>

	<!-- build everything -->
	<target name="all" depends="jar" description="Build everything" />

        <!-- build the base compiler -->
        <target name="compile" depends="base" description="Build the base compiler" />

	<!-- build the base compiler -->
	<target name="base" depends="compile-base" description="Build the base compiler" />
	<target name="jl" depends="base" description="Build the base compiler" />

	<!-- compile everything -->
	<target name="compile-all" depends="base" description="Compile the base compiler" />

	<target name="clean" description="Cleans up the directory tree: deletes the distribution directory and the classes directories">
		<!-- Delete the ${classes} and ${dist} directory trees -->
		<delete dir="${lib}/polyglot.jar" failonerror="false"/>
		<delete dir="${classes}" includeemptydirs="true" failonerror="false" />
		<antcall target="mkdirs" />
	</target>

	<target name="clobber" depends="clean" description="Cleans up the directory tree and deletes generated files">
	</target>

	<!-- compile the base compiler -->
	<target name="compile-base" depends="init">
		<javac source="1.5" target="1.5" srcdir="${src}" destdir="${classes}" debug="on" includes="polyglot/**">
			<classpath refid="standard.classpath" />
		</javac>
	</target>

	<target name="jar" description="Build polyglot.jar" depends="jar-base" />

	<target name="jar-base" depends="jl,configure-buildstring">
		<delete file="${lib}/polyglot.jar" failonerror="false" />
		<delete file="${classes}/MANIFEST.MF" failonerror="false" />

		<manifest file="${classes}/MANIFEST.MF">
			<attribute name="Built-By" value="${user.name}" />
			<attribute name="Main-Class" value="polyglot.main.Main" />

			<attribute name="Implementation-Version" value="${jl.version}" />
			<attribute name="Built-Date" value="${jl.version.build}" />
			<attribute name="Class-Path" value="polyglot.jar" />
		</manifest>

                <jar destfile="${lib}/polyglot.jar" basedir="${classes}" manifest="${classes}/MANIFEST.MF" includes="polyglot/ast/**,polyglot/frontend/**,polyglot/main/**,polyglot/types/**,polyglot/util/**,polyglot/dispatch/**,polyglot/visit/**" />

		<delete file="${classes}/MANIFEST.MF" failonerror="false" />
	</target>

	<target name="jar-epl-base" depends="bin-epl.jar" description="Build a jar file containing the EPL-licensed base compiler"/>


	<!-- Distribution targets -->

	<!-- make the source distribution and install into dist -->
	<target name="src.jar" depends="compile-base">
		<jar destfile="${lib}/polyglot-src.jar" basedir="${basedir}" includes="src/**/*.java" />
	</target>

	<!-- build a combined source and binary jar file -->
	<target name="bin-epl.jar" depends="compile-base,configure-buildstring">
		<mkdir dir="${classes}/META-INF" />
		<filter token="version" value="${jl.version}" />
		<copy tofile="${classes}/META-INF/MANIFEST.MF" filtering="true">
			<fileset file="${basedir}/META-INF/MANIFEST.MF.in" />
		</copy>

		<manifest file="${classes}/META-INF/MANIFEST.MF" mode="update">
			<attribute name="Built-By" value="${user.name}" />
			<attribute name="Implementation-Version" value="${jl.version}" />
			<attribute name="Built-Date" value="${jl.version.build}" />
		</manifest>

		<copy todir="${classes}/src">
			<fileset dir="${basedir}/src" includes="**/*.java" />
		</copy>

		<jar destfile="${lib}/polyglot.jar" basedir="${classes}" manifest="${classes}/META-INF/MANIFEST.MF" includes="src/**,polyglot/**" />
	</target>


        <target name="gen-version">
		<antcall target="configure-buildstring" />
		<antcall target="gen-version-java" />
		<antcall target="gen-version-manifest" />
	</target>

        <target name="bump-version">
                <antcall target="bump-patch"/>
        </target>

	<target name="bump-major">
		<propertyfile file="${basedir}/build.properties">
			<entry key="version.major" type="int" operation="+" value="1" pattern="0" />
                        <entry key="version.minor" type="int" value="0"/>
                        <entry key="version.patch" type="int" value="0"/>
		</propertyfile>
		<!-- reread -->
		<antcall target="configure-buildstring" />
		<antcall target="gen-version" />
	</target>

	<target name="bump-minor">
		<propertyfile file="${basedir}/build.properties">
			<entry key="version.minor" type="int" operation="+" value="1" pattern="0" />
                        <entry key="version.patch" type="int" value="0"/>
		</propertyfile>
		<!-- reread -->
		<antcall target="configure-buildstring" />
		<antcall target="gen-version" />
	</target>

	<target name="bump-patch">
		<propertyfile file="${basedir}/build.properties">
			<entry key="version.patch" type="int" operation="+" value="1" pattern="0" />
		</propertyfile>
		<!-- reread -->
		<antcall target="configure-buildstring" />
		<antcall target="gen-version" />
	</target>

	<target name="gen-version-manifest" depends="configure-buildstring">
		<filter token="version" value="${jl.version}" />
                <delete file="META-INF/MANIFEST.MF" failonerror="false" />
		<copy tofile="META-INF/MANIFEST.MF" filtering="true">
			<fileset file="${basedir}/META-INF/MANIFEST.MF.in" />
		</copy>
	</target>
		
	<target name="gen-version-java" depends="configure-buildstring">
		<echo file="${basedir}/src/polyglot/frontend/JLVersion.java">/*
 * This file is part of the Polyglot extensible compiler framework.
 *
 * Copyright (c) 2000-2007 Polyglot project group, Cornell University
 * Copyright (c) 2006-2007 IBM Corporation
 */
package polyglot.frontend;

/**
 * Version information for the base compiler.
 */
public class JLVersion extends polyglot.main.Version {
    public String name() { return "jl"; }
    public int major() { return ${jl.version.major}; }
    public int minor() { return ${jl.version.minor}; }
    public int patch_level() { return ${jl.version.patch}; }
    public String toString() { return "${jl.version.build}"; }
}
</echo>
	</target>
</project>

