// SYNOPSIS: #0.main(...)

##include <x10/runtime/Runtime.h>

extern "C" {
    void __pgasrt_tsp_barrier(int,int);
    int main(int ac, char **av) {

        x10aux::ref<Rail<x10aux::ref<String> > > args = x10aux::convert_args(ac, av);
##ifndef NO_EXCEPTIONS
        try {
##endif
            __pgasrt_tsp_barrier(0,1); // needed so that noone sends a message until now

            // Initialise enough state to make this 'main' thread look like a normal x10 thread
            // (e.g. make Thread::CurrentThread work properly).
            x10::runtime::Thread::_make(x10aux::null, String::Lit("thread-main"));

            // Initialise the static fields of x10 classes.
            x10aux::InitDispatcher::runInitializers();

            // Construct closure to invoke the user's "public static def main(Rail[String]) : Void"
            // if at place 0 otherwise wait for asyncs.
            x10aux::ref<VoidFun_0_0> main_closure =
                new (x10aux::alloc<VoidFun_0_0>(sizeof(x10aux::BootStrapClosure)))
                    x10aux::BootStrapClosure(#0::main,args);

            x10::runtime::Runtime::start(main_closure); // use XRX
            //main_closure->apply(); // bypass XRX
            //sleep(3);

##ifndef NO_EXCEPTIONS
        } catch(int exitCode) {
            x10aux::exitCode = exitCode;
        } catch(x10aux::__ref& e) {
            // Assume that only throwables can be thrown
            x10aux::ref<Throwable> &e_ = static_cast<x10aux::ref<Throwable>&>(e);
            fprintf(stderr, "Uncaught exception at place %d of type: %s\n",
                                (int)x10_here(), e_->_type()->name().c_str());
            fprintf(stderr, "%s\n", e_->toString()->c_str());
            x10aux::ref<ValRail<x10aux::ref<String> > > trace = e_->getStackTrace();
            x10aux::ref<Iterator<x10aux::ref<String> > > it = trace->iterator();
            while (it->hasNext()) {
                fprintf(stderr, "        at %s\n", it->next()->c_str());
            }
            x10aux::exitCode = 1;
        } catch(...) {
            fprintf(stderr, "Caught unrecognised exception at place %d\n", (int)x10_here());
            x10aux::exitCode = 1;
        }
##endif
        //fprintf(stderr, "Done with main in place %d", (int)x10_here());
        x10aux::free_args(args);
        x10aux::shutdown();
        if (getenv("X10_RXTX")!=NULL)
            fprintf(stderr, "Place: %d   rx: %lld   tx: %lld\n", (int)x10_here(),
                                                                 (long long)x10aux::deserialized_bytes,
                                                                 (long long)x10aux::serialized_bytes);
        return x10aux::exitCode;
    }
}


// the original app-main method

